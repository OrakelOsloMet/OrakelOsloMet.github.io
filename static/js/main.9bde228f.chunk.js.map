{"version":3,"sources":["assets/images/oslometsvart.png","assets/images/oslomethvit.png","serviceWorker.js","utilities/objectUtilities.js","constants/constants.js","axios-api.js","store/actions/authActions.js","store/actions/actionTypes.js","headers/auth-header.js","store/actions/queueActions.js","components/UI/Modals/SwalModals/SwalModals.js","components/Navigation/Navbar/Navbar.js","utilities/formUtilities.js","components/UI/Input/Input.js","components/UI/LoadingSpinner/LoadingSpinner.js","components/UI/Buttons/Buttons.js","components/UI/Modals/FormModal/FormModal.js","containers/Login/Login.js","higherOrderedComponents/Layout/Layout.js","components/UI/Tables/TableHead/TableHead.js","components/UI/Tables/QueueTable.js","containers/Queue/Queue.js","higherOrderedComponents/withPolling/withPolling.js","App.js","store/reducers/authReducer.js","store/reducers/queueReducer.js","index.js","components/Navigation/Navbar/Navbard.module.css","assets/globalStyles/globalStyles.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","updateObject","oldObject","updatedProperties","objectConditionalByEnvironment","productionObject","API_BASE_PATH","USER_GUIDE_PATH","instance","axios","create","baseURL","authSuccess","user","type","token","userId","userRoles","roles","logout","localStorage","removeItem","checkValidAuth","dispatch","JSON","parse","getItem","post","AUTH_PATH","then","response","data","toggleLoginModal","visible","authHeader","USER","Authorization","fetchQueue","get","queueData","catch","error","fetchQueueFail","SwalInfoModal","title","contentText","url","hyperlinkText","hyperlinkDiv","document","createElement","innerHTML","swal","text","content","icon","button","className","connect","state","isAuthenticated","auth","showLoginModal","actions","logoutHandler","props","linkStyle","styles","authenticatedLinkText","defaultLinkText","navbarProps","bg","expand","variant","loginButton","Nav","Link","onClick","Navbar","Brand","invisibleOnMobile","brandImage","alt","src","require","authenticatedBrandText","brandText","Toggle","aria-controls","Collapse","id","inputChangedHandler","event","inputIdentifier","form","updatedFormElement","value","target","valid","checkFormElementValidity","validation","touched","updatedForm","formIsValid","rules","isValid","required","trim","minLength","length","maxLength","clearFormInputs","clearedForm","formElementIdentifier","Object","prototype","hasOwnProperty","call","inputType","input","inputElement","onChange","changed","inputConfig","options","map","option","key","displayValue","loadingSpinner","SubmitButton","disabled","children","CancelButton","ConfirmButton","DeleteButton","FormModal","Modal","size","aria-labelledby","centered","Header","closeButton","Title","Body","Container","Footer","onHide","loginHandler","Login","username","placeholder","label","password","submitHandler","onLoginSubmit","setState","formElements","this","push","config","loading","LoadingSpinner","formElement","Input","invalid","shouldValidate","globalStyles","errorMessage","show","showModal","hideLoginModal","Component","setItem","stringify","authFail","message","Layout","tableHead","columns","defaultColumns","forEach","column","scope","loggedInColumns","queueTable","rows","i","rowId","cells","name","subject","digitalConsultation","actionButtons","confirmDoneEntity","deleteQueueEntity","includes","TableHead","tableBody","Table","striped","bordered","hover","responsive","Queue","year","discord","fillSubjectSelector","subjectListUpdated","subjects","registrationHandler","preventDefault","formData","postNewQueueEntry","queueEntity","studyYear","addQueueEntity","setTimeout","table","onSubmit","withPolling","pollingAction","duration","dataPolling","setInterval","clearInterval","React","queue","subjectData","addToQueueFail","delete","headers","deleteFromQueueFail","QUEUE_PATH","doneInQueueFail","App","autoSignIn","getSubjectData","routes","path","exact","render","to","withRouter","fetchSubjectsFail","initialState","authStart","action","authLogout","reducer","initAction","failedAction","fetchQueueSuccess","addRemoveSuccess","fetchSubjectsSuccess","rootReducer","combineReducers","authReducer","queueReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","next","console","log","result","getState","thunk","app","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9bde228f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/oslometsvart.3b9b0cc3.png\";","module.exports = __webpack_public_path__ + \"static/media/oslomethvit.2c306d99.png\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export const updateObject = (oldObject, updatedProperties) => {\r\n    return {\r\n        ...oldObject,\r\n        ...updatedProperties\r\n    };\r\n};\r\n\r\nexport const objectConditionalByEnvironment = (devObject = null, productionObject = null) => {\r\n    return process.env.NODE_ENV === \"production\" ? productionObject : devObject;\r\n};\r\n","import {objectConditionalByEnvironment} from \"../utilities/objectUtilities\";\r\n\r\n/* ----- Authentication ------ */\r\nexport const LOCAL_STORAGE_USER = \"user\";\r\n\r\n/* ----- API ------ */\r\nexport const API_BASE_PATH = objectConditionalByEnvironment(\"http://localhost:8080/api/\", \"https://orakelqueueservice.herokuapp.com/api/\");\r\n\r\n//Queue\r\nexport const QUEUE_PATH = \"queue/\";\r\nexport const CONFIRM_DONE_PATH = QUEUE_PATH + \"confirmdone/\";\r\n\r\n//Subjects\r\nexport const SUBJECTS_PATH = \"subjects/\";\r\n\r\n//Auth\r\nexport const AUTH_PATH = \"auth/\";\r\nexport const LOGIN_PATH = AUTH_PATH + \"signin\";\r\nexport const CHECK_TOKEN_PATH = AUTH_PATH + \"isTokenValid\";\r\n\r\n//Resources\r\nexport const USER_GUIDE_PATH = API_BASE_PATH + \"resources/userguide\";\r\n\r\n/* ----- Routing ----- */\r\nexport const INDEX_ROUTE = \"/Orakel_Queue_Client/\";\r\n\r\n//TODO Add all hardcoded string values to this file\r\n","import axios from \"axios\";\r\nimport {API_BASE_PATH} from \"./constants/constants\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: API_BASE_PATH\r\n});\r\n\r\nexport default instance;","import axios from \"../../axios-api\";\r\nimport * as actionTypes from \"./actionTypes\";\r\nimport {LOGIN_PATH, CHECK_TOKEN_PATH, LOCAL_STORAGE_USER} from \"../../constants/constants\";\r\n\r\nconst authStart = () => {\r\n    return {\r\n        type: actionTypes.AUTH_START\r\n    }\r\n};\r\n\r\nconst authSuccess = (user) => {\r\n    return {\r\n        type: actionTypes.AUTH_SUCCESS,\r\n        token: user.token,\r\n        userId: user.userId,\r\n        userRoles: user.roles\r\n    }\r\n};\r\n\r\nconst authFail = (error) => {\r\n    return {\r\n        type: actionTypes.AUTH_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nconst getCurrentUser = () => {\r\n    return JSON.parse(localStorage.getItem(LOCAL_STORAGE_USER));\r\n};\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem(LOCAL_STORAGE_USER);\r\n\r\n    return {\r\n        type: actionTypes.AUTH_LOGOUT\r\n    }\r\n};\r\n\r\nexport const checkValidAuth = () => {\r\n    return dispatch => {\r\n        const user = getCurrentUser();\r\n\r\n        if (user && user.token) {\r\n            axios.post(CHECK_TOKEN_PATH, user.token).then(response => {\r\n                if (response.data === true) {\r\n                    dispatch(authSuccess(user))\r\n                } else {\r\n                    dispatch(logout())\r\n                }\r\n            });\r\n        } else {\r\n            dispatch(logout())\r\n        }\r\n    }\r\n};\r\n\r\nexport const auth = (username, password) => {\r\n    return dispatch => {\r\n        dispatch(authStart());\r\n\r\n        axios.post(LOGIN_PATH, {username, password})\r\n            .then(response => {\r\n                if (response.data.token) {\r\n                    localStorage.setItem(LOCAL_STORAGE_USER, JSON.stringify(response.data));\r\n                    dispatch(authSuccess(response.data));\r\n                }\r\n            }).catch(error => {\r\n                dispatch(authFail(error.response.data.message))\r\n        });\r\n    }\r\n};\r\n\r\nexport const toggleLoginModal = (visible) => {\r\n    return {\r\n        type: actionTypes.TOGGLE_LOGIN_MODAL,\r\n        visible: visible\r\n    }\r\n};\r\n","\r\n/* ----- Authentication ----- */\r\nexport const AUTH_START = \"AUTH_START\";\r\nexport const AUTH_SUCCESS = \"AUTH_SUCCESS\";\r\nexport const AUTH_FAIL = \"AUTH_FAIL\";\r\nexport const AUTH_LOGOUT = \"AUTH_LOGOUT\";\r\nexport const TOGGLE_LOGIN_MODAL = \"TOGGLE_LOGIN_MODAL\";\r\n\r\n/* ----- Queue ----- */\r\nexport const FETCH_QUEUE_START = \"FETCH_QUEUE_START\";\r\nexport const FETCH_QUEUE_SUCCESS = \"FETCH_QUEUE_SUCCESS\";\r\nexport const FETCH_QUEUE_FAIL = \"FETCH_QUEUE_FAIL\";\r\n\r\nexport const ADD_TO_QUEUE_START = \"ADD_TO_QUEUE_START\";\r\nexport const ADD_TO_QUEUE_SUCCESS = \"ADD_TO_QUEUE_SUCCESS\";\r\nexport const ADD_TO_QUEUE_FAIL = \"ADD_TO_QUEUE_FAIL\";\r\n\r\nexport const DELETE_FROM_QUEUE_START = \"DELETE_FROM_QUEUE_START\";\r\nexport const DELETE_FROM_QUEUE_SUCCESS = \"DELETE_FROM_QUEUE_SUCCESS\";\r\nexport const DELETE_FROM_QUEUE_FAIL = \"DELETE_FROM_QUEUE_FAIL\";\r\n\r\nexport const DONE_IN_QUEUE_START = \"DONE_IN_QUEUE_START\";\r\nexport const DONE_IN_QUEUE_SUCCESS = \"DONE_IN_QUEUE_SUCCESS\";\r\nexport const DONE_IN_QUEUE_FAIL = \"DONE_IN_QUEUE_FAIL\";\r\n\r\nexport const FETCH_SUBJECTS_START = \"FETCH_SUBJECTS_START\";\r\nexport const FETCH_SUBJECTS_SUCCESS = \"FETCH_SUBJECTS_SUCCESS\";\r\nexport const FETCH_SUBJECTS_FAIL = \"FETCH_SUBJECTS_FAIL\";\r\n\r\n","import {LOCAL_STORAGE_USER} from \"../constants/constants\";\r\n\r\nexport default function authHeader() {\r\n\r\n    const USER = JSON.parse(localStorage.getItem(LOCAL_STORAGE_USER));\r\n\r\n    if (USER && USER.token) {\r\n        return { Authorization: \"Bearer \" + USER.token };\r\n    } else {\r\n        return {};\r\n    }\r\n}\r\n","import axios from \"../../axios-api\";\r\nimport * as actionTypes from \"./actionTypes\";\r\nimport {CONFIRM_DONE_PATH, QUEUE_PATH, SUBJECTS_PATH} from \"../../constants/constants\";\r\nimport authHeader from \"../../headers/auth-header\";\r\n\r\n/* ----- Fetch Queue Data ----- */\r\n\r\nconst fetchQueueStart = () => {\r\n    return {\r\n        type: actionTypes.FETCH_QUEUE_START\r\n    }\r\n};\r\n\r\nconst fetchQueueSuccess = (queueData) => {\r\n    return {\r\n        type: actionTypes.FETCH_QUEUE_SUCCESS,\r\n        queueData: queueData\r\n    }\r\n};\r\n\r\nconst fetchQueueFail = (error) => {\r\n    return {\r\n        type: actionTypes.FETCH_QUEUE_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nexport const fetchQueue = () => {\r\n    return dispatch => {\r\n        dispatch(fetchQueueStart());\r\n\r\n        axios.get(QUEUE_PATH)\r\n            .then(response => {\r\n                dispatch(fetchQueueSuccess(response.data))\r\n            })\r\n            .catch(error => {\r\n                dispatch(fetchQueueFail(error.response))\r\n            })\r\n    }\r\n};\r\n\r\n/* ----- Add to Queue ----- */\r\n\r\nconst addToQueueStart = () => {\r\n    return {\r\n        type: actionTypes.ADD_TO_QUEUE_START\r\n    }\r\n};\r\n\r\nconst addToQueueSuccess = () => {\r\n    return {\r\n        type: actionTypes.ADD_TO_QUEUE_SUCCESS\r\n    }\r\n};\r\n\r\nconst addToQueueFail = (error) => {\r\n    return {\r\n        type: actionTypes.ADD_TO_QUEUE_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nexport const addToQueue = (queueEntity) => {\r\n    return dispatch => {\r\n        dispatch(addToQueueStart());\r\n        axios.post(QUEUE_PATH, queueEntity)\r\n            .then(() => {\r\n                dispatch(addToQueueSuccess());\r\n                dispatch(fetchQueue());\r\n            })\r\n            .catch(error => {\r\n                dispatch(addToQueueFail(error.response));\r\n            });\r\n    }\r\n};\r\n\r\n/* ----- Delete From Queue ----- */\r\n\r\nconst deleteFromQueueStart = () => {\r\n    return {\r\n        type: actionTypes.DELETE_FROM_QUEUE_START\r\n    }\r\n};\r\n\r\nconst deleteFromQueueSuccess = () => {\r\n    return {\r\n        type: actionTypes.DELETE_FROM_QUEUE_SUCCESS\r\n    }\r\n};\r\n\r\nconst deleteFromQueueFail = (error) => {\r\n    return {\r\n        type: actionTypes.DELETE_FROM_QUEUE_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nexport const deleteFromQueue = (id) => {\r\n    return dispatch => {\r\n        dispatch(deleteFromQueueStart());\r\n\r\n        axios.delete(QUEUE_PATH + id, {headers: authHeader()})\r\n            .then(() => {\r\n                dispatch(deleteFromQueueSuccess());\r\n                dispatch(fetchQueue());\r\n            })\r\n            .catch(error => {\r\n                dispatch(deleteFromQueueFail(error.response));\r\n            });\r\n    }\r\n};\r\n\r\n/* ----- Done in Queue ----- */\r\n\r\nconst doneInQueueStart = () => {\r\n    return {\r\n        type: actionTypes.DONE_IN_QUEUE_START\r\n    }\r\n};\r\n\r\nconst doneInQueueSuccess = () => {\r\n    return {\r\n        type: actionTypes.DONE_IN_QUEUE_SUCCESS\r\n    }\r\n};\r\n\r\nconst doneInQueueFail = (error) => {\r\n    return {\r\n        type: actionTypes.DONE_IN_QUEUE_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nexport const doneInQueue = (id) => {\r\n    return dispatch => {\r\n        dispatch(doneInQueueStart());\r\n\r\n        axios.post(CONFIRM_DONE_PATH + id, null, {headers: authHeader()})\r\n            .then(() => {\r\n                dispatch(doneInQueueSuccess());\r\n                dispatch(fetchQueue());\r\n            })\r\n            .catch(error => {\r\n                dispatch(doneInQueueFail(error.response));\r\n            });\r\n    }\r\n};\r\n\r\n/* ----- Fetch Subjects ----- */\r\n\r\nconst fetchSubjectsStart = () => {\r\n    return {\r\n        type: actionTypes.FETCH_SUBJECTS_START\r\n    }\r\n};\r\n\r\nconst fetchSubjectsSuccess = (subjectData) => {\r\n    return {\r\n        type: actionTypes.FETCH_SUBJECTS_SUCCESS,\r\n        subjectData: subjectData\r\n    }\r\n};\r\n\r\nconst fetchSubjectsFail = (error) => {\r\n    return {\r\n        type: actionTypes.FETCH_SUBJECTS_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nexport const fetchSubjects = () => {\r\n    return dispatch => {\r\n        dispatch(fetchSubjectsStart());\r\n\r\n        axios.get(SUBJECTS_PATH)\r\n            .then(response => {\r\n            dispatch(fetchSubjectsSuccess(response.data));\r\n        }).catch(error => {\r\n            dispatch(fetchSubjectsFail(error.response));\r\n        });\r\n    }\r\n};","import swal from \"sweetalert\";\r\n\r\nexport const SwalInfoModal = (title, contentText, url = null, hyperlinkText = null) => {\r\n    const hyperlinkDiv = document.createElement(\"div\");\r\n\r\n    if (url && hyperlinkText) {\r\n        hyperlinkDiv.innerHTML = `<strong><a href=\"${url}\" target=\"_blank\">${hyperlinkText}</a></strong>`;\r\n    }\r\n\r\n    return (\r\n        swal({\r\n                title: title,\r\n                text: contentText,\r\n                content: url && hyperlinkText ? hyperlinkDiv: null,\r\n                icon: \"info\",\r\n                button: {\r\n                    text: \"Ok\",\r\n                    className: \"btn btn-primary\"\r\n                },\r\n            }\r\n        )\r\n    );\r\n};","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Navbar} from \"react-bootstrap\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\n\r\nimport * as actions from \"../../../store/actions/actionIndex\";\r\nimport styles from \"./Navbard.module.css\";\r\nimport {USER_GUIDE_PATH} from \"../../../constants/constants\";\r\n\r\nimport {SwalInfoModal} from \"../../UI/Modals/SwalModals/SwalModals\";\r\n\r\nconst navbar = (props) => {\r\n\r\n    const showDiscordMessage = () => {\r\n        SwalInfoModal(\"Discord\",\r\n            \"For digital veiledning benytter vi oss av Discord, og har vår egen server til dette. Inne på serveren \" +\r\n            \"setter vi pris på om du leser informasjonen i tekstkanalen kalt informasjon, og vi anbefaler alle å laste \" +\r\n            \"ned klienten deres i stedet for å bruke tjenesten gjennom nettleseren.\",\r\n            \"https://discord.gg/jgzqYpX\",\r\n            \"Orakel Discord\");\r\n    };\r\n\r\n    const showErrorReportingMessage = () => {\r\n        SwalInfoModal(\r\n            \"Feilrapportering\",\r\n            \"Orakels køsystem er et fritidsprosjekt som er bygget og vedlikeholdt av en person. Det er derfor \" +\r\n            \"en viss fare for bugs og feil. Disse kan rapporteres ved å legge inn en issue på GitHub-repoet, eller \" +\r\n            \"ved å ta kontakt med Fredrik Pedersen. Vi setter også pris på ønsker om tilleggsfunksjonalitet :) \",\r\n            \"https://github.com/OrakelOsloMet/Orakel_Queue_Client/issues\",\r\n            \"GitHub Repo\");\r\n    };\r\n\r\n    const showAboutMessage = () => {\r\n        SwalInfoModal(\"Om Orakels Køsystem\", \"Coming Soon!\", USER_GUIDE_PATH, \"Brukerveiledning\");\r\n    };\r\n\r\n    const linkStyle = props.isAuthenticated ? styles.authenticatedLinkText : styles.defaultLinkText;\r\n    const navbarProps = props.isAuthenticated ? {bg: \"warning\", expand: \"lg\"} : {bg: \"primary\", variant: \"dark\", expand: \"lg\"};\r\n\r\n    const loginButton =\r\n        <Nav.Link\r\n            className={linkStyle}\r\n            onClick={props.isAuthenticated ? props.logoutHandler : props.showLoginModal}>\r\n            {props.isAuthenticated ? \"Logg Ut\" : \"Admin\"}\r\n        </Nav.Link>;\r\n\r\n    return (\r\n        <Navbar {...navbarProps}>\r\n            <Navbar.Brand className={styles.invisibleOnMobile}>\r\n                <img\r\n                    className={styles.brandImage}\r\n                    alt=\"OsloMet Logo\"\r\n                    src={require(props.isAuthenticated ? \"../../../assets/images/oslometsvart.png\" : \"../../../assets/images/oslomethvit.png\")}\r\n                />\r\n            </Navbar.Brand>\r\n            <Navbar.Brand\r\n                className={props.isAuthenticated ? styles.authenticatedBrandText : styles.brandText}>Orakel</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav>\r\n                    <Nav.Link className={linkStyle} onClick={showDiscordMessage}>Discord</Nav.Link>\r\n                    <Nav.Link className={linkStyle} onClick={showErrorReportingMessage}>Feilrapportering</Nav.Link>\r\n                    <Nav.Link className={linkStyle} onClick={showAboutMessage}>Om</Nav.Link>\r\n                    {loginButton}\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isAuthenticated: state.auth.token !== null\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        showLoginModal: () => dispatch(actions.toggleLoginModal(false)),\r\n        logoutHandler: () => dispatch(actions.logout())\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(navbar);","import {updateObject} from \"./objectUtilities\";\r\n\r\nexport const inputChangedHandler = (event, inputIdentifier, form) => {\r\n    const updatedFormElement = updateObject(form[inputIdentifier], {\r\n        value: event.target.value,\r\n        valid: checkFormElementValidity(event.target.value, form[inputIdentifier].validation),\r\n        touched: true\r\n    });\r\n\r\n    const updatedForm = updateObject(form, {\r\n        [inputIdentifier]: updatedFormElement\r\n    });\r\n\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in updatedForm) {\r\n        formIsValid = updatedForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n\r\n    return {form: updatedForm, formIsValid: formIsValid}\r\n};\r\n\r\nconst checkFormElementValidity = (value, rules) => {\r\n    let isValid = true;\r\n    if (!rules) {\r\n        return true;\r\n    }\r\n\r\n    if (rules.required) {\r\n        isValid = value.trim() !== '' && isValid;\r\n    }\r\n\r\n    if (rules.minLength) {\r\n        isValid = value.length >= rules.minLength && isValid\r\n    }\r\n\r\n    if (rules.maxLength) {\r\n        isValid = value.length <= rules.maxLength && isValid\r\n    }\r\n\r\n    return isValid;\r\n};\r\n\r\nexport const clearFormInputs = (form) => {\r\n    const clearedForm = {...form};\r\n\r\n    for (let formElementIdentifier in clearedForm) {\r\n        if (Object.prototype.hasOwnProperty.call(clearedForm, formElementIdentifier)) {\r\n            if (clearedForm[formElementIdentifier].inputType === \"input\") {\r\n                clearedForm[formElementIdentifier].value = \"\"\r\n            }\r\n        }\r\n    }\r\n    return clearedForm;\r\n}","import React from \"react\";\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n\r\n    switch (props.inputType) {\r\n        case(\"input\"):\r\n            inputElement = <input\r\n                className=\"form-control ml-2 mr-2 mt-2\"\r\n                value={props.value}\r\n                onChange={props.changed}\r\n                {...props.inputConfig}/>;\r\n            break;\r\n\r\n        case(\"select\"):\r\n            inputElement = <select\r\n                className=\"form-control ml-2 mr-2 mt-2\"\r\n                value={props.value}\r\n                onChange={props.changed}>\r\n                {props.inputConfig.options.map(option => (\r\n                    <option key={option.value} value={option.value}>\r\n                        {option.displayValue}\r\n                    </option>\r\n                ))}\r\n            </select>;\r\n            break;\r\n\r\n        default:\r\n            inputElement = <input\r\n                className=\"form-control\"/>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {inputElement}\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default input;","import React from \"react\";\r\n\r\nconst loadingSpinner = () => (\r\n    <div className=\"spinner-border text-primary\"></div>\r\n);\r\n\r\nexport default loadingSpinner;","import React from 'react';\r\n\r\nexport const SubmitButton = (props) => (\r\n    <button\r\n        type=\"Submit\"\r\n        disabled={props.disabled}\r\n        className={`btn btn-primary ${props.className}`}\r\n        onClick={props.onClick}>{props.children}</button>\r\n);\r\n\r\nexport const CancelButton = (props) => (\r\n    <button\r\n        disabled={props.disabled}\r\n        className={`btn btn-danger ${props.className}`}\r\n        onClick={props.onClick}>{props.children}</button>\r\n);\r\n\r\nexport const ConfirmButton = (props) => (\r\n    <button\r\n        disabled={props.disabled}\r\n        className={`btn btn-success ${props.className}`}\r\n        onClick={props.onClick}>{props.children}</button>\r\n);\r\n\r\nexport const DeleteButton = (props) => (\r\n    <button\r\n        disabled={props.disabled}\r\n        className={`btn btn-danger ${props.className}`}\r\n        onClick={props.onClick}>{props.children}</button>\r\n);","import React from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nimport {SubmitButton, CancelButton} from \"../../Buttons/Buttons\";\r\n\r\n//TODO This will soon be deprecated in favour of SweetAlert Modals, don't bother refacturing.\r\nconst FormModal = (props) => {\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Innlogging\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className=\"show-grid\">\r\n                <Container>\r\n                    {props.form}\r\n                    <p className=\"mt-4\"><strong>Denne innloggingssiden er kun ment for Orakler på jobb. Er du student og\r\n                        skal stelle deg i kø trenger du IKKE å logge inn her :)</strong></p>\r\n                </Container>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <CancelButton onClick={props.onHide}>Lukk</CancelButton>\r\n                <SubmitButton disabled={!props.formIsValid} onClick={props.loginHandler}>Logg Inn</SubmitButton>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default FormModal;","import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport * as actions from \"../../store/actions/actionIndex\";\r\nimport globalStyles from \"../../assets/globalStyles/globalStyles.module.css\";\r\nimport {clearFormInputs, inputChangedHandler} from \"../../utilities/formUtilities\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport LoadingSpinner from \"../../components/UI/LoadingSpinner/LoadingSpinner\";\r\nimport FormModal from \"../../components/UI/Modals/FormModal/FormModal\";\r\n\r\nclass Login extends Component {\r\n    state = {\r\n        form: {\r\n            username: {\r\n                inputType: \"input\",\r\n                inputConfig: {\r\n                    type: \"text\",\r\n                    placeholder: \"Brukernavn\"\r\n                },\r\n                value: \"\",\r\n                label: \"Brukernavn\",\r\n                validation: {\r\n                    required: true,\r\n                    maxLength: 30\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                inputType: \"input\",\r\n                inputConfig: {\r\n                    type: \"password\",\r\n                    placeholder: \"Passord\"\r\n                },\r\n                value: \"\",\r\n                label: \"Passord\",\r\n                validation: {\r\n                    required: true,\r\n                    maxLength: 150\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        formIsValid: false,\r\n    };\r\n\r\n    submitHandler = () => {\r\n        this.props.onLoginSubmit(this.state.form.username.value, this.state.form.password.value);\r\n        const clearedForm = clearFormInputs(this.state.form);\r\n        this.setState({form: clearedForm});\r\n    };\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        this.setState(inputChangedHandler(event, inputIdentifier, this.state.form));\r\n    };\r\n\r\n    render() {\r\n        const formElements = [];\r\n        for (let key in this.state.form) {\r\n            formElements.push({\r\n                id: key,\r\n                config: this.state.form[key]\r\n            });\r\n        }\r\n\r\n        let form = this.props.loading ? <LoadingSpinner/> :\r\n            <form className=\"form-inline\">\r\n                {formElements.map(formElement => (\r\n                    <Input\r\n                        key={formElement.id}\r\n                        inputType={formElement.config.inputType}\r\n                        inputConfig={formElement.config.inputConfig}\r\n                        value={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        label={formElement.config.label}\r\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                    />\r\n                ))}\r\n                {this.props.error ? <p className={`mt-4 ${globalStyles.errorMessage}`}>{this.props.error}</p> : null}\r\n            </form>;\r\n\r\n        return (\r\n            <FormModal\r\n                form={form}\r\n                formIsValid={this.state.formIsValid}\r\n                loginHandler={this.submitHandler}\r\n                show={this.props.showModal}\r\n                onHide={this.props.hideLoginModal}/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        showModal: state.auth.showModal\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onLoginSubmit: (username, password) => dispatch(actions.auth(username, password)),\r\n        hideLoginModal: () => dispatch(actions.toggleLoginModal(true))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import React, {Component} from 'react';\r\nimport Navbar from \"../../components/Navigation/Navbar/Navbar\";\r\nimport Login from \"../../containers/Login/Login\";\r\n\r\nclass Layout extends Component {\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                <Navbar/>\r\n                <main className=\"mb-5\">\r\n                    <Login/>\r\n                    {this.props.children}\r\n                </main>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Layout;","import React from \"react\";\r\n\r\nconst tableHead = (props) => {\r\n\r\n    /* ----- Create Tables Head ----- */\r\n\r\n    let columns = [];\r\n    props.defaultColumns.forEach(column => {\r\n        columns.push(<th key={`${column} Header`} scope=\"col\">{column}</th>);\r\n    });\r\n\r\n    if (props.isAuthenticated) {\r\n        props.loggedInColumns.forEach(column => {\r\n            columns.push(<th key={`${column} Header`} scope=\"col\">{column}</th>);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <thead key={\"tableHead\"} className=\"thead-dark\">\r\n        <tr>\r\n            {columns}\r\n        </tr>\r\n        </thead>\r\n    );\r\n};\r\n\r\nexport default tableHead;","import React from \"react\";\r\nimport {Table} from \"react-bootstrap\";\r\nimport TableHead from \"./TableHead/TableHead\";\r\nimport {ConfirmButton, DeleteButton} from \"../Buttons/Buttons\";\r\n\r\nimport * as actions from \"../../../store/actions/actionIndex\";\r\n\r\nconst queueTable = (props) => {\r\n\r\n    /* ----- Create Table Body ----- */\r\n\r\n    let rows = [];\r\n    for (let i = 0; i < props.queueData.length; i++) {\r\n        let rowId = \"row\" + i;\r\n\r\n        let cells = [];\r\n        cells.push(<td key={\"entry\" + i} id={\"entry\" + i}># {i + 1}</td>);\r\n        cells.push(<td key={\"name\" + i} id={\"name\" + i}>{props.queueData[i].name}</td>);\r\n        cells.push(<td key={\"subject\" + i} id={\"subject\" + i}>{props.queueData[i].subject}</td>);\r\n        cells.push(<td key={\"discord\" + i} id={\"discord\" + i}>{props.queueData[i].digitalConsultation === false ? \"Datatorget\" : \"Discord\"}</td>);\r\n\r\n        let actionButtons =\r\n            <>\r\n                <ConfirmButton onClick={() => props.confirmDoneEntity(props.queueData[i].id)}>Ferdig</ConfirmButton>\r\n                <DeleteButton className=\"ml-2\" onClick={() => props.deleteQueueEntity(props.queueData[i].id)}>Slett</DeleteButton>\r\n            </>;\r\n\r\n        if (props.isAuthenticated) {\r\n            actionButtons = props.userRoles.includes(\"ROLE_ADMIN\") ? actionButtons : null;\r\n            cells.push(<td key={\"actions\" + i} id={\"action\" + i}>{actionButtons}</td>);\r\n        }\r\n\r\n        rows.push(<tr key={i} id={rowId}>{cells}</tr>);\r\n    }\r\n\r\n    const tableHead = <TableHead defaultColumns={props.defaultColumns} loggedInColumns={props.loggedInColumns} isAuthenticated={props.isAuthenticated}/>;\r\n    const tableBody = <tbody>{rows}</tbody>;\r\n\r\n    return (\r\n        <Table striped bordered hover responsive className=\"mb-4\">{tableHead}{tableBody}</Table>\r\n    );\r\n};\r\n\r\nexport default queueTable;","import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport * as actions from \"../../store/actions/actionIndex\";\r\nimport Table from \"../../components/UI/Tables/QueueTable\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport {SubmitButton} from \"../../components/UI/Buttons/Buttons\";\r\nimport {inputChangedHandler, clearFormInputs} from \"../../utilities/formUtilities\";\r\nimport {withPolling} from \"../../higherOrderedComponents/withPolling/withPolling\";\r\n\r\nexport class Queue extends Component {\r\n\r\n    state = {\r\n        form: {\r\n            name: {\r\n                inputType: \"input\",\r\n                inputConfig: {\r\n                    type: \"text\",\r\n                    placeholder: \"Fornavn\"\r\n                },\r\n                value: \"\",\r\n                label: \"Navn\",\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 3,\r\n                    maxLength: 30\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n\r\n            subject: {\r\n                inputType: \"select\",\r\n                inputConfig: {\r\n                    options: []\r\n                },\r\n                value: \"Programmering\",\r\n                label: \"Velg Emne\",\r\n                validation: {},\r\n                valid: true\r\n            },\r\n\r\n            year: {\r\n                inputType: \"select\",\r\n                inputConfig: {\r\n                    options: [\r\n                        {value: 1, displayValue: \"1. år\"},\r\n                        {value: 2, displayValue: \"2. år\"},\r\n                        {value: 3, displayValue: \"3. år\"}\r\n                    ]\r\n                },\r\n                value: 1,\r\n                label: \"Årstrinn\",\r\n                validation: {},\r\n                valid: true\r\n            },\r\n\r\n            //Indicates if the student wants digital consultation or not. In the database 1 is true and 0 is false.\r\n            discord: {\r\n                inputType: \"select\",\r\n                inputConfig: {\r\n                    options: [\r\n                        {value: false, displayValue: \"Fysisk Veiledning (Datatorget)\"},\r\n                        {value: true, displayValue: \"Digital Veiledning (Discord)\"},\r\n                    ]\r\n                },\r\n                value: 0,\r\n                label: \"Veiledningsform\",\r\n                validation: {},\r\n                valid: true\r\n            },\r\n        },\r\n        formIsValid: false\r\n    };\r\n\r\n    componentDidMount() {\r\n        //TODO This is NOT a good way to make sure data is being filled into the selector. Look into Redux-forms.\r\n        setTimeout(() => {\r\n            this.fillSubjectSelector();\r\n        }, 1000);\r\n    }\r\n\r\n    fillSubjectSelector = () => {\r\n        const subjectListUpdated = {...this.state.form};\r\n\r\n        this.props.subjects.forEach(subject => {\r\n            subjectListUpdated.subject.inputConfig.options.push({value: subject, displayValue: subject})\r\n        });\r\n\r\n        this.setState({form: subjectListUpdated});\r\n    };\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        this.setState(inputChangedHandler(event, inputIdentifier, this.state.form));\r\n    };\r\n\r\n    registrationHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const formData = {};\r\n        for(let formElementIdentifier in this.state.form) {\r\n            formData[formElementIdentifier] = this.state.form[formElementIdentifier].value;\r\n        }\r\n\r\n        this.postNewQueueEntry(formData);\r\n        const clearedForm = clearFormInputs(this.state.form);\r\n        this.setState({form: clearedForm, formIsValid: false});\r\n    };\r\n\r\n    postNewQueueEntry = (formData) => {\r\n        const queueEntity = {\r\n            name: formData.name,\r\n            subject: formData.subject,\r\n            digitalConsultation: formData.discord,\r\n            studyYear: formData.year\r\n        };\r\n\r\n        this.props.addQueueEntity(queueEntity);\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n        /* ----- Create Table ----- */\r\n        const defaultColumns = [\"Plassering\", \"Navn\", \"Emne\", \"Arena\"];\r\n        const adminColumns = [\"Handlinger\"];\r\n\r\n        const table = <Table\r\n            defaultColumns={defaultColumns}\r\n            loggedInColumns={adminColumns}\r\n            queueData={this.props.queueData}\r\n            isAuthenticated={this.props.isAuthenticated}\r\n            userRoles={this.props.userRoles}\r\n            confirmDoneEntity={this.props.confirmDoneEntity}\r\n            deleteQueueEntity={this.props.deleteQueueEntity}\r\n\r\n        />;\r\n\r\n        /* ----- Create Form ----- */\r\n\r\n        const formElements = [];\r\n        for (let key in this.state.form) {\r\n            formElements.push({\r\n                id: key,\r\n                config: this.state.form[key]\r\n            });\r\n        }\r\n\r\n        const form = <form onSubmit={this.registrationHandler} className=\"form-inline mt-3\">\r\n            {formElements.map(formElement => (\r\n                <Input\r\n                    key={formElement.id}\r\n                    inputType={formElement.config.inputType}\r\n                    inputConfig={formElement.config.inputConfig}\r\n                    value={formElement.config.value}\r\n                    invalid={!formElement.config.valid}\r\n                    shouldValidate={formElement.config.validation}\r\n                    touched={formElement.config.touched}\r\n                    label={formElement.config.label}\r\n                    changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                    />\r\n            ))}\r\n            <SubmitButton className={\"ml-2 mr-2 mt-2\"} disabled={!this.state.formIsValid}>Registrer</SubmitButton>\r\n        </form>;\r\n\r\n        return (\r\n            <>\r\n                {table}\r\n                <h1 className={\"text-left ml-2 mr-2 mt-5\"}>Køregistrering: </h1>\r\n                {form}\r\n            </>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isAuthenticated: state.auth.token != null,\r\n        userRoles: state.auth.userRoles,\r\n        queueData: state.queue.queueData,\r\n        subjects: state.queue.subjectData,\r\n        loading: state.queue.loading,\r\n        error: state.queue.error\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addQueueEntity: (queueEntity) => dispatch(actions.addToQueue(queueEntity)),\r\n        deleteQueueEntity: (id) => dispatch(actions.deleteFromQueue(id)),\r\n        confirmDoneEntity: (id) => dispatch(actions.doneInQueue(id))\r\n    }\r\n};\r\n\r\nexport default withPolling(actions.fetchQueue())(connect(mapStateToProps, mapDispatchToProps)(Queue));","import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport const withPolling = (pollingAction, duration = 30000) => Component => {\r\n\r\n    const Wrapper = () => (\r\n        class extends React.Component {\r\n\r\n            componentDidMount() {\r\n                this.props.pollingAction();\r\n                this.dataPolling = setInterval(() => {\r\n                    this.props.pollingAction();\r\n                }, duration);\r\n            }\r\n\r\n            componentWillUnmount() {\r\n                clearInterval(this.dataPolling);\r\n            }\r\n\r\n            render() {\r\n                return <Component {...this.props}/>;\r\n            }\r\n        });\r\n\r\n    const mapDispatchToProps = dispatch => {\r\n        return {\r\n            pollingAction: () => dispatch(pollingAction),\r\n        }\r\n    };\r\n\r\n    return connect(null, mapDispatchToProps)(Wrapper())\r\n};","import React, {Component} from 'react';\r\nimport {Route, Switch, withRouter, Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './App.css';\r\nimport * as actions from \"./store/actions/actionIndex\";\r\nimport Layout from \"./higherOrderedComponents/Layout/Layout\";\r\nimport Queue from \"./containers/Queue/Queue\";\r\nimport {INDEX_ROUTE} from \"./constants/constants\";\r\n\r\nclass App extends Component {\r\n\r\n     componentDidMount() {\r\n        this.props.autoSignIn();\r\n        this.props.getSubjectData();\r\n    }\r\n\r\n    render() {\r\n        \r\n        let routes = (\r\n            <Switch>\r\n                <Route path={INDEX_ROUTE} exact render={() => (<Queue/>)}/>\r\n                <Redirect to={INDEX_ROUTE}/>\r\n            </Switch>\r\n        );\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <Layout>\r\n                    {routes}\r\n                </Layout>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        autoSignIn: () => dispatch(actions.checkValidAuth()),\r\n        getSubjectData: () => dispatch(actions.fetchSubjects())\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(null, mapDispatchToProps)(App));\r\n\r\n\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\nimport {updateObject} from \"../../utilities/objectUtilities\";\r\n\r\nconst initialState = {\r\n    token: null,\r\n    userId: null,\r\n    userRoles: null,\r\n    error: null,\r\n    loading: false,\r\n    showModal: false\r\n};\r\n\r\nconst authStart = (state, action) => {\r\n    return updateObject(state, {error: null, loading: true});\r\n};\r\n\r\nconst authSuccess = (state, action) => {\r\n    return updateObject(state, {\r\n        token: action.token,\r\n        userId: action.userId,\r\n        userRoles: action.userRoles,\r\n        error: null,\r\n        loading: false,\r\n        showModal: false\r\n    });\r\n};\r\n\r\nconst authFail = (state, action) => {\r\n    return updateObject(state, {\r\n        error: action.error,\r\n        loading: false,\r\n        showModal: true\r\n    });\r\n};\r\n\r\nconst authLogout = (state, action) => {\r\n    return updateObject(state, {token: null, userId: null, userRoles: null});\r\n};\r\n\r\nconst toggleLoginModal = (state, action) => {\r\n    return updateObject(state, {showModal: !action.visible})\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case actionTypes.AUTH_START: return authStart(state, action);\r\n        case actionTypes.AUTH_SUCCESS: return authSuccess(state, action);\r\n        case actionTypes.AUTH_FAIL: return authFail(state, action);\r\n        case actionTypes.AUTH_LOGOUT: return authLogout(state, action);\r\n        case actionTypes.TOGGLE_LOGIN_MODAL: return toggleLoginModal(state, action);\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import * as actionTypes from \"../actions/actionTypes\";\r\nimport {updateObject} from \"../../utilities/objectUtilities\";\r\n\r\nconst initialState = {\r\n    queueData: [],\r\n    subjectData: [],\r\n    error: null,\r\n    loading: false\r\n};\r\n\r\n\r\nconst initAction = (state, action) => {\r\n    return updateObject(state, {error: null, loading: true});\r\n};\r\n\r\nconst failedAction = (state, action) => {\r\n    return updateObject(state, {\r\n        error: action.error,\r\n        loading: false\r\n    })\r\n};\r\n\r\n/* ----- Fetch Queue Data ----- */\r\n\r\nconst fetchQueueSuccess = (state, action) => {\r\n    return updateObject(state, {\r\n        queueData: action.queueData,\r\n        error: null,\r\n        loading: false\r\n    });\r\n};\r\n\r\n\r\n/* ----- Add, Delete and Remove in Queue ----- */\r\n\r\nconst addRemoveSuccess = (state, action) => {\r\n    return updateObject(state, {\r\n        error: null,\r\n        loading: false\r\n    })\r\n};\r\n\r\n/* ----- Fetch Subject Data ----- */\r\n\r\nconst fetchSubjectsSuccess = (state, action) => {\r\n    return updateObject(state, {\r\n        subjectData: action.subjectData,\r\n        error: null,\r\n        loading: false\r\n    })\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        //Start cases\r\n        case actionTypes.FETCH_QUEUE_START:\r\n        case actionTypes.ADD_TO_QUEUE_START:\r\n        case actionTypes.DELETE_FROM_QUEUE_START:\r\n        case actionTypes.DONE_IN_QUEUE_START:\r\n        case actionTypes.FETCH_SUBJECTS_START:\r\n            return initAction(state, action);\r\n\r\n        //Fail cases\r\n        case actionTypes.FETCH_QUEUE_FAIL:\r\n        case actionTypes.ADD_TO_QUEUE_FAIL:\r\n        case actionTypes.DELETE_FROM_QUEUE_FAIL:\r\n        case actionTypes.DONE_IN_QUEUE_FAIL:\r\n        case actionTypes.FETCH_SUBJECTS_FAIL:\r\n            return failedAction(state, action);\r\n\r\n        //Success cases\r\n        case actionTypes.FETCH_QUEUE_SUCCESS:\r\n            return fetchQueueSuccess(state, action);\r\n        case actionTypes.ADD_TO_QUEUE_SUCCESS:\r\n        case actionTypes.DELETE_FROM_QUEUE_SUCCESS:\r\n        case actionTypes.DONE_IN_QUEUE_SUCCESS:\r\n            return addRemoveSuccess(state, action);\r\n        case actionTypes.FETCH_SUBJECTS_SUCCESS:\r\n            return fetchSubjectsSuccess(state, action);\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {createStore, combineReducers, applyMiddleware, compose} from \"redux\";\r\nimport {Provider} from \"react-redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport App from './App';\r\nimport authReducer from \"./store/reducers/authReducer\";\r\nimport queueReducer from \"./store/reducers/queueReducer\";\r\nimport {objectConditionalByEnvironment} from \"./utilities/objectUtilities\";\r\nimport './index.css';\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n//Logger for debugging Redux, should not be enabled in production\r\nconst logger = store => {\r\n    return next => {\r\n        return action => {\r\n            console.log(\"[Middleware] Dispatching: \", action);\r\n            const result = next(action);\r\n            console.log(\"[Middleware] next state: \", store.getState());\r\n            return result;\r\n        };\r\n    };\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    queue: queueReducer\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n//Conditionally creates a store with or without a logger, dependent on the environment.\r\nconst store = objectConditionalByEnvironment(createStore(rootReducer, composeEnhancers(applyMiddleware(logger, thunk))), createStore(rootReducer, composeEnhancers(applyMiddleware(thunk))));\r\n\r\nconst app = (\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n    </Provider>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById(\"root\"));\r\nserviceWorker.unregister();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"brandText\":\"Navbard_brandText__2MwPD\",\"brandImage\":\"Navbard_brandImage__3nrgi\",\"defaultLinkText\":\"Navbard_defaultLinkText__1iNn6\",\"authenticatedBrandText\":\"Navbard_authenticatedBrandText__lz557\",\"authenticatedLinkText\":\"Navbard_authenticatedLinkText__14n68\",\"invisibleOnMobile\":\"Navbard_invisibleOnMobile__1ZL5-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMessage\":\"globalStyles_errorMessage__3H29n\"};"],"sourceRoot":""}