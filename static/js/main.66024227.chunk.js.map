{"version":3,"sources":["components/Navigation/Navbar/navbar.module.css","components/Forms/QueueForm/queueForm.module.css","containers/AdminPage/adminPage.module.css","assets/sounds/hellothere.mp3","assets/images/oslometsvart.png","assets/images/oslomethvit.png","serviceWorker.js","store/actions/actionTypes.ts","constants/constants.ts","utilities/objectUtilities.ts","store/reducers/authReducer.ts","store/reducers/queueReducer.ts","store/reducers/subjectReducer.ts","store/index.ts","axiosAPI.ts","components/Forms/QueueForm/queueForm.tsx","store/actions/authActions.ts","httpHeaders/authHeader.ts","store/actions/queueActions.ts","store/actions/subjectActions.ts","components/UI/Buttons/buttons.tsx","utilities/formUtilities.ts","components/Forms/Inputs/input.tsx","components/Forms/Inputs/select.tsx","components/Forms/SubjectForm/subjectForm.tsx","components/Forms/QueueForm/queueFormConnected.ts","components/Tables/TableHead/tableHead.tsx","components/Tables/Queue/QueueTable/queueTable.tsx","components/UI/LoadingSpinner/loadingSpinner.tsx","hooks/useInterval.ts","hooks/usePreviousState.ts","components/Tables/Queue/queue.tsx","utilities/arrayUtilities.ts","components/Tables/Queue/queueConnected.ts","containers/LandingPage/landingPage.tsx","components/UI/Cards/card.tsx","components/Forms/Inputs/radio.tsx","components/UI/Modals/SwalModals/swalConfirmModal.tsx","components/Forms/SubjectForm/subjectFormConnected.ts","components/Forms/QueueExportForm/queueExportForm.tsx","containers/AdminPage/adminPage.tsx","containers/AdminPage/adminPageConnected.ts","app.tsx","components/UI/Modals/SwalModals/swalInfoModal.tsx","components/UI/Modals/SwalModals/swalLoginModal.tsx","components/Navigation/Navbar/navbar.tsx","components/Navigation/Navbar/navbarConnected.ts","higherOrderedComponents/Layout/layout.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","AuthActionTypes","QueueActionTypes","SubjectActionTypes","FormElementType","Semester","updateObject","oldObject","updatedProperties","convertObjectStringsToPrimitives","originalObject","convertedObject","Object","entries","key","value","isNaN","Number","parseFloat","initialState","user","error","loading","authStart","state","action","authSuccess","authFail","authLogout","clearError","reducer","type","AUTH_START","AUTH_SUCCESS","AUTH_FAIL","AUTH_LOGOUT","CLEAR_ERROR","queueData","initAction","failedAction","fetchQueueSuccess","addRemoveSuccess","FETCH_QUEUE_START","ADD_TO_QUEUE_START","DELETE_FROM_QUEUE_START","DONE_IN_QUEUE_START","FETCH_QUEUE_FAIL","ADD_TO_QUEUE_FAIL","DELETE_FROM_QUEUE_FAIL","DONE_IN_QUEUE_FAIL","FETCH_QUEUE_SUCCESS","ADD_TO_QUEUE_SUCCESS","DELETE_FROM_QUEUE_SUCCESS","DONE_IN_QUEUE_SUCCESS","allSubjectData","currentSubjectData","fetchSubjectsSuccess","FETCH_SUBJECTS_START","ADD_SUBJECT_START","DELETE_SUBJECT_START","FETCH_SUBJECTS_FAIL","ADD_SUBJECT_FAIL","DELETE_SUBJECT_FAIL","FETCH_SUBJECTS_SUCCESS","ADD_SUBJECT_SUCCESS","DELETE_SUBJECT_SUCCESS","rootReducer","combineReducers","auth","authReducer","queue","queueReducer","subjects","subjectReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","API_BASE_PATH","INDEX_ROUTE","FormElements","REST_INSTANCE","axios","create","baseURL","FILE_INSTANCE","responseType","logout","localStorage","removeItem","checkValidAuth","dispatch","getItem","JSON","parse","token","post","AUTH_PATH","then","response","data","username","password","setItem","stringify","catch","message","authHeader","USER","Authorization","fetchQueue","get","fetchQueueFail","addToQueue","queueEntity","addToQueueFail","deleteFromQueue","id","delete","headers","deleteFromQueueFail","doneInQueue","QUEUE_PATH","doneInQueueFail","fetchSubjectsStart","fetchAllSubjectsSuccess","subjectData","fetchCurrentSubjectsSuccess","fetchSubjectsFail","fetchSubjects","allSubjects","path","SUBJECTS_PATH","addEditSubjectStart","addEditSubjectSuccess","addEditSubjectFail","addEditSubject","subject","edit","put","deleteSubject","deleteSubjectFail","SubmitButton","props","disabled","className","onClick","children","ConfirmButton","DeleteButton","createUseFormRef","inputConfig","register","TEXT","required","validation","errorMessage","minLength","inputHasError","errors","errorInInput","name","Input","forwardRef","ref","classnames","onChange","event","Select","options","map","option","String","displayValue","QueueForm","addQueueEntity","useForm","handleSubmit","reset","isSubmitSuccessful","formState","useState","FIRSTNAME","placeholder","nameInput","SELECT","SUBJECT","subjectSelect","setSubjectSelect","YEAR","yearSelect","DIGITAL","digitalConsultationSelect","useEffect","length","fillSubjectSelector","subjectListUpdated","forEach","push","form","onSubmit","formData","primitiveFormData","firstname","digitalConsultation","studyYear","year","confirmedDone","timeConfirmedDone","styles","queueForm","connect","bindActionCreators","tableHead","columns","defaultColumns","column","scope","isAuthenticated","loggedInColumns","queueTable","confirmDoneEntity","deleteQueueEntity","userRoles","rows","i","rowId","cells","includes","tableBody","Table","striped","bordered","hover","responsive","loadingSpinner","useInterval","callback","delay","savedCallback","useRef","current","setInterval","clearInterval","usePreviousState","notificationSound","require","Queue","pollingFunction","useSound","play","previousQueue","a","b","allObjectsEqual","jsonArrayEqual","table","undefined","roles","LandingPage","Card","styleClasses","width","widthPercent","shadow","style","header","Radio","handleOnchange","radioDivs","buttons","button","label","defaultChecked","SwalConfirmModal","title","contentText","mySwal","withReactContent","Swal","fire","html","icon","showDenyButton","confirmButtonText","denyButtonText","result","isConfirmed","isDenied","SubjectForm","NEW_SUBJECT_NAME","SELECTED_SUBJECT","CHECKED_SEMESTER","editState","setEditState","setNameInput","RADIO","SPRING","AUTUMN","checkedSemester","setCheckedSemester","resetForm","nameInputCleared","defaultValue","registrationHandler","selectedSubject","newSubjectName","semester","deleteHandler","margin","nameInputFilled","semesterCheckedUpdated","currentTarget","subjectSelectHandler","QueueExportForm","RESOURCES_BASE_PATH","filename","filetype","responseData","url","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","FILE_DOWNLOAD_CONFIG","AdminPage","adminPage","color","withRouter","autoLogin","getSubjectData","routes","exact","render","to","textAlign","SwalInfoModal","hyperlinkText","hyperlinkDiv","innerHTML","footer","SwalLoginModal","onLoginSubmit","clearLoginError","showLoaderOnConfirm","showCancelButton","cancelButtonColor","cancelButtonText","allowOutsideClick","isLoading","preConfirm","usernameInput","getPopup","querySelector","passwordInput","trim","showValidationMessage","isDismissed","Navbar","linkStyle","authenticatedLinkText","defaultLinkText","navbarProps","expand","bg","variant","loginButton","Nav","Link","logoutHandler","Brand","invisibleOnMobile","brandImage","alt","src","authenticatedBrandText","brandText","Toggle","aria-controls","Collapse","Layout","store","createStore","applyMiddleware","thunk","app","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.66024227.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"brandText\":\"navbar_brandText__3JYZf\",\"brandImage\":\"navbar_brandImage__1cdba\",\"defaultLinkText\":\"navbar_defaultLinkText__Duc5y\",\"authenticatedBrandText\":\"navbar_authenticatedBrandText__3JKet\",\"authenticatedLinkText\":\"navbar_authenticatedLinkText__3kvOi\",\"invisibleOnMobile\":\"navbar_invisibleOnMobile__H03rF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"queueForm\":\"queueForm_queueForm__280wg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"adminPage\":\"adminPage_adminPage__1C4rP\"};","module.exports = __webpack_public_path__ + \"static/media/hellothere.be0ec76a.mp3\";","module.exports = __webpack_public_path__ + \"static/media/oslometsvart.3b9b0cc3.png\";","module.exports = __webpack_public_path__ + \"static/media/oslomethvit.2c306d99.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum AuthActionTypes {\n    AUTH_START = \"AUTH_START\",\n    AUTH_SUCCESS = \"AUTH_SUCCESS\",\n    AUTH_FAIL = \"AUTH_FAIL\",\n    AUTH_LOGOUT = \"AUTH_LOGOUT\",\n\n    CLEAR_ERROR = \"CLEAR_ERROR\",\n}\n\nexport enum QueueActionTypes {\n    FETCH_QUEUE_START = \"FETCH_QUEUE_START\",\n    FETCH_QUEUE_SUCCESS = \"FETCH_QUEUE_SUCCESS\",\n    FETCH_QUEUE_FAIL = \"FETCH_QUEUE_FAIL\",\n\n    ADD_TO_QUEUE_START = \"ADD_TO_QUEUE_START\",\n    ADD_TO_QUEUE_SUCCESS = \"ADD_TO_QUEUE_SUCCESS\",\n    ADD_TO_QUEUE_FAIL = \"ADD_TO_QUEUE_FAIL\",\n\n    DELETE_FROM_QUEUE_START = \"DELETE_FROM_QUEUE_START\",\n    DELETE_FROM_QUEUE_SUCCESS = \"DELETE_FROM_QUEUE_SUCCESS\",\n    DELETE_FROM_QUEUE_FAIL = \"DELETE_FROM_QUEUE_FAIL\",\n\n    DONE_IN_QUEUE_START = \"DONE_IN_QUEUE_START\",\n    DONE_IN_QUEUE_SUCCESS = \"DONE_IN_QUEUE_SUCCESS\",\n    DONE_IN_QUEUE_FAIL = \"DONE_IN_QUEUE_FAIL\",\n}\n\nexport enum SubjectActionTypes {\n    FETCH_SUBJECTS_START = \"FETCH_SUBJECTS_START\",\n    FETCH_SUBJECTS_SUCCESS = \"FETCH_SUBJECTS_SUCCESS\",\n    FETCH_SUBJECTS_FAIL = \"FETCH_SUBJECTS_FAIL\",\n\n    ADD_SUBJECT_START = \"ADD_SUBJECT_START\",\n    ADD_SUBJECT_SUCCESS = \"ADD_SUBJECT_SUCCESS\",\n    ADD_SUBJECT_FAIL = \"ADD_SUBJECT_FAIL\",\n\n    EDIT_SUBJECT_START = \"EDIT_SUBJECT_START\",\n    EDIT_SUBJECT_SUCCESS = \"EDIT_SUBJECT_SUCCESS\",\n    EDIT_SUBJECT_FAIL = \"EDIT_SUBJECT_FAIL\",\n\n    DELETE_SUBJECT_START = \"DELETE_SUBJECT_START\",\n    DELETE_SUBJECT_SUCCESS = \"DELETE_SUBJECT_SUCCESS\",\n    DELETE_SUBJECT_FAIL = \"DELETE_SUBJECT_FAIL\",\n}","\n/* ----- Authentication ------ */\nexport const LOCAL_STORAGE_USER = \"user\";\n\n/* ----- API ------ */\nexport const API_BASE_PATH = \"https://orakelqueueservice.herokuapp.com/api/\" //\"/api/\"\n\n//LandingPage\nexport const QUEUE_PATH = \"queue/\";\nexport const CONFIRM_DONE_PATH = QUEUE_PATH + \"confirmdone/\";\n\n//Subjects\nexport const SUBJECTS_PATH = \"subjects/\";\nexport const CURRENT_SUBJECTS_PATH = SUBJECTS_PATH + \"current/\";\nexport const EDIT_SUBJECT_PATH = SUBJECTS_PATH + \"edit/\"\nexport const DELETE_SUBJECT_PATH = SUBJECTS_PATH + \"delete/\";\n\n//Auth\nexport const AUTH_PATH = \"auth/\";\nexport const LOGIN_PATH = AUTH_PATH + \"signin\";\nexport const CHECK_TOKEN_PATH = AUTH_PATH + \"isTokenValid\";\n\n//Resources\nexport const RESOURCES_BASE_PATH = \"resources/\";\nexport const USER_GUIDE_PATH = API_BASE_PATH + RESOURCES_BASE_PATH + \"userguide/\"; //Axios-instance is configured to add API_BASE_PATH, but retrieval of the userguide is done without axios.\nexport const QUEUE_EXPORT_PATH = RESOURCES_BASE_PATH + \"queuedata/\"\n\n/* ----- Routing ----- */\nexport const INDEX_ROUTE = \"/Orakel_Queue_Client/\";\nexport const ADMIN_ROUTE = INDEX_ROUTE + \"Admin\";\n\n/* ----- Form Elements ----- */\nexport enum FormElementType {\n    SELECT = \"select\",\n    TEXT = \"text\",\n    RADIO = \"radio\",\n}\n\n/* ----- Semesters ----- */\nexport enum Semester {\n    SPRING = \"Spring\",\n    AUTUMN = \"Autumn\",\n}\n\n\n//TODO Add all hardcoded string values to this file\n","export const updateObject = (oldObject: any, updatedProperties: any) => {\n    return {\n        ...oldObject,\n        ...updatedProperties\n    };\n};\n\n/**\n * Converts all string-values in a object which can be converted to boolean or number types to their respective primitive\n * datatype.\n *\n * At the time of writing, use cases for this function is when posting an object to the API, which expects primitives\n * rather than string values.\n *\n * @param originalObject The object which should have its string values converted to primitives.\n * @return A clone of the original object with its string values converted to primitives.\n */\nexport const convertObjectStringsToPrimitives = (originalObject: any) => {\n    const convertedObject = {...originalObject}\n\n    for (let [key, value] of Object.entries(convertedObject)) {\n        if (typeof value == \"string\") {\n\n            if (value === \"true\" || value === \"false\") {\n                convertedObject[key] = (value == \"true\");\n            }\n\n            if (!isNaN(Number(value))) {\n                convertedObject[key] = parseFloat(value);\n            }\n        }\n    }\n\n    return convertedObject;\n}\n\nexport const objectConditionalByEnvironment = (devObject: any, productionObject: any) => {\n    return process.env.NODE_ENV === \"production\" ? productionObject : devObject;\n};","import {AuthActionTypes} from \"../actions/actionTypes\";\nimport {updateObject} from \"../../utilities/objectUtilities\";\nimport {AuthAction, AuthState} from \"../types\";\n\nconst initialState: AuthState = {\n    user: null,\n    error: null,\n    loading: false\n};\n\nconst authStart = (state: AuthState, action: AuthAction): AuthState => {\n    return updateObject(state, {error: null, loading: true});\n};\n\nconst authSuccess = (state: AuthState, action: AuthAction): AuthState => {\n    return updateObject(state, {\n        user: action.user,\n        error: null,\n        loading: false\n    });\n};\n\nconst authFail = (state: AuthState, action: AuthAction): AuthState => {\n    return updateObject(state, {\n        error: action.error,\n        loading: false\n    });\n};\n\nconst authLogout = (state: AuthState, action: AuthAction): AuthState => {\n    return updateObject(state, {user: null});\n};\n\nconst clearError = (state: AuthState, action: AuthAction): AuthState => {\n    return updateObject(state, {error: null})\n}\n\nconst reducer = (state: AuthState = initialState, action: AuthAction) => {\n    switch(action.type) {\n        case AuthActionTypes.AUTH_START: return authStart(state, action);\n        case AuthActionTypes.AUTH_SUCCESS: return authSuccess(state, action);\n        case AuthActionTypes.AUTH_FAIL: return authFail(state, action);\n        case AuthActionTypes.AUTH_LOGOUT: return authLogout(state, action);\n        case AuthActionTypes.CLEAR_ERROR: return clearError(state, action);\n        default: return state;\n    }\n};\n\nexport default reducer;","import {QueueActionTypes} from \"../actions/actionTypes\";\nimport {updateObject} from \"../../utilities/objectUtilities\";\nimport {QueueAction, QueueState} from \"../types\";\n\nconst initialState: QueueState = {\n    queueData: [],\n    error: null,\n    loading: false\n};\n\nconst initAction = (state: QueueState, action: QueueAction): QueueState => {\n    return updateObject(state, {error: null, loading: true});\n};\n\nconst failedAction = (state: QueueState, action: QueueAction): QueueState => {\n    return updateObject(state, {\n        error: action.error,\n        loading: false\n    })\n};\n\n/* ----- Fetch LandingPage Data ----- */\n\nconst fetchQueueSuccess = (state: QueueState, action: QueueAction): QueueState => {\n    return updateObject(state, {\n        queueData: action.queueData,\n        error: null,\n        loading: false\n    });\n};\n\n\n/* ----- Add, Delete and Remove in LandingPage ----- */\n\nconst addRemoveSuccess = (state: QueueState, action: QueueAction): QueueState => {\n    return updateObject(state, {\n        error: null,\n        loading: false\n    })\n};\n\nconst reducer = (state: QueueState = initialState, action: QueueAction): QueueState => {\n    switch (action.type) {\n\n        //Start cases\n        case QueueActionTypes.FETCH_QUEUE_START:\n        case QueueActionTypes.ADD_TO_QUEUE_START:\n        case QueueActionTypes.DELETE_FROM_QUEUE_START:\n        case QueueActionTypes.DONE_IN_QUEUE_START:\n            return initAction(state, action);\n\n        //Fail cases\n        case QueueActionTypes.FETCH_QUEUE_FAIL:\n        case QueueActionTypes.ADD_TO_QUEUE_FAIL:\n        case QueueActionTypes.DELETE_FROM_QUEUE_FAIL:\n        case QueueActionTypes.DONE_IN_QUEUE_FAIL:\n            return failedAction(state, action);\n\n        //Success cases\n        case QueueActionTypes.FETCH_QUEUE_SUCCESS:\n            return fetchQueueSuccess(state, action);\n\n        case QueueActionTypes.ADD_TO_QUEUE_SUCCESS:\n        case QueueActionTypes.DELETE_FROM_QUEUE_SUCCESS:\n        case QueueActionTypes.DONE_IN_QUEUE_SUCCESS:\n            return addRemoveSuccess(state, action);\n\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import {SubjectActionTypes} from \"../actions/actionTypes\";\nimport {updateObject} from \"../../utilities/objectUtilities\";\nimport {SubjectAction, SubjectState} from \"../types\";\n\nconst initialState: SubjectState = {\n    allSubjectData: [],\n    currentSubjectData: [],\n    error: null,\n    loading: false\n};\n\nconst initAction = (state: SubjectState, action: SubjectAction): SubjectState => {\n    return updateObject(state, {error: null, loading: true});\n};\n\nconst failedAction = (state: SubjectState, action: SubjectAction): SubjectState => {\n    return updateObject(state, {\n        error: action.error,\n        loading: false\n    })\n};\n\n/* ----- Fetch Subject Data ----- */\n\nconst fetchSubjectsSuccess = (state: SubjectState, action: SubjectAction): SubjectState => {\n\n    if (action.allSubjectData) {\n        return updateObject(state, {\n            allSubjectData: action.allSubjectData,\n            error: null,\n            loading: false\n        });\n    }\n\n    return updateObject(state, {\n        currentSubjectData: action.currentSubjectData,\n        error: null,\n        loading: false\n    })\n};\n\n/* ----- Add, Update and Delete subjects ----- */\n\nconst addRemoveSuccess = (state: SubjectState, action: SubjectAction): SubjectState => {\n    return updateObject(state, {\n        error: null,\n        loading: false\n    })\n};\n\n\nconst reducer = (state: SubjectState = initialState, action: SubjectAction): SubjectState => {\n    switch (action.type) {\n\n        //Start cases\n        case SubjectActionTypes.FETCH_SUBJECTS_START:\n        case SubjectActionTypes.ADD_SUBJECT_START:\n        case SubjectActionTypes.DELETE_SUBJECT_START:\n            return initAction(state, action);\n\n        //Fail cases\n        case SubjectActionTypes.FETCH_SUBJECTS_FAIL:\n        case SubjectActionTypes.ADD_SUBJECT_FAIL:\n        case SubjectActionTypes.DELETE_SUBJECT_FAIL:\n            return failedAction(state, action);\n\n        //Success cases\n        case SubjectActionTypes.FETCH_SUBJECTS_SUCCESS:\n            return fetchSubjectsSuccess(state, action);\n\n        case SubjectActionTypes.ADD_SUBJECT_SUCCESS:\n        case SubjectActionTypes.DELETE_SUBJECT_SUCCESS:\n            return addRemoveSuccess(state, action);\n\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import {combineReducers, compose} from \"redux\";\nimport authReducer from \"./reducers/authReducer\";\nimport queueReducer from \"./reducers/queueReducer\";\nimport subjectReducer from \"./reducers/subjectReducer\";\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n}\n\nexport const rootReducer = combineReducers({\n    auth: authReducer,\n    queue: queueReducer,\n    subjects: subjectReducer,\n});\n\nexport const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport type RootState = ReturnType<typeof rootReducer>","import axios from \"axios\";\nimport {API_BASE_PATH} from \"./constants/constants\";\n\nexport const REST_INSTANCE = axios.create({\n    baseURL: API_BASE_PATH\n});\n\nexport const FILE_INSTANCE = axios.create({\n    baseURL: API_BASE_PATH,\n    responseType: \"blob\"\n});\n\nexport const FILE_DOWNLOAD_CONFIG = (filename: String, filetype: String, responseData: Blob) => {\n    const url = window.URL.createObjectURL(new Blob([responseData]));\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.setAttribute(\"download\", `${filename}.${filetype}`);\n    document.body.appendChild(link);\n    link.click();\n}","import React, {FC, useEffect, useState} from \"react\";\nimport {useForm} from \"react-hook-form\";\nimport styles from \"./queueForm.module.css\"\n\nimport {FormElementType} from \"../../../constants/constants\";\nimport {SubmitButton} from \"../../UI/Buttons/buttons\";\nimport {convertObjectStringsToPrimitives} from \"../../../utilities/objectUtilities\";\nimport {ISelectConfig, ITextConfig} from \"../../../models/inputModels\";\nimport {createUseFormRef, inputHasError} from \"../../../utilities/formUtilities\";\nimport Input from \"../Inputs/input\";\nimport Select from \"../Inputs/select\";\nimport {IQueueEntity, ISubject} from \"../../../models/types\";\n\nenum FormElements {\n    FIRSTNAME = \"firstname\",\n    SUBJECT = \"subject\",\n    YEAR = \"year\",\n    DIGITAL = \"digitalConsultation\",\n}\n\ntype FormValues = {\n    firstname: string,\n    subject: string,\n    year: string,\n    digital: string\n}\n\ntype Props = {\n    subjects: Array<ISubject>;\n    loading: boolean;\n    error: string | null;\n    addQueueEntity: (queueEntity: IQueueEntity) => void;\n}\n\nconst QueueForm: FC<Props> = (props) => {\n    const {subjects, addQueueEntity} = props;\n    const {register, handleSubmit, reset, errors, formState: {isSubmitSuccessful}} = useForm();\n\n    const [nameInput] = useState<ITextConfig>({\n        type: FormElementType.TEXT,\n        name: FormElements.FIRSTNAME,\n        placeholder: \"Fornavn + bordnummer\",\n        validation: {\n            minLength: 3,\n            errorMessage: \"Vennligst oppgi et fornavn på minst 3 bokstaver\"\n        }\n    })\n\n    const [subjectSelect, setSubjectSelect] = useState<ISelectConfig>({\n        type: FormElementType.SELECT,\n        name: FormElements.SUBJECT,\n        options: []\n    });\n\n    const [yearSelect] = useState<ISelectConfig>({\n        type: FormElementType.SELECT,\n        name: FormElements.YEAR,\n        options: [\n            {value: 1, displayValue: \"1. år\"},\n            {value: 2, displayValue: \"2. år\"},\n            {value: 3, displayValue: \"3. år\"}\n        ]\n    })\n\n    const [digitalConsultationSelect] = useState<ISelectConfig>({\n        type: FormElementType.SELECT,\n        name: FormElements.DIGITAL,\n        options: [\n            {value: false, displayValue: \"Fysisk Veiledning (Datatorget)\"},\n            {value: true, displayValue: \"Digital Veiledning (Discord)\"}\n        ]\n    })\n\n    //Use effect only to be triggered when the component is first rendered.\n    useEffect(() => {\n        if (subjects.length > 0) {\n            fillSubjectSelector();\n        }\n    }, [subjects])\n\n    //Use effect to run whenever the form is submitted successfully.\n    useEffect(() => {\n        if (isSubmitSuccessful) {\n            reset();\n        }\n    }, [isSubmitSuccessful, reset])\n\n    const fillSubjectSelector = () => {\n        const subjectListUpdated = {...subjectSelect};\n        subjectListUpdated.options = [];\n\n        subjects?.forEach(subject => {\n            subjectListUpdated.options.push({value: subject.name, displayValue: subject.name});\n        });\n\n        setSubjectSelect(subjectListUpdated);\n    };\n\n    const registrationHandler = (formData: FormValues) => {\n        const primitiveFormData = convertObjectStringsToPrimitives(formData);\n\n        const queueEntity: IQueueEntity = {\n            id: 0, //Id is set in the API\n            name: primitiveFormData.firstname,\n            subject: primitiveFormData.subject,\n            digitalConsultation: primitiveFormData.digitalConsultation,\n            studyYear: primitiveFormData.year,\n            confirmedDone: false,\n            timeConfirmedDone: null\n        };\n\n        addQueueEntity(queueEntity);\n    };\n\n    const form =\n        <form onSubmit={handleSubmit(registrationHandler)} className={\"form-inline mt-5 mb-5 \" + styles.queueForm}>\n            <Input inputConfig={nameInput} error={inputHasError(errors, nameInput)} ref={createUseFormRef(nameInput, register)}/>\n            <Select inputConfig={subjectSelect} ref={createUseFormRef(subjectSelect, register)}/>\n            <Select inputConfig={yearSelect} ref={createUseFormRef(yearSelect, register)}/>\n            <Select inputConfig={digitalConsultationSelect} ref={createUseFormRef(yearSelect, register)}/>\n            <SubmitButton className={\"ml-2 mr-2\"}>Registrer</SubmitButton>\n        </form>\n\n    return (\n        <div className={\"bg-white pb-1 pt-1\"}>\n            {form}\n        </div>\n    );\n\n}\n\nexport default QueueForm","import {REST_INSTANCE as axios} from \"../../axiosAPI\";\nimport {AuthActionTypes} from \"./actionTypes\";\nimport {LOGIN_PATH, CHECK_TOKEN_PATH, LOCAL_STORAGE_USER} from \"../../constants/constants\";\nimport {AuthDispatch, IUser} from \"../types\";\n\nconst authStart = () => {\n    return {\n        type: AuthActionTypes.AUTH_START\n    }\n};\n\nconst authSuccess = (user: IUser) => {\n    return {\n        type: AuthActionTypes.AUTH_SUCCESS,\n        user: user\n    }\n};\n\nconst authFail = (error: string) => {\n    return {\n        type: AuthActionTypes.AUTH_FAIL,\n        error: error\n    }\n};\n\nconst getCurrentUser = (): IUser | null => {\n    if (localStorage.getItem(LOCAL_STORAGE_USER)) {\n        return JSON.parse(localStorage.getItem(LOCAL_STORAGE_USER)!);\n    }\n    return null;\n};\n\nexport const logout = () => {\n    localStorage.removeItem(LOCAL_STORAGE_USER);\n\n    return {\n        type: AuthActionTypes.AUTH_LOGOUT\n    }\n};\n\nexport const checkValidAuth = () => {\n    return (dispatch: AuthDispatch) => {\n        const user = getCurrentUser();\n\n        if (user && user.token) {\n            axios.post(CHECK_TOKEN_PATH, user.token).then(response => {\n                if (response.data === true) {\n                    dispatch(authSuccess(user))\n                } else {\n                    dispatch(logout())\n                }\n            });\n        } else {\n            dispatch(logout())\n        }\n    }\n};\n\nexport const auth = (username: string, password: string) => {\n    return (dispatch: AuthDispatch) => {\n        dispatch(authStart());\n\n        return axios.post(LOGIN_PATH, {username, password})\n            .then(response => {\n                if (response.data.token) {\n                    localStorage.setItem(LOCAL_STORAGE_USER, JSON.stringify(response.data));\n                    dispatch(authSuccess(response.data));\n                    return true\n                }\n            })\n            .catch(error => {\n                dispatch(authFail(error.response.data.message))\n                return false;\n            });\n    }\n};\n\nexport const clearError = () => {\n    return {\n        type: AuthActionTypes.CLEAR_ERROR\n    }\n}","import {LOCAL_STORAGE_USER} from \"../constants/constants\";\n\n//TODO Create of find a type for Authorization headers.\nconst authHeader = () => {\n\n    const USER = JSON.parse(localStorage.getItem(LOCAL_STORAGE_USER)!);\n\n    if (USER && USER.token) {\n        return { Authorization: \"Bearer \" + USER.token };\n    } else {\n        return {};\n    }\n}\n\nexport default authHeader;\n","import {REST_INSTANCE as axios} from \"../../axiosAPI\";\nimport {QueueActionTypes} from \"./actionTypes\";\nimport {CONFIRM_DONE_PATH, QUEUE_PATH} from \"../../constants/constants\";\nimport authHeader from \"../../httpHeaders/authHeader\";\nimport {QueueDispatch} from \"../types\";\nimport {IQueueEntity} from \"../../models/types\";\n\n/* ----- Fetch LandingPage Data ----- */\n\nconst fetchQueueStart = () => {\n    return {\n        type: QueueActionTypes.FETCH_QUEUE_START\n    }\n};\n\nconst fetchQueueSuccess = (queueData: Array<IQueueEntity>) => {\n    return {\n        type: QueueActionTypes.FETCH_QUEUE_SUCCESS,\n        queueData: queueData\n    }\n};\n\nconst fetchQueueFail = (error: string) => {\n    return {\n        type: QueueActionTypes.FETCH_QUEUE_FAIL,\n        error: error\n    }\n};\n\nexport const fetchQueue = () => {\n    return (dispatch: QueueDispatch) => {\n        dispatch(fetchQueueStart());\n\n        axios.get(QUEUE_PATH)\n            .then(response => {\n                dispatch(fetchQueueSuccess(response.data))\n            })\n            .catch(error => {\n                dispatch(fetchQueueFail(error.response))\n            })\n    }\n};\n\n/* ----- Add to LandingPage ----- */\n\nconst addToQueueStart = () => {\n    return {\n        type: QueueActionTypes.ADD_TO_QUEUE_START\n    }\n};\n\nconst addToQueueSuccess = () => {\n    return {\n        type: QueueActionTypes.ADD_TO_QUEUE_SUCCESS\n    }\n};\n\nconst addToQueueFail = (error: string) => {\n    return {\n        type: QueueActionTypes.ADD_TO_QUEUE_FAIL,\n        error: error\n    }\n};\n\nexport const addToQueue = (queueEntity: IQueueEntity) => {\n    return (dispatch: QueueDispatch) => {\n        dispatch(addToQueueStart());\n        axios.post(QUEUE_PATH, queueEntity)\n            .then(() => {\n                dispatch(addToQueueSuccess());\n                dispatch(fetchQueue());\n            })\n            .catch(error => {\n                dispatch(addToQueueFail(error.response.data));\n            });\n    }\n};\n\n/* ----- Delete From LandingPage ----- */\n\nconst deleteFromQueueStart = () => {\n    return {\n        type: QueueActionTypes.DELETE_FROM_QUEUE_START\n    }\n};\n\nconst deleteFromQueueSuccess = () => {\n    return {\n        type: QueueActionTypes.DELETE_FROM_QUEUE_SUCCESS\n    }\n};\n\nconst deleteFromQueueFail = (error: string) => {\n    return {\n        type: QueueActionTypes.DELETE_FROM_QUEUE_FAIL,\n        error: error\n    }\n};\n\nexport const deleteFromQueue = (id: number) => {\n    return (dispatch: QueueDispatch) => {\n        dispatch(deleteFromQueueStart());\n\n        axios.delete(QUEUE_PATH + id, {headers: authHeader()})\n            .then(() => {\n                dispatch(deleteFromQueueSuccess());\n                dispatch(fetchQueue());\n            })\n            .catch(error => {\n                dispatch(deleteFromQueueFail(error.response));\n            });\n    }\n};\n\n/* ----- Done in LandingPage ----- */\n\nconst doneInQueueStart = () => {\n    return {\n        type: QueueActionTypes.DONE_IN_QUEUE_START\n    }\n};\n\nconst doneInQueueSuccess = () => {\n    return {\n        type: QueueActionTypes.DONE_IN_QUEUE_SUCCESS\n    }\n};\n\nconst doneInQueueFail = (error: string) => {\n    return {\n        type: QueueActionTypes.DONE_IN_QUEUE_FAIL,\n        error: error\n    }\n};\n\nexport const doneInQueue = (id: number) => {\n    return (dispatch: QueueDispatch) => {\n        dispatch(doneInQueueStart());\n\n        axios.post(CONFIRM_DONE_PATH + id, null, {headers: authHeader()})\n            .then(() => {\n                dispatch(doneInQueueSuccess());\n                dispatch(fetchQueue());\n            })\n            .catch(error => {\n                dispatch(doneInQueueFail(error.response));\n            });\n    }\n};","import {QueueActionTypes, SubjectActionTypes} from \"./actionTypes\";\nimport {SubjectDispatch} from \"../types\";\nimport {REST_INSTANCE as axios} from \"../../axiosAPI\";\nimport {CURRENT_SUBJECTS_PATH, DELETE_SUBJECT_PATH, EDIT_SUBJECT_PATH, SUBJECTS_PATH} from \"../../constants/constants\";\nimport {ISubject} from \"../../models/types\";\nimport authHeader from \"../../httpHeaders/authHeader\";\n\n/* ----- Fetch Subjects ----- */\n\nconst fetchSubjectsStart = () => {\n    return {\n        type: SubjectActionTypes.FETCH_SUBJECTS_START\n    }\n};\n\nconst fetchAllSubjectsSuccess = (subjectData: Array<ISubject>) => {\n    return {\n        type: SubjectActionTypes.FETCH_SUBJECTS_SUCCESS,\n        allSubjectData: subjectData\n    }\n};\n\nconst fetchCurrentSubjectsSuccess = (subjectData: Array<ISubject>) => {\n    return {\n        type: SubjectActionTypes.FETCH_SUBJECTS_SUCCESS,\n        currentSubjectData: subjectData\n    }\n}\n\nconst fetchSubjectsFail = (error: string) => {\n    return {\n        type: SubjectActionTypes.FETCH_SUBJECTS_FAIL,\n        error: error\n    }\n};\n\nexport const fetchSubjects = (allSubjects: boolean = false) => {\n    return (dispatch: SubjectDispatch) => {\n        dispatch(fetchSubjectsStart());\n\n        const path = allSubjects ? SUBJECTS_PATH : CURRENT_SUBJECTS_PATH;\n\n        axios.get(path)\n            .then(response => {\n                allSubjects ? dispatch(fetchAllSubjectsSuccess(response.data)) : dispatch(fetchCurrentSubjectsSuccess(response.data));\n            }).catch(error => {\n            dispatch(fetchSubjectsFail(error.response));\n        });\n    }\n};\n\n/* ----- Add Subject ----- */\n\nconst addEditSubjectStart = () => {\n    return {\n        type: SubjectActionTypes.ADD_SUBJECT_START\n    }\n};\n\nconst addEditSubjectSuccess = () => {\n    return {\n        type: SubjectActionTypes.ADD_SUBJECT_SUCCESS,\n    }\n};\n\nconst addEditSubjectFail = (error: string) => {\n    return {\n        type: SubjectActionTypes.ADD_SUBJECT_FAIL,\n        error: error\n    }\n};\n\nexport const addEditSubject = (subject: ISubject, edit: boolean = false) => {\n    return (dispatch: SubjectDispatch) => {\n        dispatch(addEditSubjectStart());\n\n\n        let apiCall;\n        if (edit) {\n            apiCall = axios.put(EDIT_SUBJECT_PATH + subject.id, subject, {headers: authHeader()});\n        } else {\n            apiCall = axios.post(SUBJECTS_PATH, subject, {headers: authHeader()});\n        }\n\n        apiCall.then(() => {\n            dispatch(addEditSubjectSuccess());\n            dispatch(fetchSubjects(true));\n        })\n            .catch(error => {\n                dispatch(addEditSubjectFail(error.response));\n            })\n    }\n}\n\n/* ----- Delete Subject ----- */\n\nconst deleteSubjectStart = () => {\n    return {\n        type: QueueActionTypes.DELETE_FROM_QUEUE_START\n    }\n};\n\nconst deleteSubjectSuccess = () => {\n    return {\n        type: QueueActionTypes.DELETE_FROM_QUEUE_SUCCESS\n    }\n};\n\nconst deleteSubjectFail = (error: string) => {\n    return {\n        type: QueueActionTypes.DELETE_FROM_QUEUE_FAIL,\n        error: error\n    }\n};\n\nexport const deleteSubject = (id: number) => {\n    return (dispatch: SubjectDispatch) => {\n        dispatch(deleteSubjectStart());\n\n        axios.delete(DELETE_SUBJECT_PATH + id, {headers: authHeader()})\n            .then(() => {\n                dispatch(deleteSubjectSuccess());\n                dispatch(fetchSubjects(true));\n            })\n            .catch(error => {\n                dispatch(deleteSubjectFail(error.response));\n            });\n    }\n};","import React, {MouseEventHandler, FunctionComponent} from 'react';\n\ntype Props = {\n    onClick?: MouseEventHandler,\n    className?: string,\n    disabled?: boolean,\n}\n\nexport const SubmitButton: FunctionComponent<Props> = (props) =>\n    <button\n        type=\"submit\"\n        disabled={props.disabled}\n        className={`btn btn-primary ${props.className}`}\n        onClick={props.onClick}>{props.children}\n    </button>\n\nexport const CancelButton: FunctionComponent<Props> = (props) => (\n    <button\n        disabled={props.disabled}\n        className={`btn btn-danger ${props.className}`}\n        onClick={props.onClick}>{props.children}</button>\n);\n\nexport const ConfirmButton: FunctionComponent<Props> = (props) => (\n    <button\n        disabled={props.disabled}\n        className={`btn btn-success ${props.className}`}\n        onClick={props.onClick}>{props.children}</button>\n);\n\nexport const DeleteButton: FunctionComponent<Props> = (props) => (\n    <button\n        disabled={props.disabled}\n        className={`btn btn-danger ${props.className}`}\n        onClick={props.onClick}>{props.children}</button>\n);","import {InputConfig} from \"../models/inputModels\";\nimport {DeepMap, FieldError} from \"react-hook-form\";\nimport {FormElementType} from \"../constants/constants\";\n\n\n//Add cases to this function if more input types in need of validation are added.\nexport const createUseFormRef = (inputConfig: InputConfig, register: any) => {\n\n    switch (inputConfig.type) {\n        case FormElementType.TEXT:\n            return  register({\n                required: inputConfig.validation.errorMessage,\n                minLength: {\n                    value: inputConfig.validation.minLength,\n                    message: inputConfig.validation.errorMessage\n                }\n            })\n\n        default:\n            return register;\n    }\n}\n\nexport const inputHasError = (errors: DeepMap<Record<string, any>, FieldError>, inputConfig: InputConfig) => {\n    let errorInInput = false;\n    for (const key of Object.entries(errors)) {\n        if (key[0] === inputConfig.name) {\n            errorInInput = true;\n        }\n    }\n\n    return errorInInput;\n}","import React, {forwardRef} from \"react\";\nimport {ITextConfig} from \"../../../models/inputModels\";\n\ntype Props = {\n    inputConfig: ITextConfig;\n    onChange?: (event: React.FormEvent<HTMLInputElement>) => void;\n    error: boolean;\n};\n\nconst Input = forwardRef((props: Props, ref: React.Ref<any>) => {\n    let classnames = \"form-control ml-1 mr-1 mt-3 mb-3 \";\n\n    if (props.error) {\n        classnames += \"is-invalid \";\n    }\n\n    const handleOnchange = (event: any) => {\n        if (props.onChange) {\n            props.onChange(event);\n        }\n    }\n\n    return (\n        <>\n            <input\n                ref={ref} className={classnames} onChange={handleOnchange} key={props.inputConfig.key} {...props.inputConfig}\n            />\n        </>\n    )\n})\n\nexport default Input;","import React, {forwardRef} from \"react\";\nimport {ISelectConfig} from \"../../../models/inputModels\";\n\ntype Props = {\n    inputConfig: ISelectConfig;\n    onChange?: (event: React.FormEvent<HTMLInputElement>) => void;\n    error?: boolean;\n};\n\nconst Select = forwardRef((props: Props, ref: React.Ref<any>) => {\n    let classnames = \"form-control ml-1 mr-1 mt-3 mb-3 \";\n\n    if (props.error) {\n        classnames += \"is-invalid \";\n    }\n\n    const handleOnchange = (event: any) => {\n        if (props.onChange) {\n            props.onChange(event);\n        }\n    }\n\n    return (\n        <>\n            <select ref={ref} className={classnames} onChange={handleOnchange} {...props.inputConfig}>\n                {props.inputConfig.options.map(option => {\n\n                    //Enables use of serialized objects as values\n                    const value = typeof option.value === \"object\" ? JSON.stringify(option.value) : String(option.value);\n\n                    return (\n                        <option key={option.displayValue} value={value}>\n                            {option.displayValue}\n                        </option>\n                    )\n                })}\n            </select>\n        </>\n    )\n})\n\nexport default Select;","import React, {FC, useEffect, useState} from \"react\";\nimport {DeleteButton, SubmitButton} from \"../../UI/Buttons/buttons\";\nimport {useForm} from \"react-hook-form\";\nimport Input from \"../Inputs/input\";\nimport Select from \"../Inputs/select\";\nimport {FormElementType, Semester} from \"../../../constants/constants\";\nimport {convertObjectStringsToPrimitives, updateObject} from \"../../../utilities/objectUtilities\";\nimport {createUseFormRef, inputHasError} from \"../../../utilities/formUtilities\";\nimport {SubjectDispatch} from \"../../../store/types\";\nimport {IRadioConfig, ISelectConfig, ITextConfig} from \"../../../models/inputModels\";\nimport Radio from \"../Inputs/radio\";\nimport {ISubject} from \"../../../models/types\";\nimport SwalConfirmModal from \"../../UI/Modals/SwalModals/swalConfirmModal\";\n\nenum FormElements {\n    SELECTED_SUBJECT = \"selectedSubject\",\n    NEW_SUBJECT_NAME = \"newSubjectName\",\n    CHECKED_SEMESTER = \"checkedSemester\",\n}\n\ntype FormValues = {\n    selectedSubject: string,\n    newSubjectName: string,\n    checkedSemester: string,\n}\n\ntype Props = {\n    subjects: Array<ISubject>;\n    loading: boolean;\n    error: string | null;\n    fetchSubjects: (allSubjects?: boolean) => (dispatch: SubjectDispatch) => void;\n    addEditSubject: (subject: ISubject, edit: boolean) => void;\n    deleteSubject: (id: number) => void;\n}\n\nconst SubjectForm: FC<Props> = (props) => {\n    const {NEW_SUBJECT_NAME, SELECTED_SUBJECT, CHECKED_SEMESTER} = FormElements;\n    const NEW_SUBJECT = \"<New Subject>\";\n\n    const {register, handleSubmit, reset, errors, formState: {isSubmitSuccessful}} = useForm();\n    const [editState, setEditState] = useState<boolean>(false);\n\n    const [subjectSelect, setSubjectSelect] = useState<ISelectConfig>({\n        type: FormElementType.SELECT,\n        name: SELECTED_SUBJECT,\n        options: []\n    });\n\n    const [nameInput, setNameInput] = useState<ITextConfig>({\n        type: FormElementType.TEXT,\n        name: NEW_SUBJECT_NAME,\n        key: NEW_SUBJECT_NAME,\n        placeholder: \"Subject Name\",\n        validation: {\n            minLength: 3,\n            errorMessage: \"Please provide a subject name of with at least 3 characters\"\n        },\n    });\n\n    const [checkedSemester, setCheckedSemester] = useState<IRadioConfig>({\n        type: FormElementType.RADIO,\n        name: CHECKED_SEMESTER,\n        buttons: [\n            {label: Semester.SPRING, value: 0, key: Semester.SPRING, defaultChecked: true},\n            {label: Semester.AUTUMN, value: 1, key: Semester.AUTUMN, defaultChecked: false}\n        ]\n    });\n\n    //Fills the subjectselector in the first render cycle.\n    useEffect(() => {\n        if (props.subjects.length > 0) {\n            fillSubjectSelector();\n        } else {\n            props.fetchSubjects(true);\n        }\n    }, [props.subjects])\n\n    //Used to reset the form whenever is is submitted.\n    useEffect(() => {\n        if (isSubmitSuccessful) {\n            resetForm();\n        }\n    }, [isSubmitSuccessful, reset])\n\n    const fillSubjectSelector = () => {\n        const subjectListUpdated = {...subjectSelect};\n        subjectListUpdated.options = [];\n\n        subjectListUpdated.options.push({value: {name: NEW_SUBJECT}, displayValue: NEW_SUBJECT})\n        props.subjects.forEach(subject => {\n            subjectListUpdated.options.push({value: subject, displayValue: subject.name});\n        });\n\n        setSubjectSelect(subjectListUpdated);\n    };\n\n    //Due to how nameInput's default value is set each time a subject is selected, the out of the box reset function\n    //from hook-form doesn't suffice.\n    const resetForm = () => {\n        const nameInputCleared = updateObject(nameInput, {defaultValue: \"\"})\n        setNameInput(nameInputCleared);\n        setEditState(false);\n        reset();\n    }\n\n    const registrationHandler = async (formData: FormValues) => {\n        const selectedSubject = convertObjectStringsToPrimitives(JSON.parse(formData.selectedSubject));\n\n        //A new subject won't have an id, set it to zero in that case\n        const subject = {\n            id: selectedSubject.id ? selectedSubject.id : 0,\n            name: formData.newSubjectName,\n            semester: formData.checkedSemester === \"0\" ? Semester.SPRING : Semester.AUTUMN,\n        }\n\n        if (editState) {\n            const userConfirmation = await SwalConfirmModal({\n                title: `Confirm new details of ${selectedSubject.name}`,\n                contentText: `New name: ${subject.name}. New semester: ${subject.semester}`\n            });\n\n            if (userConfirmation) props.addEditSubject(subject, true);\n\n        } else {\n\n            const userConfirmation = await SwalConfirmModal({\n                title: `Are you sure you want to add new subject ${subject.name}?`,\n                contentText: `If you have selected the current semester as this subject's semester, it will be visible\n                to all users once it is saved`\n            });\n\n            if (userConfirmation) props.addEditSubject(subject, false);\n        }\n    }\n\n    const deleteHandler = async (formData: FormValues) => {\n        const selectedSubject = convertObjectStringsToPrimitives(JSON.parse(formData.selectedSubject));\n        const userConfirmation = await SwalConfirmModal({title: `Delete ${selectedSubject.name}?`, contentText: \"This action is final and cannot be reverted.\"});\n\n        if (userConfirmation) props.deleteSubject(selectedSubject.id);\n    };\n\n    //Whenever a subject is selected, the name and semester inputs are to be updated to reflect the selected subject's name\n    //and semester. Reset to default values if <New Subject> is selected.\n    const subjectSelectHandler = (event: React.FormEvent<HTMLInputElement>) => {\n        const nameInputFilled = {...nameInput};\n        const semesterCheckedUpdated = {...checkedSemester}\n        const selectedSubject: ISubject = JSON.parse(event.currentTarget.value);\n\n        if (selectedSubject.name === NEW_SUBJECT) {\n            setEditState(false);\n            nameInputFilled.placeholder = \"Subject Name\";\n            nameInputFilled.defaultValue = \"\";\n            nameInputFilled.key = NEW_SUBJECT;\n\n        } else {\n            setEditState(true);\n            nameInputFilled.defaultValue = selectedSubject.name;\n            nameInputFilled.key = selectedSubject.name;\n\n            semesterCheckedUpdated.buttons.forEach(button => {\n                button.key = selectedSubject.name;\n                button.defaultChecked = button.label === selectedSubject.semester;\n            })\n        }\n\n        setNameInput(nameInputFilled);\n        setCheckedSemester(semesterCheckedUpdated);\n    }\n\n    const form = <form className={\"mt-2 mb-2\"} style={{width: \"80%\", margin: \"auto\"}}>\n        <Select ref={createUseFormRef(subjectSelect, register)} inputConfig={subjectSelect} onChange={(event) => subjectSelectHandler(event)}/>\n        <Input ref={createUseFormRef(nameInput, register)} inputConfig={nameInput} error={inputHasError(errors, nameInput)}/>\n        <Radio ref={createUseFormRef(checkedSemester,register)} inputConfig={checkedSemester}/>\n\n        <div className={\"form-group\"}>\n            <SubmitButton onClick={handleSubmit(registrationHandler)}>{editState ? \"Save Edit\" : \"Save New\"}</SubmitButton>\n            {editState ? <DeleteButton className={\"ml-2\"} onClick={handleSubmit(deleteHandler)}>Delete Subject</DeleteButton> : null}\n        </div>\n    </form>\n\n    return (\n        <>\n            {form}\n        </>\n    )\n}\n\nexport default SubjectForm;","import {RootState} from \"../../../store\";\nimport {bindActionCreators, Dispatch} from \"redux\";\nimport {addToQueue} from \"../../../store/actions/queueActions\";\nimport {connect} from \"react-redux\";\nimport QueueForm from \"./queueForm\";\n\nconst mapStateToProps = (state: RootState) => {\n    return {\n        subjects: state.subjects.currentSubjectData,\n        loading: state.queue.loading,\n        error: state.queue.error\n    }\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return bindActionCreators({\n        addQueueEntity: addToQueue,\n    }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QueueForm);","import React from \"react\";\n\ntype Props = {\n    defaultColumns: Array<string>,\n    loggedInColumns: Array<string>,\n    isAuthenticated: boolean\n}\n\nconst tableHead = (props: Props) => {\n\n    let columns: Array<JSX.Element> = [];\n    props.defaultColumns.forEach(column => {\n        columns.push(<th key={`${column} Header`} scope=\"col\">{column}</th>);\n    });\n\n    if (props.isAuthenticated) {\n        props.loggedInColumns.forEach(column => {\n            columns.push(<th key={`${column} Header`} scope=\"col\">{column}</th>);\n        });\n    }\n\n    return (\n        <thead key={\"tableHead\"} className=\"thead-dark\">\n        <tr>\n            {columns}\n        </tr>\n        </thead>\n    );\n};\n\nexport default tableHead;","import React from \"react\";\nimport {Table} from \"react-bootstrap\";\nimport TableHead from \"../../TableHead/tableHead\";\nimport {ConfirmButton, DeleteButton} from \"../../../UI/Buttons/buttons\";\nimport {IQueueEntity} from \"../../../../models/types\";\n\ntype Props = {\n    queueData: Array<IQueueEntity>,\n    confirmDoneEntity: (id: number) => void,\n    deleteQueueEntity: (id: number) => void,\n    isAuthenticated: boolean,\n    userRoles: Array<string>,\n    defaultColumns: Array<string>,\n    loggedInColumns: Array<string>\n}\n\nconst queueTable = (props: Props) => {\n\n    /* ----- Create Table Body ----- */\n    const {queueData, confirmDoneEntity, deleteQueueEntity, isAuthenticated, userRoles, defaultColumns, loggedInColumns} = props;\n    let rows = [];\n\n    for (let i = 0; i < queueData.length; i++) {\n        let rowId = \"row\" + i;\n\n        let cells = [];\n        cells.push(<td key={\"entry\" + i} id={\"entry\" + i}># {i + 1}</td>);\n        cells.push(<td key={\"name\" + i} id={\"name\" + i}>{queueData[i].name}</td>);\n        cells.push(<td key={\"subject\" + i} id={\"subject\" + i}>{queueData[i].subject}</td>);\n        cells.push(<td key={\"discord\" + i} id={\"discord\" + i}>{!queueData[i].digitalConsultation ? \"Datatorget\" : \"Discord\"}</td>);\n\n        if (isAuthenticated && userRoles.includes(\"ROLE_ADMIN\")) {\n                cells.push(<td key={\"actions\" + i} id={\"action\" + i}>{\n                    <>\n                        <ConfirmButton onClick={() => confirmDoneEntity(queueData[i].id)}>Ferdig</ConfirmButton>\n                        <DeleteButton className=\"ml-2\" onClick={() => deleteQueueEntity(queueData[i].id)}>Slett</DeleteButton>\n                    </>\n                }</td>);\n        }\n        rows.push(<tr key={i} id={rowId}>{cells}</tr>);\n    }\n\n    const tableHead = <TableHead defaultColumns={defaultColumns} loggedInColumns={loggedInColumns} isAuthenticated={isAuthenticated}/>;\n    const tableBody = <tbody>{rows}</tbody>;\n\n    return (\n        <Table striped bordered hover responsive className={\"mb-4 bg-white\"}>{tableHead}{tableBody}</Table>\n    );\n};\n\nexport default queueTable;","import React from \"react\";\n\nconst loadingSpinner = () => (\n    <div className=\"spinner-border text-primary\"></div>\n);\n\nexport default loadingSpinner;","import {useRef, useEffect} from 'react'\n\n//Taken from https://usehooks-typescript.com/react-hook/use-interval\nconst useInterval = (callback: () => void, delay: number | null) => {\n\n    const savedCallback = useRef<() => void | null>()\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback\n    })\n\n    // Set up the interval.\n    useEffect(() => {\n        const tick = () => {\n            if (typeof savedCallback?.current !== 'undefined') {\n                savedCallback?.current()\n            }\n        }\n\n        if (delay !== null) {\n            const id = setInterval(tick, delay)\n            return () => clearInterval(id)\n        }\n    }, [delay])\n}\n\nexport default useInterval","import {useRef, useEffect} from \"react\";\n\nconst usePreviousState = (state: any) => {\n    const ref = useRef();\n\n    useEffect(() => {\n        ref.current = state;\n    });\n\n    return ref.current;\n}\n\nexport default usePreviousState;","import React, { FC, useEffect } from \"react\";\n\nimport Table from \"./QueueTable/queueTable\";\nimport { jsonArrayEqual } from \"../../../utilities/arrayUtilities\";\nimport LoadingSpinner from \"../../UI/LoadingSpinner/loadingSpinner\";\nimport useInterval from \"../../../hooks/useInterval\";\nimport usePreviousState from \"../../../hooks/usePreviousState\";\nimport useSound from \"use-sound\";\nimport { IQueueEntity } from \"../../../models/types\";\n\nconst notificationSound = require(\"../../../assets/sounds/hellothere.mp3\");\n\ntype Props = {\n    isAuthenticated: boolean;\n    userRoles: Array<string>;\n    queueData: Array<IQueueEntity>;\n    loading: boolean;\n    error: string | null;\n    deleteQueueEntity: (id: number) => void;\n    confirmDoneEntity: (id: number) => void;\n    pollingFunction: () => void;\n}\n\nconst Queue: FC<Props> = (props) => {\n    const { isAuthenticated, userRoles, queueData, deleteQueueEntity, confirmDoneEntity, pollingFunction } = props;\n    const [play] = useSound(notificationSound)\n    const previousQueue = usePreviousState(queueData) as unknown as Array<IQueueEntity>\n\n    //Use effect only to be triggered when the component is first rendered.\n    useEffect(() => {\n        pollingFunction();\n    }, [pollingFunction])\n\n    //Make the LandingPage update a 5 second interval\n    useInterval(() => {\n        pollingFunction()\n    }, 5000);\n\n    //Play a notification sound if a new person has been added to the queue\n    useEffect(() => {\n\n        //Due to the API taking a few ms to respond, previousQueue will be undefined in the first render cycle.\n        if (previousQueue && isAuthenticated) {\n            if (queueData.length >= previousQueue.length) {\n                if (!jsonArrayEqual(queueData, previousQueue)) {\n                    play();\n                }\n            }\n        }\n    }, [queueData, isAuthenticated, play, previousQueue])\n\n    /* ----- Create Table ----- */\n    let table = queueData === undefined ? <LoadingSpinner /> : <Table\n        defaultColumns={[\"Plassering\", \"Navn + bordnummer\", \"Emne\", \"Arena\"]}\n        loggedInColumns={[\"Handlinger\"]}\n        queueData={queueData}\n        isAuthenticated={isAuthenticated}\n        userRoles={userRoles}\n        confirmDoneEntity={confirmDoneEntity}\n        deleteQueueEntity={deleteQueueEntity}\n    />;\n\n    return (\n        <>\n            {table}\n        </>\n    );\n\n}\n\nexport default Queue","export const jsonArrayEqual = (a: Array<any>, b: Array<any>): boolean => {\n\n    if (a.length !== b.length) return false;\n\n    let allObjectsEqual = true;\n    for (let i = 0; i < a.length; i++) {\n        if (JSON.stringify(a[i]) !== JSON.stringify(b[i])) {\n            allObjectsEqual = false;\n            break;\n        }\n    }\n    return allObjectsEqual;\n}","import {RootState} from \"../../../store\";\nimport {bindActionCreators, Dispatch} from \"redux\";\nimport {deleteFromQueue, doneInQueue, fetchQueue} from \"../../../store/actions/queueActions\";\nimport {connect} from \"react-redux\";\nimport Queue from \"./queue\";\n\nconst mapStateToProps = (state: RootState) => {\n    return {\n        isAuthenticated: state.auth.user?.token != null,\n        userRoles: state.auth.user ? state.auth.user.roles : [],\n        queueData: state.queue.queueData,\n        loading: state.queue.loading,\n        error: state.queue.error\n    }\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return bindActionCreators({\n        deleteQueueEntity: deleteFromQueue,\n        confirmDoneEntity: doneInQueue,\n        pollingFunction: fetchQueue\n    }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Queue);","import React from \"react\";\nimport QueueFormConnected from \"../../components/Forms/QueueForm/queueFormConnected\";\nimport QueueConnected from \"../../components/Tables/Queue/queueConnected\";\n\nconst LandingPage = () => {\n    return (\n        <>\n            <QueueFormConnected/>\n            <QueueConnected/>\n        </>\n    )\n}\n\nexport default LandingPage;","import React, {FC} from \"react\";\n\ntype Props = {\n    shadow: boolean;\n    widthPercent: number;\n    header: string;\n}\n\nconst Card: FC<Props> = (props) => {\n\n    let styleClasses = \"card bg-white mb-4 mt-4 ml-4 mr-4 \";\n    const width = `${String(props.widthPercent)}%`\n\n    if (props.shadow) {\n        styleClasses += \"shadow rounded \";\n    }\n\n    return(\n        <div className={styleClasses} style={{width: width}}>\n            <div className={\"card-header bg-warning\"}><h2><b>{props.header}</b></h2></div>\n            {props.children}\n        </div>\n    );\n\n};\n\nexport default Card;","import React, {forwardRef} from \"react\";\nimport {IRadioConfig} from \"../../../models/inputModels\";\n\ntype Props = {\n    inputConfig: IRadioConfig;\n    onChange?: (event: React.FormEvent<HTMLInputElement>) => void;\n    error?: boolean;\n};\n\nconst Radio = forwardRef((props: Props, ref: React.Ref<any>) => {\n    let classnames = \"form-check form-check-inline ml-2 mr-2 mt-2 mb-4 \";\n\n    if (props.error) {\n        classnames += \"is-invalid \";\n    }\n\n    const handleOnchange = (event: any) => {\n        if (props.onChange) {\n            props.onChange(event);\n        }\n    }\n\n    const radioDivs: Array<JSX.Element> = [];\n    props.inputConfig.buttons.forEach(button => {\n        radioDivs.push(\n            <div key={button.label} className={classnames}>\n                <input\n                    key={`${button.key}radio${button.value}`}\n                    value={button.value}\n                    className={\"form-check-input \"}\n                    ref={ref}\n                    defaultChecked={button.defaultChecked}\n                    onChange={handleOnchange}\n                    {...props.inputConfig}/>\n                <label className={\"form-check-label\"}>{button.label}</label>\n            </div>);\n    })\n\n    return (\n        <>\n            {radioDivs}\n        </>\n    )\n})\n\nexport default Radio;\n\n","import Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\n\ntype Props = {\n    title: string,\n    contentText?: string,\n}\n\nconst SwalConfirmModal = (props: Props) => {\n    const {title, contentText} = props;\n    const mySwal = withReactContent(Swal)\n\n    return mySwal.fire({\n        title: title,\n        html: contentText,\n        icon: \"warning\",\n        showDenyButton: true,\n        confirmButtonText: \"Confirm\",\n        denyButtonText: \"Cancel\",\n\n    }).then((result => {\n        if (result.isConfirmed) {\n            mySwal.fire(\"Done!\", \"\", \"success\");\n            return true;\n        } else if (result.isDenied) {\n            mySwal.fire(\"Aborted\", \"\", \"info\");\n            return false;\n        }\n    }));\n};\n\nexport default SwalConfirmModal","import {RootState} from \"../../../store\";\nimport {bindActionCreators, Dispatch} from \"redux\";\nimport {connect} from \"react-redux\";\nimport SubjectForm from \"./subjectForm\";\nimport {addEditSubject, deleteSubject, fetchSubjects} from \"../../../store/actions/subjectActions\";\n\nconst mapStateToProps = (state: RootState) => {\n    return {\n        subjects: state.subjects.allSubjectData,\n        loading: state.queue.loading,\n        error: state.queue.error\n    }\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return bindActionCreators({\n        fetchSubjects: fetchSubjects,\n        addEditSubject: addEditSubject,\n        deleteSubject: deleteSubject,\n    }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SubjectForm);","import React from \"react\";\nimport {FILE_DOWNLOAD_CONFIG, FILE_INSTANCE as axios} from \"../../../axiosAPI\";\nimport {SubmitButton} from \"../../UI/Buttons/buttons\";\nimport {QUEUE_EXPORT_PATH} from \"../../../constants/constants\";\nimport authHeader from \"../../../httpHeaders/authHeader\";\n\nconst QueueExportForm = () => {\n\n    const getQueueExport = () => {\n        axios.get(QUEUE_EXPORT_PATH, {headers: authHeader()})\n            .then(response => {\n                FILE_DOWNLOAD_CONFIG(\"queueData\", \"csv\", response.data);\n            })\n    }\n\n    return (\n        <div style={{margin: \"auto\"}}>\n            <SubmitButton onClick={getQueueExport}>Export</SubmitButton>\n        </div>);\n};\n\nexport default QueueExportForm;","import React from \"react\";\nimport styles from \"./adminPage.module.css\";\nimport Card from \"../../components/UI/Cards/card\";\nimport SubjectForm from \"../../components/Forms/SubjectForm/subjectFormConnected\";\nimport QueueExportForm from \"../../components/Forms/QueueExportForm/queueExportForm\";\n\ntype Props = {\n    isAuthenticated: boolean\n}\n\nconst AdminPage = (props: Props) => {\n\n    return (\n        <>\n            {!props.isAuthenticated ? <h1 style={{color: \"red\"}}>UNAUTHORIZED</h1> :\n                <div className={\"d-flex flex-row \" + styles.adminPage}>\n                    <Card widthPercent={25} shadow={true} header={\"Subjects\"}><SubjectForm/></Card>\n                    <Card widthPercent={25} shadow={true} header={\"Export Queue Data\"}><QueueExportForm/></Card>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default AdminPage;","import {RootState} from \"../../store\";\nimport {connect} from \"react-redux\";\nimport AdminPage from \"./adminPage\";\n\nconst mapStateToProps = (state: RootState) => {\n    return {\n        isAuthenticated: state.auth.user?.token !== undefined\n    }\n};\n\nexport default connect(mapStateToProps)(AdminPage);","import React, {useEffect} from 'react';\nimport {Route, Switch, withRouter, Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {checkValidAuth, fetchSubjects} from \"./store/actions/actionIndex\";\nimport LandingPage from \"./containers/LandingPage/landingPage\";\nimport {ADMIN_ROUTE, INDEX_ROUTE} from \"./constants/constants\";\nimport {bindActionCreators, Dispatch} from \"redux\";\nimport AdminPageConnected from \"./containers/AdminPage/adminPageConnected\";\nimport {RootState} from \"./store\";\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return bindActionCreators({\n        autoLogin: checkValidAuth,\n        getSubjectData: fetchSubjects\n    }, dispatch);\n};\n\nconst mapStateToProps = (state: RootState) => {\n    return {\n        isAuthenticated: state.auth.user?.token != null\n    }\n};\n\ntype Props = ReturnType<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\nconst App: React.FC<Props> = (props: Props) => {\n    const {autoLogin, getSubjectData} = props;\n\n    useEffect(() => {\n        autoLogin();\n        getSubjectData();\n    }, [autoLogin, getSubjectData]);\n\n    let routes = (\n        <Switch>\n            <Route path={INDEX_ROUTE} exact render={LandingPage}/>\n            <Redirect to={INDEX_ROUTE}/>\n        </Switch>\n    );\n\n    if (props.isAuthenticated) {\n        routes = (\n            <Switch>\n                <Route path={ADMIN_ROUTE} render={() => <AdminPageConnected/>}/>\n                <Route path={INDEX_ROUTE} exact render={LandingPage}/>\n                <Redirect to={INDEX_ROUTE}/>\n            </Switch>\n        );\n    }\n\n    return (\n        <div style={{textAlign: \"center\"}}>\n            {routes}\n        </div>\n    );\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n\n\n","import Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\n\ntype Props = {\n    title: string,\n    contentText: string,\n    url: string | null,\n    hyperlinkText: string | null\n}\n\nconst SwalInfoModal = (props: Props) => {\n    const {title, contentText, url, hyperlinkText} = props;\n    const mySwal = withReactContent(Swal)\n    const hyperlinkDiv: HTMLDivElement = document.createElement(\"div\");\n\n    if (url && hyperlinkText) {\n        hyperlinkDiv.innerHTML = `<strong><a href=\"${url}\" target=\"_blank\">${hyperlinkText}</a></strong>`;\n    }\n\n    return mySwal.fire({\n            title: title,\n            html: contentText,\n            footer: url && hyperlinkText ? hyperlinkDiv : null,\n            icon: \"info\",\n            confirmButtonText: \"Lukk\"\n    });\n};\n\nexport default SwalInfoModal","import Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\nimport {AuthDispatch} from \"../../../../store/types\";\n\ntype Props = {\n    onLoginSubmit: (username: string, password: string) => (dispatch: AuthDispatch) => Promise<boolean | undefined>;\n    clearLoginError: () => void;\n}\n\nconst SwalLoginModal = (props: Props) => {\n    const {onLoginSubmit, clearLoginError} = props;\n    const mySwal = withReactContent(Swal)\n\n    return mySwal.fire({\n        title: \"Orakel Innlogging\",\n        html: `<input type=\"text\" id=\"login\" class=\"swal2-input\" placeholder=\"Brukernavn\">\n                        <input type=\"password\" id=\"password\" class=\"swal2-input\" placeholder=\"Passord\">`,\n        confirmButtonText: \"Logg Inn\",\n        showLoaderOnConfirm: true,\n        showCancelButton: true,\n        cancelButtonColor: \"#d33\",\n        cancelButtonText: \"Avbryt\",\n        allowOutsideClick: () => !mySwal.isLoading(),\n        preConfirm: async() => {\n            const usernameInput = mySwal.getPopup()!.querySelector(\"#login\")! as HTMLInputElement\n            const passwordInput = mySwal.getPopup()!.querySelector(\"#password\")! as HTMLInputElement\n\n            const username = usernameInput.value.trim()\n            const password = passwordInput.value.trim()\n\n            if (!username || !password) {\n                mySwal.showValidationMessage(\"Oppgi brukernavn og passord!\");\n                return false;\n            }\n\n            const successfulLogin = await onLoginSubmit(username, password);\n            if (!successfulLogin) {\n                mySwal.showValidationMessage(\"Ugyldig brukernavn eller passord!\");\n                return false;\n            }\n\n            return true;\n        }\n    }).then((result) => {\n        if (result.isDismissed) {\n            clearLoginError()\n        }\n    })\n};\n\nexport default SwalLoginModal","import React from \"react\";\nimport {Navbar as BootsrapNav, NavbarProps as BootstrapNavProps} from \"react-bootstrap\";\nimport {LinkContainer} from \"react-router-bootstrap\";\nimport Nav from \"react-bootstrap/Nav\";\n\nimport styles from \"./navbar.module.css\";\n\nimport {USER_GUIDE_PATH, ADMIN_ROUTE, INDEX_ROUTE} from \"../../../constants/constants\";\n\nimport SwalInfoModal from \"../../UI/Modals/SwalModals/swalInfoModal\";\nimport SwalLoginModal from \"../../UI/Modals/SwalModals/swalLoginModal\";\nimport {AuthDispatch} from \"../../../store/types\";\n\ntype Props = {\n    onLoginSubmit: (username: string, password: string) => (dispatch: AuthDispatch) => Promise<boolean | undefined>;\n    clearLoginError: () => void;\n    logoutHandler: () => void;\n    isAuthenticated: boolean;\n}\n\nconst Navbar: React.FC<Props> = (props) => {\n\n    const showDiscordMessage = () =>\n        SwalInfoModal({\n            title: \"Discord\",\n            contentText: \"For digital veiledning benytter vi oss av Discord, og har vår egen server til dette. Inne på serveren setter vi pris på om du leser informasjonen i tekstkanalen kalt informasjon, og vi anbefaler alle å laste ned klienten deres i stedet for å bruke tjenesten gjennom nettleseren.\",\n            url: \"https://discord.gg/jgzqYpX\",\n            hyperlinkText: \"Orakel Discord\"\n        })\n\n    const showErrorReportingMessage = () =>\n        SwalInfoModal({\n            title: \"Feilrapportering\",\n            contentText: \"Orakels køsystem er et fritidsprosjekt som er bygget og vedlikeholdt av en person. Det er derfor en viss fare for bugs og feil. Disse kan rapporteres ved å legge inn en issue på GitHub-repoet, eller ved å ta kontakt med Fredrik Pedersen. Vi setter også pris på ønsker om tilleggsfunksjonalitet :)\",\n            url: \"https://github.com/OrakelOsloMet/Orakel_Queue_Client/issues\",\n            hyperlinkText: \"GitHub Repo\"\n        })\n\n    const showAboutMessage = () =>\n        SwalInfoModal({\n            title: \"Om Orakels Køsystem\",\n            contentText: \"Coming Soon!\",\n            url: USER_GUIDE_PATH,\n            hyperlinkText: \"Brukerveiledning\"\n        })\n\n    const swalLogin = () => {\n        SwalLoginModal({onLoginSubmit: props.onLoginSubmit, clearLoginError: props.clearLoginError})\n    }\n\n    const linkStyle = props.isAuthenticated ? styles.authenticatedLinkText : styles.defaultLinkText;\n    const navbarProps: BootstrapNavProps = props.isAuthenticated ? {expand: \"lg\", bg: \"warning\"} : {\n        variant: \"dark\",\n        expand: \"lg\",\n        bg: \"primary\"\n    };\n\n    const loginButton =\n        <Nav.Link\n            className={linkStyle}\n            onClick={props.isAuthenticated ? props.logoutHandler : swalLogin}>\n            {props.isAuthenticated ? \"Logg Ut\" : \"Logg Inn\"}\n        </Nav.Link>;\n\n\n    return (\n        <BootsrapNav {...navbarProps}>\n            <BootsrapNav.Brand className={styles.invisibleOnMobile}>\n                <img\n                    className={styles.brandImage}\n                    alt=\"OsloMet Logo\"\n                    src={require(props.isAuthenticated ? \"../../../assets/images/oslometsvart.png\" : \"../../../assets/images/oslomethvit.png\")}\n                />\n            </BootsrapNav.Brand>\n            <LinkContainer to={INDEX_ROUTE}>\n                <Nav.Link>\n                    <BootsrapNav.Brand\n                        className={props.isAuthenticated ? styles.authenticatedBrandText : styles.brandText}>Orakel\n                    </BootsrapNav.Brand>\n                </Nav.Link>\n            </LinkContainer>\n            <BootsrapNav.Toggle aria-controls=\"responsive-navbar-nav\"/>\n            <BootsrapNav.Collapse id=\"responsive-navbar-nav\">\n                <Nav>\n                    <Nav.Link className={linkStyle} onClick={showDiscordMessage}>Discord</Nav.Link>\n                    <Nav.Link className={linkStyle} onClick={showErrorReportingMessage}>Feilrapportering</Nav.Link>\n                    <Nav.Link className={linkStyle} onClick={showAboutMessage}>Om</Nav.Link>\n                    {props.isAuthenticated ? <LinkContainer to={ADMIN_ROUTE}><Nav.Link className={linkStyle}>Admin</Nav.Link></LinkContainer> : null}\n                    {loginButton}\n                </Nav>\n            </BootsrapNav.Collapse>\n        </BootsrapNav>\n    );\n};\n\nexport default Navbar;","import {RootState} from \"../../../store\";\nimport {bindActionCreators, Dispatch} from \"redux\";\nimport {auth, clearError, logout} from \"../../../store/actions/authActions\";\nimport {connect} from \"react-redux\";\nimport Navbar from \"./navbar\";\n\nconst mapStateToProps = (state: RootState) => {\n    return {\n        isAuthenticated: state.auth.user?.token !== undefined\n    }\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return bindActionCreators({\n        onLoginSubmit: auth,\n        clearLoginError: clearError,\n        logoutHandler: logout\n    }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar);\n","import React, {FC} from 'react';\nimport NavbarConnected from \"../../components/Navigation/Navbar/navbarConnected\";\n\nconst Layout: FC = (props) => {\n    return (\n        <>\n            <NavbarConnected/>\n            <main className=\"mb-5\">\n                {props.children}\n            </main>\n        </>\n    );\n}\n\nexport default Layout;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {createStore, applyMiddleware} from \"redux\";\nimport {Provider} from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport {rootReducer, composeEnhancers} from \"./store\";\n\nimport App from './app';\nimport './index.css';\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport Layout from \"./higherOrderedComponents/Layout/layout\";\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <Layout>\n                <App/>\n            </Layout>\n        </BrowserRouter>\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\nserviceWorker.unregister();"],"sourceRoot":""}