{"version":3,"sources":["assets/images/oslometsvart.png","assets/images/oslomethvit.png","serviceWorker.js","utilities/objectUtilities.js","constants/constants.js","axios-api.js","store/actions/authActions.js","store/actions/actionTypes.js","headers/auth-header.js","store/actions/queueActions.js","components/UI/Modals/SwalModals/SwalModals.js","components/Navigation/Navbar/Navbar.js","utilities/formUtilities.js","components/UI/Input/Input.js","components/UI/LoadingSpinner/LoadingSpinner.js","components/UI/Button/Button.js","components/UI/Modals/FormModal/FormModal.js","containers/Login/Login.js","higherOrderedComponents/Layout/Layout.js","components/UI/Table/QueueTable.js","containers/Queue/Queue.js","App.js","store/reducers/authReducer.js","store/reducers/queueReducer.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","updateObject","oldObject","updatedProperties","objectConditionalByEnvironment","productionObject","API_BASE_PATH","instance","axios","create","baseURL","authSuccess","user","type","token","userId","userRoles","roles","logout","localStorage","removeItem","checkValidAuth","dispatch","JSON","parse","getItem","post","AUTH_PATH","then","response","data","toggleLoginModal","visible","authHeader","USER","Authorization","fetchQueue","get","queueData","catch","error","fetchQueueFail","swalInfoModal","title","text","hyperlink","swal","content","icon","button","className","connect","state","isAuthenticated","auth","showLoginModal","actions","logoutHandler","props","fontStyle","color","buttonStyle","background","border","width","height","loginButton","Nav","Link","style","onClick","logoutButton","loginPrompt","navbarProps","bg","Navbar","Brand","alt","src","require","Item","document","createElement","innerHTML","inputChangedHandler","event","inputIdentifier","form","updatedFormElement","value","target","valid","checkFormElementValidity","validation","touched","updatedForm","formIsValid","rules","isValid","required","trim","minLength","length","maxLength","input","inputElement","inputType","onChange","changed","inputConfig","options","map","option","key","displayValue","loadingSpinner","disabled","styling","clicked","children","FormModal","Modal","size","aria-labelledby","centered","Header","closeButton","Title","id","Body","Container","Footer","Button","onHide","btnType","loginHandler","Login","username","placeholder","label","password","submitHandler","onLoginSubmit","setState","formElements","this","push","config","loading","LoadingSpinner","formElement","Input","invalid","shouldValidate","show","showModal","hideLoginModal","Component","setItem","stringify","authFail","message","Layout","queue","deleteQueueEntity","delete","headers","deleteFromQueueFail","confirmDoneEntity","QUEUE_PATH","doneInQueueFail","columns","defaultColumns","scope","loggedInColumns","tableHead","rows","i","rowId","cells","name","subject","digitalConsultation","actionButtons","includes","tableBody","Queue","year","discord","fillSubjectSelector","subjectListUpdated","subjects","forEach","registrationHandler","preventDefault","formData","formElementIdentifier","postNewQueueEntry","queueEntity","studyYear","addQueueEntity","setTimeout","setInterval","getQueueData","table","onSubmit","subjectData","addToQueueFail","App","autoSignIn","getSubjectData","routes","path","exact","render","to","withRouter","fetchSubjectsFail","initialState","authStart","action","authLogout","reducer","initAction","failedAction","fetchQueueSuccess","addRemoveSuccess","fetchSubjectsSuccess","rootReducer","combineReducers","authReducer","queueReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","next","console","log","result","getState","thunk","app","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.09e911ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/oslometsvart.3b9b0cc3.png\";","module.exports = __webpack_public_path__ + \"static/media/oslomethvit.2c306d99.png\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export const updateObject = (oldObject, updatedProperties) => {\r\n    return {\r\n        ...oldObject,\r\n        ...updatedProperties\r\n    };\r\n};\r\n\r\nexport const objectConditionalByEnvironment = (devObject = null, productionObject = null) => {\r\n    return process.env.NODE_ENV === \"production\" ? productionObject : devObject;\r\n};\r\n","import {objectConditionalByEnvironment} from \"../utilities/objectUtilities\";\r\n\r\n/* ----- Authentication ------ */\r\nexport const LOCAL_STORAGE_USER = \"user\";\r\n\r\n/* ----- API ------ */\r\nexport const API_BASE_PATH = objectConditionalByEnvironment(\"http://localhost:8080/api/\", \"https://orakelqueueservice.herokuapp.com/api/\");\r\n\r\n//Queue\r\nexport const QUEUE_PATH = \"queue/\";\r\nexport const CONFIRM_DONE_PATH = QUEUE_PATH + \"confirmdone/\";\r\n\r\n//Subjects\r\nexport const SUBJECTS_PATH = \"subjects/\";\r\n\r\n//Auth\r\nexport const AUTH_PATH = \"auth/\";\r\nexport const LOGIN_PATH = AUTH_PATH + \"signin\";\r\nexport const CHECK_TOKEN_PATH = AUTH_PATH + \"isTokenValid\";\r\n\r\n/* ----- Routing ----- */\r\nexport const INDEX_ROUTE = \"/Orakel_Queue_Client/\";\r\n\r\n//TODO Add all hardcoded string values to this file\r\n","import axios from \"axios\";\r\nimport {API_BASE_PATH} from \"./constants/constants\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: API_BASE_PATH\r\n});\r\n\r\nexport default instance;","import axios from \"../../axios-api\";\r\nimport * as actionTypes from \"./actionTypes\";\r\nimport {LOGIN_PATH, CHECK_TOKEN_PATH, LOCAL_STORAGE_USER} from \"../../constants/constants\";\r\n\r\nconst authStart = () => {\r\n    return {\r\n        type: actionTypes.AUTH_START\r\n    }\r\n};\r\n\r\nconst authSuccess = (user) => {\r\n    return {\r\n        type: actionTypes.AUTH_SUCCESS,\r\n        token: user.token,\r\n        userId: user.userId,\r\n        userRoles: user.roles\r\n    }\r\n};\r\n\r\nconst authFail = (error) => {\r\n    return {\r\n        type: actionTypes.AUTH_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nconst getCurrentUser = () => {\r\n    return JSON.parse(localStorage.getItem(LOCAL_STORAGE_USER));\r\n};\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem(LOCAL_STORAGE_USER);\r\n\r\n    return {\r\n        type: actionTypes.AUTH_LOGOUT\r\n    }\r\n};\r\n\r\nexport const checkValidAuth = () => {\r\n    return dispatch => {\r\n        const user = getCurrentUser();\r\n\r\n        if (user && user.token) {\r\n            axios.post(CHECK_TOKEN_PATH, user.token).then(response => {\r\n                if (response.data === true) {\r\n                    dispatch(authSuccess(user))\r\n                } else {\r\n                    dispatch(logout())\r\n                }\r\n            });\r\n        } else {\r\n            dispatch(logout())\r\n        }\r\n    }\r\n};\r\n\r\nexport const auth = (username, password) => {\r\n    return dispatch => {\r\n        dispatch(authStart());\r\n\r\n        axios.post(LOGIN_PATH, {username, password})\r\n            .then(response => {\r\n                if (response.data.token) {\r\n                    localStorage.setItem(LOCAL_STORAGE_USER, JSON.stringify(response.data));\r\n                    dispatch(authSuccess(response.data));\r\n                }\r\n            }).catch(error => {\r\n                dispatch(authFail(error.response.data.message))\r\n        });\r\n    }\r\n};\r\n\r\nexport const toggleLoginModal = (visible) => {\r\n    return {\r\n        type: actionTypes.TOGGLE_LOGIN_MODAL,\r\n        visible: visible\r\n    }\r\n};\r\n","\r\n/* ----- Authentication ----- */\r\nexport const AUTH_START = \"AUTH_START\";\r\nexport const AUTH_SUCCESS = \"AUTH_SUCCESS\";\r\nexport const AUTH_FAIL = \"AUTH_FAIL\";\r\nexport const AUTH_LOGOUT = \"AUTH_LOGOUT\";\r\nexport const TOGGLE_LOGIN_MODAL = \"TOGGLE_LOGIN_MODAL\";\r\n\r\n/* ----- Queue ----- */\r\nexport const FETCH_QUEUE_START = \"FETCH_QUEUE_START\";\r\nexport const FETCH_QUEUE_SUCCESS = \"FETCH_QUEUE_SUCCESS\";\r\nexport const FETCH_QUEUE_FAIL = \"FETCH_QUEUE_FAIL\";\r\n\r\nexport const ADD_TO_QUEUE_START = \"ADD_TO_QUEUE_START\";\r\nexport const ADD_TO_QUEUE_SUCCESS = \"ADD_TO_QUEUE_SUCCESS\";\r\nexport const ADD_TO_QUEUE_FAIL = \"ADD_TO_QUEUE_FAIL\";\r\n\r\nexport const DELETE_FROM_QUEUE_START = \"DELETE_FROM_QUEUE_START\";\r\nexport const DELETE_FROM_QUEUE_SUCCESS = \"DELETE_FROM_QUEUE_SUCCESS\";\r\nexport const DELETE_FROM_QUEUE_FAIL = \"DELETE_FROM_QUEUE_FAIL\";\r\n\r\nexport const DONE_IN_QUEUE_START = \"DONE_IN_QUEUE_START\";\r\nexport const DONE_IN_QUEUE_SUCCESS = \"DONE_IN_QUEUE_SUCCESS\";\r\nexport const DONE_IN_QUEUE_FAIL = \"DONE_IN_QUEUE_FAIL\";\r\n\r\nexport const FETCH_SUBJECTS_START = \"FETCH_SUBJECTS_START\";\r\nexport const FETCH_SUBJECTS_SUCCESS = \"FETCH_SUBJECTS_SUCCESS\";\r\nexport const FETCH_SUBJECTS_FAIL = \"FETCH_SUBJECTS_FAIL\";\r\n\r\n","import {LOCAL_STORAGE_USER} from \"../constants/constants\";\r\n\r\nexport default function authHeader() {\r\n\r\n    const USER = JSON.parse(localStorage.getItem(LOCAL_STORAGE_USER));\r\n\r\n    if (USER && USER.token) {\r\n        return { Authorization: \"Bearer \" + USER.token };\r\n    } else {\r\n        return {};\r\n    }\r\n}\r\n","import axios from \"../../axios-api\";\r\nimport * as actionTypes from \"./actionTypes\";\r\nimport {CONFIRM_DONE_PATH, QUEUE_PATH, SUBJECTS_PATH} from \"../../constants/constants\";\r\nimport authHeader from \"../../headers/auth-header\";\r\n\r\n/* ----- Fetch Queue Data ----- */\r\n\r\nconst fetchQueueStart = () => {\r\n    return {\r\n        type: actionTypes.FETCH_QUEUE_START\r\n    }\r\n};\r\n\r\nconst fetchQueueSuccess = (queueData) => {\r\n    return {\r\n        type: actionTypes.FETCH_QUEUE_SUCCESS,\r\n        queueData: queueData\r\n    }\r\n};\r\n\r\nconst fetchQueueFail = (error) => {\r\n    return {\r\n        type: actionTypes.FETCH_QUEUE_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nexport const fetchQueue = () => {\r\n    return dispatch => {\r\n        dispatch(fetchQueueStart());\r\n\r\n        axios.get(QUEUE_PATH)\r\n            .then(response => {\r\n                dispatch(fetchQueueSuccess(response.data))\r\n            })\r\n            .catch(error => {\r\n                dispatch(fetchQueueFail(error.response))\r\n            })\r\n    }\r\n};\r\n\r\n/* ----- Add to Queue ----- */\r\n\r\nconst addToQueueStart = () => {\r\n    return {\r\n        type: actionTypes.ADD_TO_QUEUE_START\r\n    }\r\n};\r\n\r\nconst addToQueueSuccess = () => {\r\n    return {\r\n        type: actionTypes.ADD_TO_QUEUE_SUCCESS\r\n    }\r\n};\r\n\r\nconst addToQueueFail = (error) => {\r\n    return {\r\n        type: actionTypes.ADD_TO_QUEUE_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nexport const addToQueue = (queueEntity) => {\r\n    return dispatch => {\r\n        dispatch(addToQueueStart());\r\n        axios.post(QUEUE_PATH, queueEntity)\r\n            .then(() => {\r\n                dispatch(addToQueueSuccess());\r\n                dispatch(fetchQueue());\r\n            })\r\n            .catch(error => {\r\n                dispatch(addToQueueFail(error.response));\r\n            });\r\n    }\r\n};\r\n\r\n/* ----- Delete From Queue ----- */\r\n\r\nconst deleteFromQueueStart = () => {\r\n    return {\r\n        type: actionTypes.DELETE_FROM_QUEUE_START\r\n    }\r\n};\r\n\r\nconst deleteFromQueueSuccess = () => {\r\n    return {\r\n        type: actionTypes.DELETE_FROM_QUEUE_SUCCESS\r\n    }\r\n};\r\n\r\nconst deleteFromQueueFail = (error) => {\r\n    return {\r\n        type: actionTypes.DELETE_FROM_QUEUE_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nexport const deleteFromQueue = (id) => {\r\n    return dispatch => {\r\n        dispatch(deleteFromQueueStart());\r\n\r\n        axios.delete(QUEUE_PATH + id, {headers: authHeader()})\r\n            .then(() => {\r\n                dispatch(deleteFromQueueSuccess());\r\n                dispatch(fetchQueue());\r\n            })\r\n            .catch(error => {\r\n                dispatch(deleteFromQueueFail(error.response));\r\n            });\r\n    }\r\n};\r\n\r\n/* ----- Done in Queue ----- */\r\n\r\nconst doneInQueueStart = () => {\r\n    return {\r\n        type: actionTypes.DONE_IN_QUEUE_START\r\n    }\r\n};\r\n\r\nconst doneInQueueSuccess = () => {\r\n    return {\r\n        type: actionTypes.DONE_IN_QUEUE_SUCCESS\r\n    }\r\n};\r\n\r\nconst doneInQueueFail = (error) => {\r\n    return {\r\n        type: actionTypes.DONE_IN_QUEUE_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nexport const doneInQueue = (id) => {\r\n    return dispatch => {\r\n        dispatch(doneInQueueStart());\r\n\r\n        axios.post(CONFIRM_DONE_PATH + id, null, {headers: authHeader()})\r\n            .then(() => {\r\n                dispatch(doneInQueueSuccess());\r\n                dispatch(fetchQueue());\r\n            })\r\n            .catch(error => {\r\n                dispatch(doneInQueueFail(error.response));\r\n            });\r\n    }\r\n};\r\n\r\n/* ----- Fetch Subjects ----- */\r\n\r\nconst fetchSubjectsStart = () => {\r\n    return {\r\n        type: actionTypes.FETCH_SUBJECTS_START\r\n    }\r\n};\r\n\r\nconst fetchSubjectsSuccess = (subjectData) => {\r\n    return {\r\n        type: actionTypes.FETCH_SUBJECTS_SUCCESS,\r\n        subjectData: subjectData\r\n    }\r\n};\r\n\r\nconst fetchSubjectsFail = (error) => {\r\n    return {\r\n        type: actionTypes.FETCH_SUBJECTS_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nexport const fetchSubjects = () => {\r\n    return dispatch => {\r\n        dispatch(fetchSubjectsStart());\r\n\r\n        axios.get(SUBJECTS_PATH)\r\n            .then(response => {\r\n            dispatch(fetchSubjectsSuccess(response.data));\r\n        }).catch(error => {\r\n            dispatch(fetchSubjectsFail(error.response));\r\n        });\r\n    }\r\n};","import swal from \"sweetalert\";\r\n\r\nexport const swalInfoModal = (title, text, hyperlink = null) => {\r\n\r\n    return (\r\n        swal({\r\n                title: title,\r\n                text: text,\r\n                content: hyperlink,\r\n                icon: \"info\",\r\n                button: {\r\n                    text: \"Ok\",\r\n                    className: \"btn btn-primary\"\r\n                },\r\n            }\r\n        )\r\n    );\r\n};","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Navbar} from \"react-bootstrap\";\r\n\r\nimport * as actions from \"../../../store/actions/actionIndex\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\n\r\nimport {swalInfoModal} from \"../../UI/Modals/SwalModals/SwalModals\";\r\nimport {objectConditionalByEnvironment} from \"../../../utilities/objectUtilities\";\r\n\r\n//TODO Find out how to use variables inside the innerHTML's anchor tag's href-attribute. Then move the whole declaration\r\n// TODO of hyperlink inside swalInfoModal. This is starting to get cumbersome.\r\nconst navbar = (props) => {\r\n\r\n    const showDiscordMessage = () => {\r\n        const hyperlink = document.createElement(\"div\");\r\n        hyperlink.innerHTML = \"<strong><a href='https://discord.gg/jgzqYpX' target='_blank'>Orakels Discord</a></strong>\";\r\n\r\n        swalInfoModal(\"Discord\", \"For digital veiledning benytter vi oss av Discord, og har vår egen server til dette. Inne på serveren \" +\r\n            \"setter vi pris på om du leser informasjonen i tekstkanalen kalt informasjon, og vi anbefaler alle å laste \" +\r\n            \"ned klienten deres i stedet for å bruke tjenesten gjennom nettleseren.\", hyperlink);\r\n    };\r\n\r\n    const showErrorReportingMessage = () => {\r\n        const hyperlink = document.createElement(\"div\");\r\n        hyperlink.innerHTML = \"<strong><a href='https://github.com/OrakelOsloMet/Orakel_Queue_Client/issues' target='_blank'>GitHub Repo</a></strong>\";\r\n\r\n        swalInfoModal(\"Feilrapportering\", \"Orakels køsystem er et fritidsprosjekt som er bygget og vedlikeholdt av en person. Det er derfor \" +\r\n            \"en viss fare for bugs og feil. Disse kan rapporteres ved å legge inn en issue på GitHub-repoet, eller \" +\r\n            \"ved å ta kontakt med Fredrik Pedersen. Vi setter også pris på ønsker om tilleggsfunksjonalitet :) \", hyperlink);\r\n    };\r\n\r\n    const showAboutMessage = () => {\r\n        const hyperlink = document.createElement(\"div\");\r\n        hyperlink.innerHTML = objectConditionalByEnvironment(\"<strong><a href='localhost:8080/api/resources/userguide' target='_blank'>Brukerveiledning</a></strong>\", \"<strong><a href='https://orakelqueueservice.herokuapp.com/api/resources/userguide' target='_blank'>Brukerveiledning</a></strong>\");\r\n\r\n        swalInfoModal(\"Om Orakels Køsystem\", \"Coming Soon!\", hyperlink);\r\n    };\r\n\r\n    let fontStyle = props.isAuthenticated ? {color: \"black\"} : {color: \"white\"};\r\n    let buttonStyle = props.isAuthenticated ? {background: \"none\", border: \"none\", color: \"black\", width: \"100px\", height: \"40px\"} :\r\n        {background: \"none\", border: \"none\", color: \"white\", width: \"100px\", height: \"40px\"};\r\n\r\n    const loginButton =\r\n        <Nav.Link>\r\n            <button\r\n                style={buttonStyle}\r\n                onClick={props.showLoginModal}>\r\n                <strong>Admin</strong>\r\n            </button>\r\n        </Nav.Link>;\r\n\r\n    const logoutButton =\r\n        <Nav.Link>\r\n            <button\r\n                style={buttonStyle}\r\n                onClick={props.logoutHandler}>\r\n                <strong>Logg Ut</strong>\r\n            </button>\r\n        </Nav.Link>;\r\n\r\n    let loginPrompt = props.isAuthenticated ? logoutButton : loginButton;\r\n    let navbarProps = props.isAuthenticated ? {bg: \"warning\"} : {bg: \"primary\"};\r\n\r\n    return (\r\n        <Navbar {...navbarProps}>\r\n            <Nav className=\"container-fluid\">\r\n                <Navbar.Brand>\r\n                    <img\r\n                        alt=\"\"\r\n                        src={require(props.isAuthenticated ? \"../../../assets/images/oslometsvart.png\" : \"../../../assets/images/oslomethvit.png\")}\r\n                        width=\"140\"\r\n                        height=\"90\"\r\n                        className=\"d-inline-block align-top\"\r\n                    />\r\n                </Navbar.Brand>\r\n                <Nav.Item><h2 style={fontStyle}><strong>Orakel</strong></h2></Nav.Item>\r\n                <Nav.Link className=\"ml-5\" style={fontStyle} onClick={showDiscordMessage}><strong>Discord</strong></Nav.Link>\r\n                <Nav.Link className=\"ml-5\" style={fontStyle} onClick={showErrorReportingMessage}><strong>Feilrapportering</strong></Nav.Link>\r\n                <Nav.Link className=\"ml-5\" style={fontStyle} onClick={showAboutMessage}><strong>Om</strong></Nav.Link>\r\n                <Nav.Item className=\"ml-auto\">{loginPrompt}</Nav.Item>\r\n            </Nav>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isAuthenticated: state.auth.token !== null\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        showLoginModal: () => dispatch(actions.toggleLoginModal(false)),\r\n        logoutHandler: () => dispatch(actions.logout())\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(navbar);","import {updateObject} from \"./objectUtilities\";\r\n\r\nexport const inputChangedHandler = (event, inputIdentifier, form) => {\r\n    const updatedFormElement = updateObject(form[inputIdentifier], {\r\n        value: event.target.value,\r\n        valid: checkFormElementValidity(event.target.value, form[inputIdentifier].validation),\r\n        touched: true\r\n    });\r\n\r\n    const updatedForm = updateObject(form, {\r\n        [inputIdentifier]: updatedFormElement\r\n    });\r\n\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in updatedForm) {\r\n        formIsValid = updatedForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n\r\n    return {form: updatedForm, formIsValid: formIsValid}\r\n};\r\n\r\nconst checkFormElementValidity = (value, rules) => {\r\n    let isValid = true;\r\n    if (!rules) {\r\n        return true;\r\n    }\r\n\r\n    if (rules.required) {\r\n        isValid = value.trim() !== '' && isValid;\r\n    }\r\n\r\n    if (rules.minLength) {\r\n        isValid = value.length >= rules.minLength && isValid\r\n    }\r\n\r\n    if (rules.maxLength) {\r\n        isValid = value.length <= rules.maxLength && isValid\r\n    }\r\n\r\n    return isValid;\r\n};","import React from \"react\";\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n\r\n    switch (props.inputType) {\r\n        case(\"input\"):\r\n            inputElement = <input\r\n                className=\"form-control ml-2 mr-2 mt-2\"\r\n                value={props.value}\r\n                onChange={props.changed}\r\n                {...props.inputConfig}/>;\r\n            break;\r\n\r\n        case(\"select\"):\r\n            inputElement = <select\r\n                className=\"form-control ml-2 mr-2 mt-2\"\r\n                value={props.value}\r\n                onChange={props.changed}>\r\n                {props.inputConfig.options.map(option => (\r\n                    <option key={option.value} value={option.value}>\r\n                        {option.displayValue}\r\n                    </option>\r\n                ))}\r\n            </select>;\r\n            break;\r\n\r\n        default:\r\n            inputElement = <input\r\n                className=\"form-control\"/>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {inputElement}\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default input;","import React from \"react\";\r\n\r\nconst loadingSpinner = () => (\r\n    <div className=\"spinner-border text-primary\"></div>\r\n);\r\n\r\nexport default loadingSpinner;","import React from 'react';\r\n\r\nconst button = (props) => (\r\n    <button\r\n        disabled={props.disabled}\r\n        className={props.styling}\r\n        onClick={props.clicked}>{props.children}</button>\r\n);\r\n\r\nexport default button;","import React from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"../../Button/Button\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nconst FormModal = (props) => {\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Innlogging\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className=\"show-grid\">\r\n                <Container>\r\n                    {props.form}\r\n                    <p className=\"mt-4\"><strong>Denne innloggingssiden er kun ment for Orakler på jobb. Er du student og\r\n                        skal stelle deg i kø trenger du IKKE å logge inn her :)</strong></p>\r\n                </Container>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button styling=\"btn btn-danger\" clicked={props.onHide}>Lukk</Button>\r\n                <Button btnType=\"Success\" styling=\"btn btn-primary\" disabled={!props.formIsValid}\r\n                        clicked={props.loginHandler}>Logg\r\n                    Inn</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default FormModal;","import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport * as actions from \"../../store/actions/actionIndex\";\r\nimport {inputChangedHandler} from \"../../utilities/formUtilities\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport LoadingSpinner from \"../../components/UI/LoadingSpinner/LoadingSpinner\";\r\nimport FormModal from \"../../components/UI/Modals/FormModal/FormModal\";\r\n\r\nclass Login extends Component {\r\n    state = {\r\n        form: {\r\n            username: {\r\n                inputType: \"input\",\r\n                inputConfig: {\r\n                    type: \"text\",\r\n                    placeholder: \"Brukernavn\"\r\n                },\r\n                value: \"\",\r\n                label: \"Brukernavn\",\r\n                validation: {\r\n                    required: true,\r\n                    maxLength: 30\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                inputType: \"input\",\r\n                inputConfig: {\r\n                    type: \"password\",\r\n                    placeholder: \"Passord\"\r\n                },\r\n                value: \"\",\r\n                label: \"Passord\",\r\n                validation: {\r\n                    required: true,\r\n                    maxLength: 150\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        formIsValid: false,\r\n    };\r\n\r\n    submitHandler = () => {\r\n        this.props.onLoginSubmit(this.state.form.username.value, this.state.form.password.value);\r\n    };\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        this.setState(inputChangedHandler(event, inputIdentifier, this.state.form));\r\n    };\r\n\r\n    render() {\r\n        const formElements = [];\r\n        for (let key in this.state.form) {\r\n            formElements.push({\r\n                id: key,\r\n                config: this.state.form[key]\r\n            });\r\n        }\r\n\r\n        let form = this.props.loading ? <LoadingSpinner/> :\r\n            <form className=\"form-inline\">\r\n                {formElements.map(formElement => (\r\n                    <Input\r\n                        key={formElement.id}\r\n                        inputType={formElement.config.inputType}\r\n                        inputConfig={formElement.config.inputConfig}\r\n                        value={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        label={formElement.config.label}\r\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                    />\r\n                ))}\r\n                {this.props.error ? <p className=\"mt-4\" style={{color: \"red\"}}><strong>{this.props.error}</strong></p> : null}\r\n            </form>;\r\n\r\n        return (\r\n            <FormModal\r\n                form={form}\r\n                formIsValid={this.state.formIsValid}\r\n                loginHandler={this.submitHandler}\r\n                show={this.props.showModal}\r\n                onHide={this.props.hideLoginModal}/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        showModal: state.auth.showModal\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onLoginSubmit: (username, password) => dispatch(actions.auth(username, password)),\r\n        hideLoginModal: () => dispatch(actions.toggleLoginModal(true))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import React, {Component} from 'react';\r\nimport Navbar from \"../../components/Navigation/Navbar/Navbar\";\r\nimport Login from \"../../containers/Login/Login\";\r\n\r\nclass Layout extends Component {\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                <Navbar/>\r\n                <main>\r\n                    <Login/>\r\n                    {this.props.children}\r\n                </main>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Layout;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport * as actions from \"../../../store/actions/actionIndex\";\r\n\r\nconst queueTable = (props) => {\r\n\r\n    /* ----- Create Table Head ----- */\r\n\r\n    let columns = [];\r\n    const defaultColumns =\r\n        <>\r\n            <th key={\"queueNumberHeader\"} scope=\"col\">Plassering</th>\r\n            <th key={\"nameHeader\"} scope=\"col\">Navn</th>\r\n            <th key={\"subjectHeader\"} scope=\"col\">Emne</th>\r\n            <th key={\"discordHeader\"} scope=\"col\">Arena</th>\r\n        </>;\r\n\r\n    //The actions column is only visible to logged in users\r\n    let loggedInColumns = props.isAuthenticated ? <th key={\"actionsHeader\"} scope=\"col\">Handlinger</th> : null;\r\n\r\n    columns.push(defaultColumns);\r\n    columns.push(loggedInColumns);\r\n\r\n    const tableHead =\r\n        <thead key={\"tableHead\"} className=\"thead-dark\">\r\n        <tr>\r\n            {columns}\r\n        </tr>\r\n        </thead>;\r\n\r\n    /* ----- Create Table Body ----- */\r\n\r\n    let rows = [];\r\n    for (let i = 0; i < props.queueData.length; i++) {\r\n        let rowId = \"row\" + i;\r\n\r\n        let cells = [];\r\n        cells.push(<td key={\"entry\" + i} id={\"entry\" + i}>{i + 1}</td>);\r\n        cells.push(<td key={\"name\" + i} id={\"name\" + i}>{props.queueData[i].name}</td>);\r\n        cells.push(<td key={\"subject\" + i} id={\"subject\" + i}>{props.queueData[i].subject}</td>);\r\n        cells.push(<td key={\"discord\" + i} id={\"discord\" + i}>{props.queueData[i].digitalConsultation === false ? \"Datatorget\" : \"Discord\"}</td>);\r\n\r\n        let actionButtons =\r\n            <>\r\n                <button className=\"btn btn-success\" onClick={() => props.confirmDoneEntity(props.queueData[i].id)}>Ferdig</button>\r\n                <button className=\"btn btn-danger ml-2\" onClick={() => props.deleteQueueEntity(props.queueData[i].id)}>Slett</button>\r\n            </>;\r\n\r\n        if (props.isAuthenticated) {\r\n            //The current action buttons, Done and Delete, are only available to admins. If regular users are implemented and\r\n            //are getting the opportunity to edit their queue entries, there will have to be some changes here.\r\n            actionButtons = props.userRoles.includes(\"ROLE_ADMIN\") ? actionButtons : null;\r\n            cells.push(<td key={\"actions\" + i} id={\"action\" + i}>{actionButtons}</td>);\r\n        }\r\n\r\n        rows.push(<tr key={i} id={rowId}>{cells}</tr>);\r\n    }\r\n\r\n    const tableBody = <tbody>{rows}</tbody>;\r\n\r\n    return (\r\n        <table className=\"table table-striped mb-4\">{tableHead}{tableBody}</table>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isAuthenticated: state.auth.token != null,\r\n        userRoles: state.auth.userRoles,\r\n        queueData: state.queue.queueData\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        deleteQueueEntity: (id) => dispatch(actions.deleteFromQueue(id)),\r\n        confirmDoneEntity: (id) => dispatch(actions.doneInQueue(id))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(queueTable);","import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport * as actions from \"../../store/actions/actionIndex\";\r\nimport LoadingSpinner from \"../../components/UI/LoadingSpinner/LoadingSpinner\";\r\nimport Table from \"../../components/UI/Table/QueueTable\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport {inputChangedHandler} from \"../../utilities/formUtilities\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\n\r\nexport class Queue extends Component {\r\n\r\n    state = {\r\n        form: {\r\n            name: {\r\n                inputType: \"input\",\r\n                inputConfig: {\r\n                    type: \"text\",\r\n                    placeholder: \"Fornavn\"\r\n                },\r\n                value: \"\",\r\n                label: \"Navn\",\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 3,\r\n                    maxLength: 30\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n\r\n            subject: {\r\n                inputType: \"select\",\r\n                inputConfig: {\r\n                    options: []\r\n                },\r\n                value: \"Programmering\",\r\n                label: \"Velg Emne\",\r\n                validation: {},\r\n                valid: true\r\n            },\r\n\r\n            year: {\r\n                inputType: \"select\",\r\n                inputConfig: {\r\n                    options: [\r\n                        {value: 1, displayValue: \"1. år\"},\r\n                        {value: 2, displayValue: \"2. år\"},\r\n                        {value: 3, displayValue: \"3. år\"}\r\n                    ]\r\n                },\r\n                value: 1,\r\n                label: \"Årstrinn\",\r\n                validation: {},\r\n                valid: true\r\n            },\r\n\r\n            //Indicates if the student wants digital consultation or not. In the database 1 is true and 0 is false.\r\n            discord: {\r\n                inputType: \"select\",\r\n                inputConfig: {\r\n                    options: [\r\n                        {value: false, displayValue: \"Fysisk Veiledning (Datatorget)\"},\r\n                        {value: true, displayValue: \"Digital Veiledning (Discord)\"},\r\n                    ]\r\n                },\r\n                value: 0,\r\n                label: \"Veiledningsform\",\r\n                validation: {},\r\n                valid: true\r\n            },\r\n        },\r\n        formIsValid: false\r\n    };\r\n\r\n    componentDidMount() {\r\n\r\n        //TODO This is NOT a good way to make sure data is being filled into the selector. Look into Redux-forms.\r\n        setTimeout(() => {\r\n            this.fillSubjectSelector();\r\n        }, 1000);\r\n\r\n        //Refresh the queue data once a minute\r\n       setInterval(() => {\r\n            this.props.getQueueData();\r\n        }, 30000);\r\n    }\r\n\r\n    fillSubjectSelector = () => {\r\n        const subjectListUpdated = {...this.state.form};\r\n\r\n        this.props.subjects.forEach(subject => {\r\n            subjectListUpdated.subject.inputConfig.options.push({value: subject, displayValue: subject})\r\n        });\r\n\r\n        this.setState({form: subjectListUpdated});\r\n    };\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        this.setState(inputChangedHandler(event, inputIdentifier, this.state.form));\r\n    };\r\n\r\n    registrationHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const formData = {};\r\n        for(let formElementIdentifier in this.state.form) {\r\n            formData[formElementIdentifier] = this.state.form[formElementIdentifier].value;\r\n        }\r\n\r\n        this.postNewQueueEntry(formData);\r\n    };\r\n\r\n    postNewQueueEntry = (formData) => {\r\n        const queueEntity = {\r\n            name: formData.name,\r\n            subject: formData.subject,\r\n            digitalConsultation: formData.discord,\r\n            studyYear: formData.year\r\n        };\r\n\r\n        this.props.addQueueEntity(queueEntity);\r\n    };\r\n\r\n\r\n    render() {\r\n        const table = this.props.loading ? <LoadingSpinner/> : <Table/>;\r\n\r\n        const formElements = [];\r\n        for (let key in this.state.form) {\r\n            formElements.push({\r\n                id: key,\r\n                config: this.state.form[key]\r\n            });\r\n        }\r\n\r\n        const form = <form onSubmit={this.registrationHandler} className=\"form-inline mt-3\">\r\n            {formElements.map(formElement => (\r\n                <Input\r\n                    key={formElement.id}\r\n                    inputType={formElement.config.inputType}\r\n                    inputConfig={formElement.config.inputConfig}\r\n                    value={formElement.config.value}\r\n                    invalid={!formElement.config.valid}\r\n                    shouldValidate={formElement.config.validation}\r\n                    touched={formElement.config.touched}\r\n                    label={formElement.config.label}\r\n                    changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                    />\r\n            ))}\r\n            <Button btnType=\"Success\" styling=\"ml-2 mr-2 mt-2 btn btn-primary\" disabled={!this.state.formIsValid}>Registrer</Button>\r\n        </form>;\r\n\r\n        return (\r\n            <>\r\n                {table}\r\n                <h1 className=\"text-left ml-2 mr-2 mt-5\">Køregistrering: </h1>\r\n                {form}\r\n            </>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        subjects: state.queue.subjectData,\r\n        loading: state.queue.loading,\r\n        error: state.queue.error\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getQueueData: () => dispatch(actions.fetchQueue()),\r\n        addQueueEntity: (queueEntity) => dispatch(actions.addToQueue(queueEntity)),\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Queue);","import React, {Component} from 'react';\r\nimport {Route, Switch, withRouter, Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './App.css';\r\nimport * as actions from \"./store/actions/actionIndex\";\r\nimport Layout from \"./higherOrderedComponents/Layout/Layout\";\r\nimport Queue from \"./containers/Queue/Queue\";\r\nimport {INDEX_ROUTE} from \"./constants/constants\";\r\n\r\nclass App extends Component {\r\n\r\n     componentDidMount() {\r\n        this.props.autoSignIn();\r\n        this.props.getQueueData();\r\n        this.props.getSubjectData();\r\n    }\r\n\r\n    render() {\r\n        \r\n        let routes = (\r\n            <Switch>\r\n                <Route path={INDEX_ROUTE} exact render={() => (<Queue/>)}/>\r\n                <Redirect to={INDEX_ROUTE}/>\r\n            </Switch>\r\n        );\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <Layout>\r\n                    {routes}\r\n                </Layout>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        autoSignIn: () => dispatch(actions.checkValidAuth()),\r\n        getQueueData: () => dispatch(actions.fetchQueue()),\r\n        getSubjectData: () => dispatch(actions.fetchSubjects())\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(null, mapDispatchToProps)(App));\r\n\r\n\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\nimport {updateObject} from \"../../utilities/objectUtilities\";\r\n\r\nconst initialState = {\r\n    token: null,\r\n    userId: null,\r\n    userRoles: null,\r\n    error: null,\r\n    loading: false,\r\n    showModal: false\r\n};\r\n\r\nconst authStart = (state, action) => {\r\n    return updateObject(state, {error: null, loading: true});\r\n};\r\n\r\nconst authSuccess = (state, action) => {\r\n    return updateObject(state, {\r\n        token: action.token,\r\n        userId: action.userId,\r\n        userRoles: action.userRoles,\r\n        error: null,\r\n        loading: false,\r\n        showModal: false\r\n    });\r\n};\r\n\r\nconst authFail = (state, action) => {\r\n    return updateObject(state, {\r\n        error: action.error,\r\n        loading: false,\r\n        showModal: true\r\n    });\r\n};\r\n\r\nconst authLogout = (state, action) => {\r\n    return updateObject(state, {token: null, userId: null, userRoles: null});\r\n};\r\n\r\nconst toggleLoginModal = (state, action) => {\r\n    return updateObject(state, {showModal: !action.visible})\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case actionTypes.AUTH_START: return authStart(state, action);\r\n        case actionTypes.AUTH_SUCCESS: return authSuccess(state, action);\r\n        case actionTypes.AUTH_FAIL: return authFail(state, action);\r\n        case actionTypes.AUTH_LOGOUT: return authLogout(state, action);\r\n        case actionTypes.TOGGLE_LOGIN_MODAL: return toggleLoginModal(state, action);\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import * as actionTypes from \"../actions/actionTypes\";\r\nimport {updateObject} from \"../../utilities/objectUtilities\";\r\n\r\nconst initialState = {\r\n    queueData: [],\r\n    subjectData: [],\r\n    error: null,\r\n    loading: false\r\n};\r\n\r\n\r\nconst initAction = (state, action) => {\r\n    return updateObject(state, {error: null, loading: true});\r\n};\r\n\r\nconst failedAction = (state, action) => {\r\n    return updateObject(state, {\r\n        error: action.error,\r\n        loading: false\r\n    })\r\n};\r\n\r\n/* ----- Fetch Queue Data ----- */\r\n\r\nconst fetchQueueSuccess = (state, action) => {\r\n    return updateObject(state, {\r\n        queueData: action.queueData,\r\n        error: null,\r\n        loading: false\r\n    });\r\n};\r\n\r\n\r\n/* ----- Add, Delete and Remove in Queue ----- */\r\n\r\nconst addRemoveSuccess = (state, action) => {\r\n    return updateObject(state, {\r\n        error: null,\r\n        loading: false\r\n    })\r\n};\r\n\r\n/* ----- Fetch Subject Data ----- */\r\n\r\nconst fetchSubjectsSuccess = (state, action) => {\r\n    return updateObject(state, {\r\n        subjectData: action.subjectData,\r\n        error: null,\r\n        loading: false\r\n    })\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        //Start cases\r\n        case actionTypes.FETCH_QUEUE_START:\r\n        case actionTypes.ADD_TO_QUEUE_START:\r\n        case actionTypes.DELETE_FROM_QUEUE_START:\r\n        case actionTypes.DONE_IN_QUEUE_START:\r\n        case actionTypes.FETCH_SUBJECTS_START:\r\n            return initAction(state, action);\r\n\r\n        //Fail cases\r\n        case actionTypes.FETCH_QUEUE_FAIL:\r\n        case actionTypes.ADD_TO_QUEUE_FAIL:\r\n        case actionTypes.DELETE_FROM_QUEUE_FAIL:\r\n        case actionTypes.DONE_IN_QUEUE_FAIL:\r\n        case actionTypes.FETCH_SUBJECTS_FAIL:\r\n            return failedAction(state, action);\r\n\r\n        //Success cases\r\n        case actionTypes.FETCH_QUEUE_SUCCESS:\r\n            return fetchQueueSuccess(state, action);\r\n        case actionTypes.ADD_TO_QUEUE_SUCCESS:\r\n        case actionTypes.DELETE_FROM_QUEUE_SUCCESS:\r\n        case actionTypes.DONE_IN_QUEUE_SUCCESS:\r\n            return addRemoveSuccess(state, action);\r\n        case actionTypes.FETCH_SUBJECTS_SUCCESS:\r\n            return fetchSubjectsSuccess(state, action);\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {createStore, combineReducers, applyMiddleware, compose} from \"redux\";\r\nimport {Provider} from \"react-redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport App from './App';\r\nimport authReducer from \"./store/reducers/authReducer\";\r\nimport queueReducer from \"./store/reducers/queueReducer\";\r\nimport {objectConditionalByEnvironment} from \"./utilities/objectUtilities\";\r\nimport './index.css';\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n//Logger for debugging Redux, should not be enabled in production\r\nconst logger = store => {\r\n    return next => {\r\n        return action => {\r\n            console.log(\"[Middleware] Dispatching: \", action);\r\n            const result = next(action);\r\n            console.log(\"[Middleware] next state: \", store.getState());\r\n            return result;\r\n        };\r\n    };\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    queue: queueReducer\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n//Conditionally creates a store with or without a logger, dependent on the environment.\r\nconst store = objectConditionalByEnvironment(createStore(rootReducer, composeEnhancers(applyMiddleware(logger, thunk))), createStore(rootReducer, composeEnhancers(applyMiddleware(thunk))));\r\n\r\nconst app = (\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n    </Provider>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById(\"root\"));\r\nserviceWorker.unregister();"],"sourceRoot":""}