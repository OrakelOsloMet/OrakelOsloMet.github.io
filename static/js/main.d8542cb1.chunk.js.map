{"version":3,"sources":["components/Navigation/Navbar/navbar.module.css","containers/Queue/queue.module.css","assets/images/oslometsvart.png","assets/images/oslomethvit.png","serviceWorker.js","store/actions/actionTypes.ts","constants/constants.ts","utilities/objectUtilities.js","store/reducers/authReducer.ts","store/reducers/queueReducer.ts","store/index.ts","axiosAPI.ts","store/actions/authActions.ts","httpHeaders/authHeader.ts","store/actions/queueActions.ts","components/UI/Modals/SwalModals/swalInfoModal.tsx","components/UI/Modals/SwalModals/swalLoginModal.tsx","components/Navigation/Navbar/navbar.tsx","components/Navigation/Navbar/navbarConnected.ts","higherOrderedComponents/Layout/layout.tsx","components/UI/Tables/TableHead/tableHead.tsx","components/UI/Buttons/buttons.tsx","components/UI/Tables/queueTable.tsx","components/UI/Inputs/input.tsx","components/UI/LoadingSpinner/loadingSpinner.tsx","hooks/useInterval.ts","containers/Queue/queue.tsx","containers/Queue/queueConnected.ts","app.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","AuthActionTypes","QueueActionTypes","FormElementType","updateObject","oldObject","updatedProperties","initialState","user","error","loading","authStart","state","action","authSuccess","authFail","authLogout","clearError","reducer","type","AUTH_START","AUTH_SUCCESS","AUTH_FAIL","AUTH_LOGOUT","CLEAR_ERROR","queueData","subjectData","initAction","failedAction","fetchQueueSuccess","addRemoveSuccess","fetchSubjectsSuccess","FETCH_QUEUE_START","ADD_TO_QUEUE_START","DELETE_FROM_QUEUE_START","DONE_IN_QUEUE_START","FETCH_SUBJECTS_START","FETCH_QUEUE_FAIL","ADD_TO_QUEUE_FAIL","DELETE_FROM_QUEUE_FAIL","DONE_IN_QUEUE_FAIL","FETCH_SUBJECTS_FAIL","FETCH_QUEUE_SUCCESS","ADD_TO_QUEUE_SUCCESS","DELETE_FROM_QUEUE_SUCCESS","DONE_IN_QUEUE_SUCCESS","FETCH_SUBJECTS_SUCCESS","rootReducer","combineReducers","auth","authReducer","queue","queueReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","API_BASE_PATH","productionObject","objectConditionalByEnvironment","USER_GUIDE_PATH","instance","axios","create","baseURL","logout","localStorage","removeItem","checkValidAuth","dispatch","getItem","JSON","parse","token","post","AUTH_PATH","then","response","data","username","password","setItem","stringify","catch","message","authHeader","USER","Authorization","fetchQueue","get","fetchQueueFail","addToQueue","queueEntity","addToQueueFail","deleteFromQueue","id","delete","headers","deleteFromQueueFail","doneInQueue","QUEUE_PATH","doneInQueueFail","fetchSubjects","fetchSubjectsFail","SwalInfoModal","props","title","contentText","url","hyperlinkText","mySwal","withReactContent","Swal","hyperlinkDiv","document","createElement","innerHTML","fire","html","footer","icon","confirmButtonText","SwalLoginModal","onLoginSubmit","clearLoginError","showLoaderOnConfirm","showCancelButton","cancelButtonColor","cancelButtonText","allowOutsideClick","isLoading","preConfirm","a","usernameInput","getPopup","querySelector","passwordInput","value","trim","showValidationMessage","result","isDismissed","Navbar","linkStyle","isAuthenticated","styles","authenticatedLinkText","defaultLinkText","navbarProps","expand","bg","variant","loginButton","Nav","Link","className","onClick","logoutHandler","Brand","invisibleOnMobile","brandImage","alt","src","require","authenticatedBrandText","brandText","Toggle","aria-controls","Collapse","NavbarConnected","connect","undefined","bindActionCreators","Layout","children","tableHead","columns","defaultColumns","forEach","column","push","key","scope","loggedInColumns","SubmitButton","disabled","ConfirmButton","DeleteButton","queueTable","confirmDoneEntity","deleteQueueEntity","userRoles","rows","i","rowId","cells","name","subject","digitalConsultation","includes","length","tableBody","Table","striped","bordered","hover","responsive","Input","forwardRef","ref","returnInput","passedElement","formElement","formClasses","inputType","INPUT","inputConfig","SELECT","options","map","option","String","displayValue","loadingSpinner","useInterval","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","Queue","useForm","register","handleSubmit","reset","errors","isSubmitSuccessful","formState","pollingFunction","useState","placeholder","validation","minLength","errorMessage","nameInput","subjectSelect","setSubjectSelect","yearSelect","digitalConsultationSelect","subjects","fillSubjectSelector","subjectListUpdated","table","formElements","form","onSubmit","formData","primitiveFormData","originalObject","convertedObject","Object","entries","isNaN","parseFloat","convertObjectStringsToPrimitives","firstname","studyYear","year","addQueueEntity","queueForm","style","margin","width","values","currentElement","required","roles","withRouter","autoLogin","getSubjectData","routes","path","exact","render","to","textAlign","store","createStore","applyMiddleware","thunk","app","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.d8542cb1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"brandText\":\"navbar_brandText__3XSWe\",\"brandImage\":\"navbar_brandImage__edego\",\"defaultLinkText\":\"navbar_defaultLinkText__2jzNV\",\"authenticatedBrandText\":\"navbar_authenticatedBrandText__3oLFp\",\"authenticatedLinkText\":\"navbar_authenticatedLinkText__g8guY\",\"invisibleOnMobile\":\"navbar_invisibleOnMobile__30ez-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"queueForm\":\"queue_queueForm__VAefN\"};","module.exports = __webpack_public_path__ + \"static/media/oslometsvart.3b9b0cc3.png\";","module.exports = __webpack_public_path__ + \"static/media/oslomethvit.2c306d99.png\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export enum AuthActionTypes {\r\n    AUTH_START = \"AUTH_START\",\r\n    AUTH_SUCCESS = \"AUTH_SUCCESS\",\r\n    AUTH_FAIL = \"AUTH_FAIL\",\r\n    AUTH_LOGOUT = \"AUTH_LOGOUT\",\r\n    CLEAR_ERROR = \"CLEAR_ERROR\",\r\n}\r\n\r\nexport enum QueueActionTypes {\r\n    FETCH_QUEUE_START = \"FETCH_QUEUE_START\",\r\n    FETCH_QUEUE_SUCCESS = \"FETCH_QUEUE_SUCCESS\",\r\n    FETCH_QUEUE_FAIL = \"FETCH_QUEUE_FAIL\",\r\n\r\n    ADD_TO_QUEUE_START = \"ADD_TO_QUEUE_START\",\r\n    ADD_TO_QUEUE_SUCCESS = \"ADD_TO_QUEUE_SUCCESS\",\r\n    ADD_TO_QUEUE_FAIL = \"ADD_TO_QUEUE_FAIL\",\r\n\r\n    DELETE_FROM_QUEUE_START = \"DELETE_FROM_QUEUE_START\",\r\n    DELETE_FROM_QUEUE_SUCCESS = \"DELETE_FROM_QUEUE_SUCCESS\",\r\n    DELETE_FROM_QUEUE_FAIL = \"DELETE_FROM_QUEUE_FAIL\",\r\n\r\n    DONE_IN_QUEUE_START = \"DONE_IN_QUEUE_START\",\r\n    DONE_IN_QUEUE_SUCCESS = \"DONE_IN_QUEUE_SUCCESS\",\r\n    DONE_IN_QUEUE_FAIL = \"DONE_IN_QUEUE_FAIL\",\r\n\r\n    FETCH_SUBJECTS_START = \"FETCH_SUBJECTS_START\",\r\n    FETCH_SUBJECTS_SUCCESS = \"FETCH_SUBJECTS_SUCCESS\",\r\n    FETCH_SUBJECTS_FAIL = \"FETCH_SUBJECTS_FAIL\",\r\n}","import {objectConditionalByEnvironment} from \"../utilities/objectUtilities\";\r\n\r\n/* ----- Authentication ------ */\r\nexport const LOCAL_STORAGE_USER = \"user\";\r\n\r\n/* ----- API ------ */\r\nexport const API_BASE_PATH = objectConditionalByEnvironment(\"http://localhost:8080/api/\", \"https://orakelqueueservice.herokuapp.com/api/\");\r\n\r\n//Queue\r\nexport const QUEUE_PATH = \"queue/\";\r\nexport const CONFIRM_DONE_PATH = QUEUE_PATH + \"confirmdone/\";\r\n\r\n//Subjects\r\nexport const SUBJECTS_PATH = \"subjects/\";\r\n\r\n//Auth\r\nexport const AUTH_PATH = \"auth/\";\r\nexport const LOGIN_PATH = AUTH_PATH + \"signin\";\r\nexport const CHECK_TOKEN_PATH = AUTH_PATH + \"isTokenValid\";\r\n\r\n//Resources\r\nexport const USER_GUIDE_PATH = API_BASE_PATH + \"resources/userguide\";\r\n\r\n/* ----- Routing ----- */\r\nexport const INDEX_ROUTE = \"/Orakel_Queue_Client/\";\r\n\r\n/* ----- Form Elements ----- */\r\nexport enum FormElementType {\r\n    SELECT = \"select\",\r\n    INPUT = \"input\",\r\n}\r\n\r\n\r\n//TODO Add all hardcoded string values to this file\r\n","export const updateObject = (oldObject, updatedProperties) => {\r\n    return {\r\n        ...oldObject,\r\n        ...updatedProperties\r\n    };\r\n};\r\n\r\n/**\r\n * Converts all string-values in a object which can be converted to boolean or number types to their respective primitive\r\n * datatype.\r\n *\r\n * At the time of writing, use cases for this function is when posting an object to the API, which expects primitives\r\n * rather than string values.\r\n *\r\n * @param originalObject The object which should have its string values converted to primitives.\r\n * @return A clone of the original object with its string values converted to primitives.\r\n */\r\nexport const convertObjectStringsToPrimitives = (originalObject) => {\r\n    const convertedObject = {...originalObject}\r\n\r\n    for (let [key, value] of Object.entries(convertedObject)) {\r\n        if (typeof value == \"string\") {\r\n\r\n            if (value === \"true\" || value === \"false\") {\r\n                convertedObject[key] = (value == \"true\");\r\n            }\r\n\r\n            if (!isNaN(value)) {\r\n                convertedObject[key] = parseFloat(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    return convertedObject;\r\n}\r\n\r\nexport const objectConditionalByEnvironment = (devObject = null, productionObject = null) => {\r\n    return process.env.NODE_ENV === \"production\" ? productionObject : devObject;\r\n};\r\n","import {AuthActionTypes} from \"../actions/actionTypes\";\r\nimport {updateObject} from \"../../utilities/objectUtilities\";\r\nimport {AuthAction, AuthState} from \"../types\";\r\n\r\nconst initialState: AuthState = {\r\n    user: null,\r\n    error: null,\r\n    loading: false\r\n};\r\n\r\nconst authStart = (state: AuthState, action: AuthAction): AuthState => {\r\n    return updateObject(state, {error: null, loading: true});\r\n};\r\n\r\nconst authSuccess = (state: AuthState, action: AuthAction): AuthState => {\r\n    return updateObject(state, {\r\n        user: action.user,\r\n        error: null,\r\n        loading: false\r\n    });\r\n};\r\n\r\nconst authFail = (state: AuthState, action: AuthAction): AuthState => {\r\n    return updateObject(state, {\r\n        error: action.error,\r\n        loading: false\r\n    });\r\n};\r\n\r\nconst authLogout = (state: AuthState, action: AuthAction): AuthState => {\r\n    return updateObject(state, {user: null});\r\n};\r\n\r\nconst clearError = (state: AuthState, action: AuthAction): AuthState => {\r\n    return updateObject(state, {error: null})\r\n}\r\n\r\nconst reducer = (state: AuthState = initialState, action: AuthAction) => {\r\n    switch(action.type) {\r\n        case AuthActionTypes.AUTH_START: return authStart(state, action);\r\n        case AuthActionTypes.AUTH_SUCCESS: return authSuccess(state, action);\r\n        case AuthActionTypes.AUTH_FAIL: return authFail(state, action);\r\n        case AuthActionTypes.AUTH_LOGOUT: return authLogout(state, action);\r\n        case AuthActionTypes.CLEAR_ERROR: return clearError(state, action);\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import {QueueActionTypes} from \"../actions/actionTypes\";\r\nimport {updateObject} from \"../../utilities/objectUtilities\";\r\nimport {QueueAction, QueueState} from \"../types\";\r\n\r\nconst initialState: QueueState = {\r\n    queueData: [],\r\n    subjectData: [],\r\n    error: null,\r\n    loading: false\r\n};\r\n\r\nconst initAction = (state: QueueState, action: QueueAction): QueueState => {\r\n    return updateObject(state, {error: null, loading: true});\r\n};\r\n\r\nconst failedAction = (state: QueueState, action: QueueAction): QueueState => {\r\n    return updateObject(state, {\r\n        error: action.error,\r\n        loading: false\r\n    })\r\n};\r\n\r\n/* ----- Fetch Queue Data ----- */\r\n\r\nconst fetchQueueSuccess = (state: QueueState, action: QueueAction): QueueState => {\r\n    return updateObject(state, {\r\n        queueData: action.queueData,\r\n        error: null,\r\n        loading: false\r\n    });\r\n};\r\n\r\n\r\n/* ----- Add, Delete and Remove in Queue ----- */\r\n\r\nconst addRemoveSuccess = (state: QueueState, action: QueueAction): QueueState => {\r\n    return updateObject(state, {\r\n        error: null,\r\n        loading: false\r\n    })\r\n};\r\n\r\n/* ----- Fetch Subject Data ----- */\r\n\r\nconst fetchSubjectsSuccess = (state: QueueState, action: QueueAction): QueueState => {\r\n    return updateObject(state, {\r\n        subjectData: action.subjectData,\r\n        error: null,\r\n        loading: false\r\n    })\r\n};\r\n\r\nconst reducer = (state: QueueState = initialState, action: QueueAction): QueueState => {\r\n    switch (action.type) {\r\n\r\n        //Start cases\r\n        case QueueActionTypes.FETCH_QUEUE_START:\r\n        case QueueActionTypes.ADD_TO_QUEUE_START:\r\n        case QueueActionTypes.DELETE_FROM_QUEUE_START:\r\n        case QueueActionTypes.DONE_IN_QUEUE_START:\r\n        case QueueActionTypes.FETCH_SUBJECTS_START:\r\n            return initAction(state, action);\r\n\r\n        //Fail cases\r\n        case QueueActionTypes.FETCH_QUEUE_FAIL:\r\n        case QueueActionTypes.ADD_TO_QUEUE_FAIL:\r\n        case QueueActionTypes.DELETE_FROM_QUEUE_FAIL:\r\n        case QueueActionTypes.DONE_IN_QUEUE_FAIL:\r\n        case QueueActionTypes.FETCH_SUBJECTS_FAIL:\r\n            return failedAction(state, action);\r\n\r\n        //Success cases\r\n        case QueueActionTypes.FETCH_QUEUE_SUCCESS:\r\n            return fetchQueueSuccess(state, action);\r\n\r\n        case QueueActionTypes.ADD_TO_QUEUE_SUCCESS:\r\n        case QueueActionTypes.DELETE_FROM_QUEUE_SUCCESS:\r\n        case QueueActionTypes.DONE_IN_QUEUE_SUCCESS:\r\n            return addRemoveSuccess(state, action);\r\n\r\n        case QueueActionTypes.FETCH_SUBJECTS_SUCCESS:\r\n            return fetchSubjectsSuccess(state, action);\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import {combineReducers, compose} from \"redux\";\r\nimport authReducer from \"./reducers/authReducer\";\r\nimport queueReducer from \"./reducers/queueReducer\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\nexport const rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    queue: queueReducer\r\n});\r\n\r\nexport const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>","import axios from \"axios\";\r\nimport {API_BASE_PATH} from \"./constants/constants\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: API_BASE_PATH\r\n});\r\n\r\nexport default instance;","import axios from \"../../axiosAPI\";\r\nimport {AuthActionTypes} from \"./actionTypes\";\r\nimport {LOGIN_PATH, CHECK_TOKEN_PATH, LOCAL_STORAGE_USER} from \"../../constants/constants\";\r\nimport {AuthDispatch, IUser} from \"../types\";\r\n\r\nconst authStart = () => {\r\n    return {\r\n        type: AuthActionTypes.AUTH_START\r\n    }\r\n};\r\n\r\nconst authSuccess = (user: IUser) => {\r\n    return {\r\n        type: AuthActionTypes.AUTH_SUCCESS,\r\n        user: user\r\n    }\r\n};\r\n\r\nconst authFail = (error: string) => {\r\n    return {\r\n        type: AuthActionTypes.AUTH_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nconst getCurrentUser = (): IUser | null => {\r\n    if (localStorage.getItem(LOCAL_STORAGE_USER)) {\r\n        return JSON.parse(localStorage.getItem(LOCAL_STORAGE_USER)!);\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem(LOCAL_STORAGE_USER);\r\n\r\n    return {\r\n        type: AuthActionTypes.AUTH_LOGOUT\r\n    }\r\n};\r\n\r\nexport const checkValidAuth = () => {\r\n    return (dispatch: AuthDispatch) => {\r\n        const user = getCurrentUser();\r\n\r\n        if (user && user.token) {\r\n            axios.post(CHECK_TOKEN_PATH, user.token).then(response => {\r\n                if (response.data === true) {\r\n                    dispatch(authSuccess(user))\r\n                } else {\r\n                    dispatch(logout())\r\n                }\r\n            });\r\n        } else {\r\n            dispatch(logout())\r\n        }\r\n    }\r\n};\r\n\r\nexport const auth = (username: string, password: string) => {\r\n    return (dispatch: AuthDispatch) => {\r\n        dispatch(authStart());\r\n\r\n        return axios.post(LOGIN_PATH, {username, password})\r\n            .then(response => {\r\n                if (response.data.token) {\r\n                    localStorage.setItem(LOCAL_STORAGE_USER, JSON.stringify(response.data));\r\n                    dispatch(authSuccess(response.data));\r\n                    return true\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch(authFail(error.response.data.message))\r\n                return false;\r\n            });\r\n    }\r\n};\r\n\r\nexport const clearError = () => {\r\n    return {\r\n        type: AuthActionTypes.CLEAR_ERROR\r\n    }\r\n}","import {LOCAL_STORAGE_USER} from \"../constants/constants\";\r\n\r\n//TODO Create of find a type for Authorization headers.\r\nconst authHeader = () => {\r\n\r\n    const USER = JSON.parse(localStorage.getItem(LOCAL_STORAGE_USER)!);\r\n\r\n    if (USER && USER.token) {\r\n        return { Authorization: \"Bearer \" + USER.token };\r\n    } else {\r\n        return {};\r\n    }\r\n}\r\n\r\nexport default authHeader;\r\n","import axios from \"../../axiosAPI\";\r\nimport {QueueActionTypes} from \"./actionTypes\";\r\nimport {CONFIRM_DONE_PATH, QUEUE_PATH, SUBJECTS_PATH} from \"../../constants/constants\";\r\nimport authHeader from \"../../httpHeaders/authHeader\";\r\nimport {QueueDispatch} from \"../types\";\r\n\r\n/* ----- Fetch Queue Data ----- */\r\n\r\nconst fetchQueueStart = () => {\r\n    return {\r\n        type: QueueActionTypes.FETCH_QUEUE_START\r\n    }\r\n};\r\n\r\nconst fetchQueueSuccess = (queueData: Array<IQueueEntity>) => {\r\n    return {\r\n        type: QueueActionTypes.FETCH_QUEUE_SUCCESS,\r\n        queueData: queueData\r\n    }\r\n};\r\n\r\nconst fetchQueueFail = (error: string) => {\r\n    return {\r\n        type: QueueActionTypes.FETCH_QUEUE_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nexport const fetchQueue = () => {\r\n    return (dispatch: QueueDispatch) => {\r\n        dispatch(fetchQueueStart());\r\n\r\n        axios.get(QUEUE_PATH)\r\n            .then(response => {\r\n                dispatch(fetchQueueSuccess(response.data))\r\n            })\r\n            .catch(error => {\r\n                dispatch(fetchQueueFail(error.response))\r\n            })\r\n    }\r\n};\r\n\r\n/* ----- Add to Queue ----- */\r\n\r\nconst addToQueueStart = () => {\r\n    return {\r\n        type: QueueActionTypes.ADD_TO_QUEUE_START\r\n    }\r\n};\r\n\r\nconst addToQueueSuccess = () => {\r\n    return {\r\n        type: QueueActionTypes.ADD_TO_QUEUE_SUCCESS\r\n    }\r\n};\r\n\r\nconst addToQueueFail = (error: string) => {\r\n    return {\r\n        type: QueueActionTypes.ADD_TO_QUEUE_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nexport const addToQueue = (queueEntity: IQueueEntity) => {\r\n    return (dispatch: QueueDispatch) => {\r\n        dispatch(addToQueueStart());\r\n        axios.post(QUEUE_PATH, queueEntity)\r\n            .then(() => {\r\n                dispatch(addToQueueSuccess());\r\n                dispatch(fetchQueue());\r\n            })\r\n            .catch(error => {\r\n                dispatch(addToQueueFail(error.response));\r\n            });\r\n    }\r\n};\r\n\r\n/* ----- Delete From Queue ----- */\r\n\r\nconst deleteFromQueueStart = () => {\r\n    return {\r\n        type: QueueActionTypes.DELETE_FROM_QUEUE_START\r\n    }\r\n};\r\n\r\nconst deleteFromQueueSuccess = () => {\r\n    return {\r\n        type: QueueActionTypes.DELETE_FROM_QUEUE_SUCCESS\r\n    }\r\n};\r\n\r\nconst deleteFromQueueFail = (error: string) => {\r\n    return {\r\n        type: QueueActionTypes.DELETE_FROM_QUEUE_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nexport const deleteFromQueue = (id: string) => {\r\n    return (dispatch: QueueDispatch) => {\r\n        dispatch(deleteFromQueueStart());\r\n\r\n        axios.delete(QUEUE_PATH + id, {headers: authHeader()})\r\n            .then(() => {\r\n                dispatch(deleteFromQueueSuccess());\r\n                dispatch(fetchQueue());\r\n            })\r\n            .catch(error => {\r\n                dispatch(deleteFromQueueFail(error.response));\r\n            });\r\n    }\r\n};\r\n\r\n/* ----- Done in Queue ----- */\r\n\r\nconst doneInQueueStart = () => {\r\n    return {\r\n        type: QueueActionTypes.DONE_IN_QUEUE_START\r\n    }\r\n};\r\n\r\nconst doneInQueueSuccess = () => {\r\n    return {\r\n        type: QueueActionTypes.DONE_IN_QUEUE_SUCCESS\r\n    }\r\n};\r\n\r\nconst doneInQueueFail = (error: string) => {\r\n    return {\r\n        type: QueueActionTypes.DONE_IN_QUEUE_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nexport const doneInQueue = (id: string) => {\r\n    return (dispatch: QueueDispatch) => {\r\n        dispatch(doneInQueueStart());\r\n\r\n        axios.post(CONFIRM_DONE_PATH + id, null, {headers: authHeader()})\r\n            .then(() => {\r\n                dispatch(doneInQueueSuccess());\r\n                dispatch(fetchQueue());\r\n            })\r\n            .catch(error => {\r\n                dispatch(doneInQueueFail(error.response));\r\n            });\r\n    }\r\n};\r\n\r\n/* ----- Fetch Subjects ----- */\r\n\r\nconst fetchSubjectsStart = () => {\r\n    return {\r\n        type: QueueActionTypes.FETCH_SUBJECTS_START\r\n    }\r\n};\r\n\r\nconst fetchSubjectsSuccess = (subjectData: Array<string>) => {\r\n    return {\r\n        type: QueueActionTypes.FETCH_SUBJECTS_SUCCESS,\r\n        subjectData: subjectData\r\n    }\r\n};\r\n\r\nconst fetchSubjectsFail = (error: string) => {\r\n    return {\r\n        type: QueueActionTypes.FETCH_SUBJECTS_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nexport const fetchSubjects = () => {\r\n    return (dispatch: QueueDispatch) => {\r\n        dispatch(fetchSubjectsStart());\r\n\r\n        axios.get(SUBJECTS_PATH)\r\n            .then(response => {\r\n                dispatch(fetchSubjectsSuccess(response.data));\r\n            }).catch(error => {\r\n            dispatch(fetchSubjectsFail(error.response));\r\n        });\r\n    }\r\n};","import Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport React from \"react\";\r\n\r\ntype Props = {\r\n    title: string,\r\n    contentText: string,\r\n    url: string | null,\r\n    hyperlinkText: string | null\r\n}\r\n\r\nconst SwalInfoModal = (props: Props) => {\r\n    const {title, contentText, url, hyperlinkText} = props;\r\n    const mySwal = withReactContent(Swal)\r\n    const hyperlinkDiv: HTMLDivElement = document.createElement(\"div\");\r\n\r\n    if (url && hyperlinkText) {\r\n        hyperlinkDiv.innerHTML = `<strong><a href=\"${url}\" target=\"_blank\">${hyperlinkText}</a></strong>`;\r\n    }\r\n\r\n    return mySwal.fire({\r\n            title: title,\r\n            html: contentText,\r\n            footer: url && hyperlinkText ? hyperlinkDiv : null,\r\n            icon: \"info\",\r\n            confirmButtonText: \"Lukk\"\r\n    });\r\n};\r\n\r\nexport default SwalInfoModal","import Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\n\r\ntype Props = {\r\n    onLoginSubmit: Function,\r\n    clearLoginError: Function,\r\n}\r\n\r\nconst SwalLoginModal = (props: Props) => {\r\n    const {onLoginSubmit, clearLoginError} = props;\r\n    const mySwal = withReactContent(Swal)\r\n\r\n    return mySwal.fire({\r\n        title: \"Orakel Innlogging\",\r\n        html: `<input type=\"text\" id=\"login\" class=\"swal2-input\" placeholder=\"Brukernavn\">\r\n                        <input type=\"password\" id=\"password\" class=\"swal2-input\" placeholder=\"Passord\">`,\r\n        confirmButtonText: \"Logg Inn\",\r\n        showLoaderOnConfirm: true,\r\n        showCancelButton: true,\r\n        cancelButtonColor: \"#d33\",\r\n        cancelButtonText: \"Avbryt\",\r\n        allowOutsideClick: () => !mySwal.isLoading(),\r\n        preConfirm: async() => {\r\n            const usernameInput = mySwal.getPopup()!.querySelector(\"#login\")! as HTMLInputElement\r\n            const passwordInput = mySwal.getPopup()!.querySelector(\"#password\")! as HTMLInputElement\r\n\r\n            const username = usernameInput.value.trim()\r\n            const password = passwordInput.value.trim()\r\n\r\n            if (!username || !password) {\r\n                mySwal.showValidationMessage(\"Oppgi brukernavn og passord!\");\r\n                return false;\r\n            }\r\n\r\n            const successfulLogin = await onLoginSubmit(username, password);\r\n            if (!successfulLogin) {\r\n                mySwal.showValidationMessage(\"Ugyldig brukernavn eller passord!\");\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n    }).then((result) => {\r\n        if (result.isDismissed) {\r\n            clearLoginError()\r\n        }\r\n    })\r\n};\r\n\r\nexport default SwalLoginModal","import React, {MouseEventHandler} from \"react\";\r\nimport {Navbar as BootsrapNav, NavbarProps as BootstrapNavProps} from \"react-bootstrap\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\n\r\nimport styles from \"./navbar.module.css\";\r\n\r\nimport {USER_GUIDE_PATH} from \"../../../constants/constants\";\r\n\r\nimport SwalInfoModal from \"../../UI/Modals/SwalModals/swalInfoModal\";\r\nimport SwalLoginModal from \"../../UI/Modals/SwalModals/swalLoginModal\";\r\n\r\ntype Props = {\r\n    onLoginSubmit: Function;\r\n    clearLoginError: Function;\r\n    logoutHandler: MouseEventHandler;\r\n    isAuthenticated: boolean;\r\n}\r\n\r\nconst Navbar: React.FC<Props> = (props) => {\r\n\r\n    const showDiscordMessage = () =>\r\n        SwalInfoModal({\r\n            title: \"Discord\",\r\n            contentText: \"For digital veiledning benytter vi oss av Discord, og har vår egen server til dette. Inne på serveren setter vi pris på om du leser informasjonen i tekstkanalen kalt informasjon, og vi anbefaler alle å laste ned klienten deres i stedet for å bruke tjenesten gjennom nettleseren.\",\r\n            url: \"https://discord.gg/jgzqYpX\",\r\n            hyperlinkText: \"Orakel Discord\"})\r\n\r\n    const showErrorReportingMessage = () =>\r\n        SwalInfoModal({\r\n            title: \"Feilrapportering\",\r\n            contentText: \"Orakels køsystem er et fritidsprosjekt som er bygget og vedlikeholdt av en person. Det er derfor en viss fare for bugs og feil. Disse kan rapporteres ved å legge inn en issue på GitHub-repoet, eller ved å ta kontakt med Fredrik Pedersen. Vi setter også pris på ønsker om tilleggsfunksjonalitet :)\",\r\n            url: \"https://github.com/OrakelOsloMet/Orakel_Queue_Client/issues\",\r\n            hyperlinkText: \"GitHub Repo\"})\r\n\r\n    const showAboutMessage = () =>\r\n        SwalInfoModal({\r\n        title: \"Om Orakels Køsystem\",\r\n        contentText: \"Coming Soon!\",\r\n        url: USER_GUIDE_PATH,\r\n        hyperlinkText: \"Brukerveiledning\"})\r\n\r\n    const swalLogin = () => {\r\n        SwalLoginModal({onLoginSubmit: props.onLoginSubmit, clearLoginError: props.clearLoginError})\r\n    }\r\n\r\n    const linkStyle = props.isAuthenticated ? styles.authenticatedLinkText : styles.defaultLinkText;\r\n    const navbarProps: BootstrapNavProps = props.isAuthenticated ? {expand: \"lg\", bg: \"warning\"} : {variant: \"dark\", expand: \"lg\", bg: \"primary\"};\r\n\r\n    const loginButton =\r\n        <Nav.Link\r\n            className={linkStyle}\r\n            onClick={props.isAuthenticated ? props.logoutHandler : swalLogin}>\r\n            {props.isAuthenticated ? \"Logg Ut\" : \"Admin\"}\r\n        </Nav.Link>;\r\n\r\n    return (\r\n        <BootsrapNav {...navbarProps}>\r\n            <BootsrapNav.Brand className={styles.invisibleOnMobile}>\r\n                <img\r\n                    className={styles.brandImage}\r\n                    alt=\"OsloMet Logo\"\r\n                    src={require(props.isAuthenticated ? \"../../../assets/images/oslometsvart.png\" : \"../../../assets/images/oslomethvit.png\")}\r\n                />\r\n            </BootsrapNav.Brand>\r\n            <BootsrapNav.Brand\r\n                className={props.isAuthenticated ? styles.authenticatedBrandText : styles.brandText}>Orakel</BootsrapNav.Brand>\r\n            <BootsrapNav.Toggle aria-controls=\"responsive-navbar-nav\"/>\r\n            <BootsrapNav.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav>\r\n                    <Nav.Link className={linkStyle} onClick={showDiscordMessage}>Discord</Nav.Link>\r\n                    <Nav.Link className={linkStyle} onClick={showErrorReportingMessage}>Feilrapportering</Nav.Link>\r\n                    <Nav.Link className={linkStyle} onClick={showAboutMessage}>Om</Nav.Link>\r\n                    {loginButton}\r\n                </Nav>\r\n            </BootsrapNav.Collapse>\r\n        </BootsrapNav>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import {RootState} from \"../../../store\";\r\nimport {bindActionCreators, Dispatch} from \"redux\";\r\nimport {auth, clearError, logout} from \"../../../store/actions/authActions\";\r\nimport {connect} from \"react-redux\";\r\nimport Navbar from \"./navbar\";\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n    return {\r\n        isAuthenticated: state.auth.user?.token !== undefined\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return bindActionCreators({\r\n        onLoginSubmit: auth,\r\n        clearLoginError: clearError,\r\n        logoutHandler: logout\r\n    }, dispatch);\r\n}\r\n\r\nexport const NavbarConnected = connect(mapStateToProps, mapDispatchToProps)(Navbar);\r\n","import React, {FC} from 'react';\r\nimport {NavbarConnected} from \"../../components/Navigation/Navbar/navbarConnected\";\r\n\r\nconst Layout: FC = (props) => {\r\n\r\n        return(\r\n            <>\r\n                <NavbarConnected/>\r\n                <main className=\"mb-5\">\r\n                    {props.children}\r\n                </main>\r\n            </>\r\n        );\r\n}\r\n\r\nexport default Layout;","import React from \"react\";\r\n\r\ntype Props = {\r\n    defaultColumns: Array<string>,\r\n    loggedInColumns: Array<string>,\r\n    isAuthenticated: boolean\r\n}\r\n\r\nconst tableHead = (props: Props) => {\r\n\r\n    let columns: Array<JSX.Element> = [];\r\n    props.defaultColumns.forEach(column => {\r\n        columns.push(<th key={`${column} Header`} scope=\"col\">{column}</th>);\r\n    });\r\n\r\n    if (props.isAuthenticated) {\r\n        props.loggedInColumns.forEach(column => {\r\n            columns.push(<th key={`${column} Header`} scope=\"col\">{column}</th>);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <thead key={\"tableHead\"} className=\"thead-dark\">\r\n        <tr>\r\n            {columns}\r\n        </tr>\r\n        </thead>\r\n    );\r\n};\r\n\r\nexport default tableHead;","import React, {MouseEventHandler, FunctionComponent} from 'react';\r\n\r\ntype Props = {\r\n    onClick?: MouseEventHandler,\r\n    className?: string,\r\n    disabled?: boolean,\r\n}\r\n\r\nexport const SubmitButton: FunctionComponent<Props> = (props) =>\r\n    <button\r\n        type=\"submit\"\r\n        disabled={props.disabled}\r\n        className={`btn btn-primary ${props.className}`}\r\n        onClick={props.onClick}>{props.children}\r\n    </button>\r\n\r\nexport const CancelButton: FunctionComponent<Props> = (props) => (\r\n    <button\r\n        disabled={props.disabled}\r\n        className={`btn btn-danger ${props.className}`}\r\n        onClick={props.onClick}>{props.children}</button>\r\n);\r\n\r\nexport const ConfirmButton: FunctionComponent<Props> = (props) => (\r\n    <button\r\n        disabled={props.disabled}\r\n        className={`btn btn-success ${props.className}`}\r\n        onClick={props.onClick}>{props.children}</button>\r\n);\r\n\r\nexport const DeleteButton: FunctionComponent<Props> = (props) => (\r\n    <button\r\n        disabled={props.disabled}\r\n        className={`btn btn-danger ${props.className}`}\r\n        onClick={props.onClick}>{props.children}</button>\r\n);","import React from \"react\";\r\nimport {Table} from \"react-bootstrap\";\r\nimport TableHead from \"./TableHead/tableHead\";\r\nimport {ConfirmButton, DeleteButton} from \"../Buttons/buttons\";\r\n\r\nimport * as actions from \"../../../store/actions/actionIndex\";\r\n\r\ntype Props = {\r\n    queueData: Array<IQueueEntity>,\r\n    confirmDoneEntity: Function,\r\n    deleteQueueEntity: Function,\r\n    isAuthenticated: boolean,\r\n    userRoles: Array<string>,\r\n    defaultColumns: Array<string>,\r\n    loggedInColumns: Array<string>\r\n}\r\n\r\nconst queueTable = (props: Props) => {\r\n\r\n    /* ----- Create Table Body ----- */\r\n    const {queueData, confirmDoneEntity, deleteQueueEntity, isAuthenticated, userRoles, defaultColumns, loggedInColumns} = props;\r\n    let rows = [];\r\n\r\n    for (let i = 0; i < queueData.length; i++) {\r\n        let rowId = \"row\" + i;\r\n\r\n        let cells = [];\r\n        cells.push(<td key={\"entry\" + i} id={\"entry\" + i}># {i + 1}</td>);\r\n        cells.push(<td key={\"name\" + i} id={\"name\" + i}>{queueData[i].name}</td>);\r\n        cells.push(<td key={\"subject\" + i} id={\"subject\" + i}>{queueData[i].subject}</td>);\r\n        cells.push(<td key={\"discord\" + i} id={\"discord\" + i}>{!queueData[i].digitalConsultation ? \"Datatorget\" : \"Discord\"}</td>);\r\n\r\n        if (isAuthenticated && userRoles.includes(\"ROLE_ADMIN\")) {\r\n                cells.push(<td key={\"actions\" + i} id={\"action\" + i}>{\r\n                    <>\r\n                        <ConfirmButton onClick={() => confirmDoneEntity(queueData[i].id)}>Ferdig</ConfirmButton>\r\n                        <DeleteButton className=\"ml-2\" onClick={() => deleteQueueEntity(queueData[i].id)}>Slett</DeleteButton>\r\n                    </>\r\n                }</td>);\r\n        }\r\n        rows.push(<tr key={i} id={rowId}>{cells}</tr>);\r\n    }\r\n\r\n    const tableHead = <TableHead defaultColumns={defaultColumns} loggedInColumns={loggedInColumns} isAuthenticated={isAuthenticated}/>;\r\n    const tableBody = <tbody>{rows}</tbody>;\r\n\r\n    return (\r\n        <Table striped bordered hover responsive className=\"mb-4\">{tableHead}{tableBody}</Table>\r\n    );\r\n};\r\n\r\nexport default queueTable;","import React, {forwardRef} from \"react\";\r\nimport {IConfiguredInput, IConfiguredSelect, IConfiguredTextInput} from \"../../../models/inputModels\";\r\nimport {FormElementType} from \"../../../constants/constants\";\r\n\r\ntype Props = {\r\n    formElement: IConfiguredInput\r\n    error: string\r\n}\r\n\r\nconst Input = forwardRef((props: Props, ref: React.Ref<any>) => {\r\n    const {formElement, error} = props;\r\n    let formClasses = \"form-control ml-2 mr-2 mt-2 \";\r\n    let returnInput;\r\n    let passedElement;\r\n\r\n    switch (formElement.inputType) {\r\n        case(FormElementType.INPUT):\r\n            passedElement = formElement as IConfiguredTextInput\r\n\r\n            if (error) {\r\n                formClasses += \"is-invalid\";\r\n            }\r\n\r\n            returnInput = <input\r\n                name={passedElement.name}\r\n                ref={ref}\r\n                className={formClasses}\r\n                {...passedElement.inputConfig}/>;\r\n            break;\r\n\r\n        case(FormElementType.SELECT):\r\n            passedElement = formElement as IConfiguredSelect\r\n\r\n            returnInput = <select\r\n                name={formElement.name}\r\n                ref={ref}\r\n                className={formClasses}>\r\n                {passedElement.inputConfig.options.map(option => (\r\n                    <option key={String(option.value)} value={String(option.value)}>\r\n                        {option.displayValue}\r\n                    </option>\r\n                ))}\r\n            </select>;\r\n            break;\r\n\r\n        default:\r\n            returnInput = <input\r\n                className=\"form-control\"/>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {returnInput}\r\n        </>\r\n\r\n    )\r\n});\r\n\r\nexport default Input;","import React from \"react\";\r\n\r\nconst loadingSpinner = () => (\r\n    <div className=\"spinner-border text-primary\"></div>\r\n);\r\n\r\nexport default loadingSpinner;","import {useRef, useEffect} from 'react'\r\n\r\n//Taken from https://usehooks-typescript.com/react-hook/use-interval\r\nconst useInterval = (callback: () => void, delay: number | null) => {\r\n\r\n    const savedCallback = useRef<() => void | null>()\r\n\r\n    // Remember the latest callback.\r\n    useEffect(() => {\r\n        savedCallback.current = callback\r\n    })\r\n\r\n    // Set up the interval.\r\n    useEffect(() => {\r\n        const tick = () => {\r\n            if (typeof savedCallback?.current !== 'undefined') {\r\n                savedCallback?.current()\r\n            }\r\n        }\r\n\r\n        if (delay !== null) {\r\n            const id = setInterval(tick, delay)\r\n            return () => clearInterval(id)\r\n        }\r\n    }, [delay])\r\n}\r\n\r\nexport default useInterval","import React, {FC, Ref, useEffect, useState} from \"react\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport styles from \"./queue.module.css\"\r\n\r\nimport {FormElementType} from \"../../constants/constants\";\r\nimport Table from \"../../components/UI/Tables/queueTable\";\r\nimport {SubmitButton} from \"../../components/UI/Buttons/buttons\";\r\nimport {convertObjectStringsToPrimitives} from \"../../utilities/objectUtilities\";\r\nimport Input from \"../../components/UI/Inputs/input\"\r\nimport {IConfiguredSelect, IConfiguredTextInput} from \"../../models/inputModels\";\r\nimport LoadingSpinner from \"../../components/UI/LoadingSpinner/loadingSpinner\";\r\nimport useInterval from \"../../hooks/useInterval\";\r\n\r\ntype Props = {\r\n    isAuthenticated: boolean;\r\n    userRoles: Array<string>;\r\n    queueData: Array<IQueueEntity>;\r\n    subjects: Array<string>;\r\n    loading: boolean;\r\n    error: string | null;\r\n    addQueueEntity: Function;\r\n    deleteQueueEntity: Function;\r\n    confirmDoneEntity: Function;\r\n    pollingFunction: Function\r\n}\r\n\r\nconst Queue: FC<Props> = (props) => {\r\n    const {register, handleSubmit, reset, errors, formState: {isSubmitSuccessful}} = useForm();\r\n\r\n    //Make the Queue update a 5 second interval\r\n    useInterval(() => {\r\n        props.pollingFunction()\r\n    }, 5000);\r\n\r\n    const [nameInput, setNameInput] = useState<IConfiguredTextInput>({\r\n        name: \"firstname\",\r\n        inputType: FormElementType.INPUT,\r\n        inputConfig: {\r\n            type: \"text\",\r\n            placeholder: \"Fornavn\"\r\n        },\r\n        validation: {\r\n            minLength: 3,\r\n            errorMessage: \"Vennligst oppgi et fornavn på minst 3 bokstaver\"\r\n        }\r\n    })\r\n\r\n    const [subjectSelect, setSubjectSelect] = useState<IConfiguredSelect>({\r\n        name: \"subject\",\r\n        inputType: FormElementType.SELECT,\r\n        inputConfig: {\r\n            options: [\r\n                {value: \"Loading\", displayValue: \"Loading\"}\r\n            ]\r\n        }\r\n    });\r\n\r\n    const [yearSelect, setYearSelect] = useState<IConfiguredSelect>({\r\n        name: \"year\",\r\n        inputType: FormElementType.SELECT,\r\n        inputConfig: {\r\n            options: [\r\n                {value: 1, displayValue: \"1. år\"},\r\n                {value: 2, displayValue: \"2. år\"},\r\n                {value: 3, displayValue: \"3. år\"}\r\n            ]\r\n        }\r\n    })\r\n\r\n    const [digitalConsultationSelect, setDigitalConsultationSelect] = useState<IConfiguredSelect>({\r\n        name: \"digitalConsultation\",\r\n        inputType: FormElementType.SELECT,\r\n        inputConfig: {\r\n            options: [\r\n                {value: false, displayValue: \"Fysisk Veiledning (Datatorget)\"},\r\n                {value: true, displayValue: \"Digital Veiledning (Discord)\"}\r\n            ]\r\n        }\r\n    })\r\n\r\n    //Use effect only to be triggered when the component is first rendered.\r\n    useEffect(() => {\r\n        props.pollingFunction();\r\n        if (props.subjects.length > 0) {\r\n            fillSubjectSelector();\r\n        }\r\n    }, [props.subjects])\r\n\r\n    //Use effect to run whenever the form is submitted successfully.\r\n    useEffect(() => {\r\n        if (isSubmitSuccessful) {\r\n            reset();\r\n        }\r\n    }, [isSubmitSuccessful, reset])\r\n\r\n    const fillSubjectSelector = () => {\r\n        const subjectListUpdated = {...subjectSelect};\r\n        subjectListUpdated.inputConfig.options = [];\r\n\r\n        props.subjects?.forEach(subject => {\r\n            subjectListUpdated.inputConfig.options.push({value: subject, displayValue: subject});\r\n        });\r\n\r\n        setSubjectSelect(subjectListUpdated);\r\n    };\r\n\r\n    const registrationHandler = (formData: any) => {\r\n        const primitiveFormData = convertObjectStringsToPrimitives(formData);\r\n        const queueEntity = {\r\n            name: primitiveFormData.firstname,\r\n            subject: primitiveFormData.subject,\r\n            digitalConsultation: primitiveFormData.digitalConsultation,\r\n            studyYear: primitiveFormData.year\r\n        };\r\n\r\n        props.addQueueEntity(queueEntity);\r\n    };\r\n\r\n    /* ----- Create Table ----- */\r\n    let table = props.queueData === undefined ? <LoadingSpinner/> : <Table\r\n        defaultColumns={[\"Plassering\", \"Navn\", \"Emne\", \"Arena\"]}\r\n        loggedInColumns={[\"Handlinger\"]}\r\n        queueData={props.queueData}\r\n        isAuthenticated={props.isAuthenticated}\r\n        userRoles={props.userRoles}\r\n        confirmDoneEntity={props.confirmDoneEntity}\r\n        deleteQueueEntity={props.deleteQueueEntity}\r\n    />;\r\n\r\n    const formElements = {nameInput, subjectSelect, yearSelect, digitalConsultationSelect}\r\n    const form = <form onSubmit={handleSubmit(registrationHandler)}\r\n                       className={\"form-inline mt-5 mb-5 \" + styles.queueForm} style={{margin: \"auto\", width: \"50%\"}}>\r\n        {Object.values(formElements).map(formElement => {\r\n\r\n            let forwardRef: Ref<any> = register\r\n            if (formElement.inputType === FormElementType.INPUT) {\r\n                let currentElement = formElement as IConfiguredTextInput\r\n                forwardRef = register({\r\n                    required: currentElement.validation.errorMessage,\r\n                    minLength: {value: currentElement.validation.minLength, message: currentElement.validation.errorMessage}\r\n                })\r\n            }\r\n\r\n            return (\r\n                <Input\r\n                    key={formElement.name}\r\n                    formElement={formElement}\r\n                    ref={forwardRef}\r\n                    error={errors.firstname}\r\n                />\r\n            )\r\n        })}\r\n\r\n        <SubmitButton className={\"ml-2 mr-2 mt-2\"}>Registrer</SubmitButton>\r\n    </form>\r\n\r\n    return (\r\n        <>\r\n            {form}\r\n            {table}\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default Queue","import {RootState} from \"../../store\";\r\nimport {bindActionCreators, Dispatch} from \"redux\";\r\nimport {addToQueue, deleteFromQueue, doneInQueue, fetchQueue} from \"../../store/actions/queueActions\";\r\nimport {connect} from \"react-redux\";\r\nimport Queue from \"./queue\";\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n    return {\r\n        isAuthenticated: state.auth.user?.token != null,\r\n        userRoles: state.auth.user ? state.auth.user.roles : [],\r\n        queueData: state.queue.queueData,\r\n        subjects: state.queue.subjectData,\r\n        loading: state.queue.loading,\r\n        error: state.queue.error\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return bindActionCreators({\r\n        addQueueEntity: addToQueue,\r\n        deleteQueueEntity: deleteFromQueue,\r\n        confirmDoneEntity: doneInQueue,\r\n        pollingFunction: fetchQueue\r\n    }, dispatch);\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Queue);","import React, {useEffect} from 'react';\r\nimport {Route, Switch, withRouter, Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {checkValidAuth, fetchSubjects} from \"./store/actions/actionIndex\";\r\n\r\nimport Layout from \"./higherOrderedComponents/Layout/layout\";\r\nimport QueueConnected from \"./containers/Queue/queueConnected\";\r\nimport {INDEX_ROUTE} from \"./constants/constants\";\r\nimport {bindActionCreators, Dispatch} from \"redux\";\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return bindActionCreators({\r\n        autoLogin: checkValidAuth,\r\n        getSubjectData: fetchSubjects\r\n    }, dispatch);\r\n};\r\n\r\ntype Props = ReturnType<typeof mapDispatchToProps>;\r\n\r\nconst App: React.FC<Props> = (props: Props) => {\r\n    const {autoLogin, getSubjectData} = props;\r\n\r\n    useEffect(() => {\r\n        autoLogin();\r\n        getSubjectData();\r\n    },[]);\r\n\r\n    let routes = (\r\n        <Switch>\r\n            <Route path={INDEX_ROUTE} exact render={() => (<QueueConnected/>)}/>\r\n            <Redirect to={INDEX_ROUTE}/>\r\n        </Switch>\r\n    );\r\n\r\n    return (\r\n        <div style={{textAlign: \"center\"}}>\r\n            <Layout>\r\n                {routes}\r\n            </Layout>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(connect(null, mapDispatchToProps)(App));\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {createStore, applyMiddleware} from \"redux\";\r\nimport {Provider} from \"react-redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {rootReducer, composeEnhancers} from \"./store\";\r\n\r\nimport App from './app';\r\nimport './index.css';\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nconst app = (\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n    </Provider>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById(\"root\"));\r\nserviceWorker.unregister();"],"sourceRoot":""}