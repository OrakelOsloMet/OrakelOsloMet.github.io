{"version":3,"sources":["serviceWorker.js","components/Navigation/Navbar/Navbar.js","utilities/objectUtilities.js","utilities/formUtilities.js","components/UI/Input/Input.js","components/UI/Button/Button.js","components/UI/Modals/FormModal/FormModal.js","axios-api.js","constants/constants.js","services/auth/auth.service.js","containers/Login/Login.js","higherOrderedComponents/Layout/Layout.js","components/UI/LoadingSpinner/LoadingSpinner.js","components/UI/Table/Table.js","services/auth-header.js","services/queue/queue.service.js","containers/Queue/Queue.js","App.js","index.js","assets/images/oslomethvit.png"],"names":["Boolean","window","location","hostname","match","navbar","props","loginButton","Nav","Link","style","background","border","color","width","height","onClick","handleLoginClick","logoutButton","handleLogoutClick","navbarProps","user","bg","loginPrompt","Navbar","className","Brand","alt","src","require","Item","hyperlink","document","createElement","innerHTML","swal","title","text","content","icon","button","updateObject","oldObject","updatedProperties","inputChangedHandler","event","inputIdentifier","form","updatedFormElement","value","target","valid","checkFormElementValidity","validation","touched","updatedForm","formIsValid","rules","isValid","required","trim","minLength","length","maxLength","input","inputElement","inputType","onChange","changed","inputConfig","options","map","option","key","displayValue","disabled","styling","clicked","children","FormModal","Modal","size","aria-labelledby","centered","Header","closeButton","Title","id","Body","Container","Footer","Button","onHide","btnType","loginHandler","instance","axios","create","baseURL","login","username","password","post","AUTH_PATH","then","response","data","token","localStorage","setItem","JSON","stringify","logout","removeItem","register","email","isUserTokenValid","getCurrentUser","parse","getItem","Login","state","type","placeholder","label","loginFailed","loginErrorMessage","formData","formElementIdentifier","postLoginData","AuthService","clearedLoginForm","setState","loginForm","error","console","log","formElements","this","push","config","formElement","Input","invalid","shouldValidate","show","Component","Layout","showModal","closeModalHandler","logoutHandler","loadingSpinner","table","columns","defaultColumns","scope","loggedInColumns","tableHead","rows","i","rowId","cells","entities","name","subject","digitalConsultation","actionButtons","confirmDoneOnClick","deleteOnClick","roles","includes","tableBody","authHeader","USER","Authorization","getQueueData","get","catch","errorHandler","postQueueEntry","queueEntity","deleteQueueEntryById","delete","headers","confirmDone","QUEUE_PATH","getSubjects","message","buttons","Queue","queueData","loading","year","discord","QueueService","postNewQueueEntry","studyYear","deleteQueueEntry","confirmDoneQueueEntry","registrationHandler","preventDefault","subjectListUpdated","subjects","forEach","LoadingSpinner","Table","onSubmit","App","applicationVersionNumber","logOutHandler","routes","path","exact","render","to","versionNumber","withRouter","app","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.91f2e793.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport {Navbar} from \"react-bootstrap\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport swal from \"sweetalert\";\r\n\r\nconst navbar = (props) => {\r\n\r\n    const showInfoMessage = () => {\r\n        const hyperlink = document.createElement(\"div\");\r\n        hyperlink.innerHTML = \"<a href='https://github.com/OrakelOsloMet/Orakel_Queue_Client/issues' target='_blank'>GitHub Repo</a>\";\r\n\r\n        swal({\r\n                title: \"Feil eller Mangel rapportering\",\r\n                text: \"Orakels køsystem er et fritidsprosjekt som er bygget og vedlikeholdt av en person. Det er derfor \" +\r\n                    \"en viss fare for bugs og feil. Disse kan rapporteres ved å legge inn en issue på GitHub-repoet, eller \" +\r\n                    \"ved å ta kontakt med Fredrik Pedersen. Vi setter også pris på ønsker om tilleggsfunksjonalitet :) \",\r\n                content: hyperlink,\r\n                icon: \"info\",\r\n                button: \"Ok\"\r\n            }\r\n        );\r\n    };\r\n\r\n    const showAboutMessage = () => {\r\n        swal({\r\n                title: \"Om Orakels Køsystem\",\r\n                text: \"Comming Soon!\",\r\n                icon: \"info\",\r\n                button: \"Ok\"\r\n            }\r\n        );\r\n    };\r\n\r\n    const loginButton =\r\n        <Nav.Link>\r\n            <button\r\n                style={{background: \"none\", border: \"none\", color: \"white\", width: \"100px\", height: \"40px\"}}\r\n                onClick={props.handleLoginClick}>\r\n                <strong>Admin</strong>\r\n            </button>\r\n        </Nav.Link>;\r\n\r\n    const logoutButton =\r\n        <Nav.Link>\r\n            <button\r\n                style={{background: \"none\", border: \"none\", color: \"white\", width: \"100px\", height: \"40px\"}}\r\n                onClick={props.handleLogoutClick}>\r\n                <strong>Logg Ut</strong>\r\n            </button>\r\n        </Nav.Link>;\r\n\r\n    let navbarProps = props.user ? {bg: \"warning\"} : {bg: \"primary\"}\r\n    let loginPrompt = props.user ? logoutButton : loginButton;\r\n\r\n    return (\r\n        <Navbar {...navbarProps}>\r\n            <Nav className=\"container-fluid\">\r\n                <Navbar.Brand>\r\n                    <img\r\n                        alt=\"\"\r\n                        src={require(\"../../../assets/images/oslomethvit.png\")}\r\n                        width=\"140\"\r\n                        height=\"90\"\r\n                        className=\"d-inline-block align-top\"\r\n                    />\r\n                </Navbar.Brand>\r\n                <Nav.Item><h2 style={{color: \"white\"}}><strong>Orakel</strong></h2></Nav.Item>\r\n                <Nav.Link className=\"ml-5\" style={{color: \"white\"}} onClick={showInfoMessage}><strong>Feilrapportering</strong></Nav.Link>\r\n                <Nav.Link className=\"ml-5\" style={{color: \"white\"}} onClick={showAboutMessage}><strong>Om</strong></Nav.Link>\r\n                <Nav.Item className=\"ml-auto\">{loginPrompt}</Nav.Item>\r\n            </Nav>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nexport default navbar;","export const updateObject = (oldObject, updatedProperties) => {\r\n    return {\r\n        ...oldObject,\r\n        ...updatedProperties\r\n    };\r\n};\r\n\r\n","import {updateObject} from \"./objectUtilities\";\r\n\r\nexport const inputChangedHandler = (event, inputIdentifier, form) => {\r\n    const updatedFormElement = updateObject(form[inputIdentifier], {\r\n        value: event.target.value,\r\n        valid: checkFormElementValidity(event.target.value, form[inputIdentifier].validation),\r\n        touched: true\r\n    });\r\n\r\n    const updatedForm = updateObject(form, {\r\n        [inputIdentifier]: updatedFormElement\r\n    });\r\n\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in updatedForm) {\r\n        formIsValid = updatedForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n\r\n    return {form: updatedForm, formIsValid: formIsValid}\r\n};\r\n\r\nconst checkFormElementValidity = (value, rules) => {\r\n    let isValid = true;\r\n    if (!rules) {\r\n        return true;\r\n    }\r\n\r\n    if (rules.required) {\r\n        isValid = value.trim() !== '' && isValid;\r\n    }\r\n\r\n    if (rules.minLength) {\r\n        isValid = value.length >= rules.minLength && isValid\r\n    }\r\n\r\n    if (rules.maxLength) {\r\n        isValid = value.length <= rules.maxLength && isValid\r\n    }\r\n\r\n    return isValid;\r\n};","import React from \"react\";\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n\r\n    switch (props.inputType) {\r\n        case(\"input\"):\r\n            inputElement = <input\r\n                className=\"form-control ml-2 mr-2 mt-2\"\r\n                value={props.value}\r\n                onChange={props.changed}\r\n                {...props.inputConfig}/>;\r\n            break;\r\n\r\n        case(\"select\"):\r\n            inputElement = <select\r\n                className=\"form-control ml-2 mr-2 mt-2\"\r\n                value={props.value}\r\n                onChange={props.changed}>\r\n                {props.inputConfig.options.map(option => (\r\n                    <option key={option.value} value={option.value}>\r\n                        {option.displayValue}\r\n                    </option>\r\n                ))}\r\n            </select>;\r\n            break;\r\n\r\n        default:\r\n            inputElement = <input\r\n                className=\"form-control\"/>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {inputElement}\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default input;","import React from 'react';\r\n\r\nconst button = (props) => (\r\n    <button\r\n        disabled={props.disabled}\r\n        className={props.styling}\r\n        onClick={props.clicked}>{props.children}</button>\r\n);\r\n\r\nexport default button;","import React from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"../../Button/Button\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\n//Todo Parameterize this so it can be used a general puprose form-modal\r\nconst FormModal = (props) => {\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Innlogging\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className=\"show-grid\">\r\n                <Container>\r\n                    {props.form}\r\n                    <p className=\"mt-4\"><strong>Denne innloggingssiden er kun ment for Orakler på jobb. Er du student og\r\n                        skal stelle deg i kø trenger du IKKE å logge inn her :)</strong></p>\r\n                </Container>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button styling=\"btn btn-danger\" clicked={props.onHide}>Lukk</Button>\r\n                <Button btnType=\"Success\" styling=\"btn btn-primary\" disabled={!props.formIsValid}\r\n                        clicked={props.loginHandler}>Logg\r\n                    Inn</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default FormModal;","import axios from \"axios\";\r\nimport {API_BASE_PATH} from \"./constants/constants\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: API_BASE_PATH\r\n});\r\n\r\nexport default instance;","/* ----- Authentication ------ */\r\nexport const LOCAL_STORAGE_USER = \"user\";\r\n\r\n/* ----- API ------ */\r\nexport const API_BASE_PATH = process.env.NODE_ENV === \"production\" ? \"https://orakelqueueservice.herokuapp.com/api/\" : \"http://localhost:8080/api/\";\r\n\r\n//Queue\r\nexport const QUEUE_PATH = \"queue/\";\r\nexport const CONFIRM_DONE_PATH = QUEUE_PATH + \"confirmdone/\";\r\n\r\n//Subjects\r\nexport const SUBJECTS_PATH = \"subjects/\";\r\n\r\n//Auth\r\nexport const AUTH_PATH = \"auth/\";\r\nexport const LOGIN_PATH = AUTH_PATH + \"signin\";\r\nexport const SIGNUP_PATH = AUTH_PATH + \"signup\";\r\nexport const CHECK_TOKEN_PATH = AUTH_PATH + \"isTokenValid\";\r\n\r\n/* ----- Routing ----- */\r\nexport const INDEX_ROUTE = \"/Orakel_Queue_System/\"\r\n\r\n//TODO Add all hardcoded string values to this file\r\n","import axios from \"../../axios-api\";\r\nimport {LOCAL_STORAGE_USER, LOGIN_PATH, SIGNUP_PATH, CHECK_TOKEN_PATH} from \"../../constants/constants\";\r\n\r\n\r\nclass AuthService {\r\n\r\n    login = (username, password) => {\r\n        return axios.post(LOGIN_PATH, {\r\n            username,\r\n            password\r\n        }).then(response => {\r\n            if (response.data.token) {\r\n                localStorage.setItem(LOCAL_STORAGE_USER, JSON.stringify(response.data))\r\n            }\r\n\r\n            return response.data;\r\n        });\r\n    };\r\n\r\n    logout = () => {\r\n        localStorage.removeItem(LOCAL_STORAGE_USER);\r\n    };\r\n\r\n    //TODO Add response handling for confirming successfull signup\r\n    register = (username, email, password) => {\r\n        return axios.post(SIGNUP_PATH, {\r\n            username,\r\n            email,\r\n            password\r\n        });\r\n    };\r\n\r\n    isUserTokenValid = () => {\r\n        const user = this.getCurrentUser();\r\n\r\n        if (user && user.token) {\r\n            return axios.post(CHECK_TOKEN_PATH, user.token).then(response => {\r\n                return response.data;\r\n            });\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    getCurrentUser = () => {\r\n        return JSON.parse(localStorage.getItem(LOCAL_STORAGE_USER));\r\n    };\r\n}\r\n\r\nexport default new AuthService();","import React, {Component} from \"react\";\r\nimport {inputChangedHandler} from \"../../utilities/formUtilities\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport FormModal from \"../../components/UI/Modals/FormModal/FormModal\";\r\nimport AuthService from \"../../services/auth/auth.service\";\r\n\r\nclass Login extends Component {\r\n    state = {\r\n        form: {\r\n            username: {\r\n                inputType: \"input\",\r\n                inputConfig: {\r\n                    type: \"text\",\r\n                    placeholder: \"Brukernavn\"\r\n                },\r\n                value: \"\",\r\n                label: \"Brukernavn\",\r\n                validation: {\r\n                    required: true,\r\n                    maxLength: 30\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                inputType: \"input\",\r\n                inputConfig: {\r\n                    type: \"password\",\r\n                    placeholder: \"Passord\"\r\n                },\r\n                value: \"\",\r\n                label: \"Passord\",\r\n                validation: {\r\n                    required: true,\r\n                    maxLength: 150\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        formIsValid: false,\r\n        loginFailed: false,\r\n        loginErrorMessage: \"\",\r\n    };\r\n\r\n    loginHandler = (event) => {\r\n        const formData = {};\r\n        for(let formElementIdentifier in this.state.form) {\r\n            formData[formElementIdentifier] = this.state.form[formElementIdentifier].value;\r\n        }\r\n\r\n        this.postLoginData(formData);\r\n    };\r\n\r\n    postLoginData = (formData) => {\r\n        AuthService.login(formData.username, formData.password).then(() => {\r\n            this.props.onHide();\r\n            let clearedLoginForm = {...this.state.form};\r\n            clearedLoginForm.username.value = \"\";\r\n            clearedLoginForm.password.value = \"\";\r\n\r\n            this.setState({loginForm: clearedLoginForm});\r\n            this.props.loginHandler();\r\n        }, error => {\r\n            console.log(error);\r\n        })\r\n    };\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        this.setState(inputChangedHandler(event, inputIdentifier, this.state.form));\r\n    };\r\n\r\n    render() {\r\n        const formElements = [];\r\n        for (let key in this.state.form) {\r\n            formElements.push({\r\n                id: key,\r\n                config: this.state.form[key]\r\n            });\r\n        }\r\n\r\n        let form =\r\n            <form className=\"form-inline\">\r\n                {formElements.map(formElement => (\r\n                    <Input\r\n                        key={formElement.id}\r\n                        inputType={formElement.config.inputType}\r\n                        inputConfig={formElement.config.inputConfig}\r\n                        value={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        label={formElement.config.label}\r\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                    />\r\n                ))}\r\n                {this.state.loginFailed ? <p className=\"mt-4\" style={{color: \"red\"}}><strong>{this.state.loginErrorMessage}</strong></p> : null}\r\n            </form>;\r\n\r\n        return (\r\n            <FormModal\r\n                form={form}\r\n                formIsValid={this.state.formIsValid}\r\n                loginHandler={this.loginHandler}\r\n                show={this.props.show}\r\n                onHide={this.props.onHide}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React, {Component} from 'react';\r\nimport Navbar from \"../../components/Navigation/Navbar/Navbar\";\r\nimport Login from \"../../containers/Login/Login\";\r\n\r\nclass Layout extends Component {\r\n    state = {\r\n        showModal: false\r\n    };\r\n\r\n    closeModalHandler = () => {\r\n        this.setState({showModal: false})\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                <Navbar handleLoginClick = {() => this.setState({showModal: true})} handleLogoutClick={this.props.logoutHandler} user={this.props.user}/>\r\n                <main>\r\n                    <Login show={this.state.showModal} onHide={this.closeModalHandler} loginHandler={this.props.loginHandler}/>\r\n                    {this.props.children}\r\n                </main>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Layout;","import React from \"react\";\r\n\r\nconst loadingSpinner = () => (\r\n    <div className=\"spinner-border text-primary\"></div>\r\n);\r\n\r\nexport default loadingSpinner;","import React from \"react\";\r\n\r\nconst table = (props) => {\r\n\r\n    /* ----- Create Table Head ----- */\r\n\r\n    let columns = [];\r\n    const defaultColumns =\r\n        <>\r\n            <th key={\"queueNumberHeader\"} scope=\"col\"># I kø</th>\r\n            <th key={\"nameHeader\"} scope=\"col\">Navn</th>\r\n            <th key={\"subjectHeader\"} scope=\"col\">Emne</th>\r\n            <th key={\"discordHeader\"} scope=\"col\">Discord</th>\r\n        </>;\r\n\r\n    //The actions column is only visible to logged in users\r\n    let loggedInColumns = props.user ? <th key={\"actionsHeader\"} scope=\"col\">Handlinger</th> : null;\r\n\r\n    columns.push(defaultColumns);\r\n    columns.push(loggedInColumns);\r\n\r\n    const tableHead =\r\n        <thead key={\"tableHead\"} className=\"thead-dark\">\r\n        <tr>\r\n            {columns}\r\n        </tr>\r\n        </thead>;\r\n\r\n    /* ----- Create Table Body ----- */\r\n\r\n    let rows = [];\r\n    for (let i = 0; i < props.entities.length; i++) {\r\n        let rowId = \"row\" + i;\r\n\r\n        let cells = [];\r\n        cells.push(<td key={\"entry\" + i} id={\"entry\" + i}>{i + 1}</td>);\r\n        cells.push(<td key={\"name\" + i} id={\"name\" + i}>{props.entities[i].name}</td>);\r\n        cells.push(<td key={\"subject\" + i} id={\"subject\" + i}>{props.entities[i].subject}</td>);\r\n        cells.push(<td key={\"discord\" + i} id={\"discord\" + i}>{props.entities[i].digitalConsultation === false ? \"Nei\" : \"Ja\"}</td>);\r\n\r\n        let actionButtons =\r\n            <>\r\n                <button className=\"btn btn-success\" onClick={() => props.confirmDoneOnClick(props.entities[i])}>Ferdig</button>\r\n                <button className=\"btn btn-danger ml-2\" onClick={() => props.deleteOnClick(props.entities[i])}>Slett</button>\r\n            </>;\r\n\r\n        if (props.user) {\r\n            //The current action buttons, Done and Delete, are only available to admins. If regular users are implemented and\r\n            //are getting the opportunity to edit their queue entries, there will have to be some changes here.\r\n            actionButtons = props.user.roles.includes(\"ROLE_ADMIN\") ? actionButtons : null;\r\n            cells.push(<td key={\"actions\" + i} id={\"action\" + i}>{actionButtons}</td>);\r\n        }\r\n\r\n        rows.push(<tr key={i} id={rowId}>{cells}</tr>);\r\n    }\r\n\r\n    const tableBody = <tbody>{rows}</tbody>;\r\n\r\n    return (\r\n        <table className=\"table table-striped mb-4\">{tableHead}{tableBody}</table>\r\n    );\r\n};\r\n\r\nexport default table;","import {LOCAL_STORAGE_USER} from \"../constants/constants\";\r\n\r\nexport default function authHeader() {\r\n\r\n    const USER = JSON.parse(localStorage.getItem(LOCAL_STORAGE_USER));\r\n\r\n    if (USER && USER.token) {\r\n        return { Authorization: \"Bearer \" + USER.token };\r\n    } else {\r\n        return {};\r\n    }\r\n}\r\n","import axios from \"../../axios-api\";\r\nimport AuthService from \"../auth/auth.service\";\r\nimport swal from \"sweetalert\";\r\nimport {CONFIRM_DONE_PATH, QUEUE_PATH, SUBJECTS_PATH} from \"../../constants/constants\";\r\nimport authHeader from \"../auth-header\";\r\n\r\nclass QueueService {\r\n\r\n    getQueueData = () => {\r\n        return axios.get(QUEUE_PATH)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => {\r\n                this.errorHandler(error);\r\n                return error;\r\n            })\r\n    };\r\n\r\n    postQueueEntry = (queueEntity) => {\r\n        return axios.post(QUEUE_PATH, queueEntity)\r\n            .catch(error => {\r\n                this.errorHandler(error);\r\n            });\r\n    };\r\n\r\n    deleteQueueEntryById = (id) => {\r\n        return axios.delete(QUEUE_PATH + id, {headers: authHeader()})\r\n            .catch(error => {\r\n                this.errorHandler(error);\r\n            });\r\n    };\r\n\r\n    confirmDone = (id) => {\r\n        return axios.post(CONFIRM_DONE_PATH + id, null, {headers: authHeader()})\r\n            .catch(error => {\r\n                this.errorHandler(error);\r\n            });\r\n    };\r\n\r\n    getSubjects = () => {\r\n        return axios.get(SUBJECTS_PATH).then(response => {\r\n            return response.data;\r\n        }).catch(error => {\r\n            this.errorHandler(error);\r\n        });\r\n    };\r\n\r\n    errorHandler = (error) => {\r\n        if (error.response.data.message) {\r\n\r\n            //This solution is by no means elegant, but the application needs to be published soon.\r\n            //TODO implement Redux to keep track of global state, then redirect the user to login when any error is found\r\n            AuthService.logout();\r\n            swal({\r\n                    title: \"Invalid login token\",\r\n                    text: \"Your login session has expired, or something else went wrong. Please refresh the page and login again. \" +\r\n                        \"A better user experience in regards to this is in the works, but was not prioritized for the initial \" +\r\n                        \"production build.\",\r\n                    icon: \"warning\",\r\n                    buttons: true\r\n                }\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default new QueueService();","import React, {Component} from \"react\";\r\n\r\nimport LoadingSpinner from \"../../components/UI/LoadingSpinner/LoadingSpinner\";\r\nimport Table from \"../../components/UI/Table/Table\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport {inputChangedHandler} from \"../../utilities/formUtilities\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport QueueService from \"../../services/queue/queue.service\";\r\n\r\nexport class Queue extends Component {\r\n\r\n    state = {\r\n        queueData: [],\r\n        loading: true,\r\n        form: {\r\n            name: {\r\n                inputType: \"input\",\r\n                inputConfig: {\r\n                    type: \"text\",\r\n                    placeholder: \"Fornavn\"\r\n                },\r\n                value: \"\",\r\n                label: \"Navn\",\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 3,\r\n                    maxLength: 30\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n\r\n            subject: {\r\n                inputType: \"select\",\r\n                inputConfig: {\r\n                    options: []\r\n                },\r\n                value: \"Programmering\",\r\n                label: \"Velg Emne\",\r\n                validation: {},\r\n                valid: true\r\n            },\r\n\r\n            year: {\r\n                inputType: \"select\",\r\n                inputConfig: {\r\n                    options: [\r\n                        {value: 1, displayValue: \"1. år\"},\r\n                        {value: 2, displayValue: \"2. år\"},\r\n                        {value: 3, displayValue: \"3. år\"}\r\n                    ]\r\n                },\r\n                value: 1,\r\n                label: \"Årstrinn\",\r\n                validation: {},\r\n                valid: true\r\n            },\r\n\r\n            //Indicates if the student wants digital consultation or not. In the database 1 is true and 0 is false.\r\n            discord: {\r\n                inputType: \"select\",\r\n                inputConfig: {\r\n                    options: [\r\n                        {value: false, displayValue: \"Fysisk Veiledning (Datatorget)\"},\r\n                        {value: true, displayValue: \"Digital Veiledning (Discord)\"},\r\n                    ]\r\n                },\r\n                value: 0,\r\n                label: \"Veiledningsform\",\r\n                validation: {},\r\n                valid: true\r\n            },\r\n        },\r\n        formIsValid: false\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getQueueData();\r\n\r\n        const subjectListUpdated = {...this.state.form};\r\n\r\n        QueueService.getSubjects().then(subjects => {\r\n            subjects.forEach(subject => {\r\n                subjectListUpdated.subject.inputConfig.options.push({value: subject, displayValue: subject})\r\n            })\r\n        });\r\n\r\n        this.setState({form: subjectListUpdated})\r\n\r\n\r\n        //Refresh the queue data once a minute\r\n        //TODO Add an on-screen timer showing when the table was last updated\r\n        /* setInterval(() => {\r\n            this.getQueueData();\r\n        }, 60000); */\r\n    }\r\n\r\n    getQueueData = () => {\r\n        QueueService.getQueueData().then(data => {\r\n            this.setState({queueData: data, loading: false})\r\n        });\r\n    };\r\n\r\n    postNewQueueEntry = (formData) => {\r\n        const queueEntity = {\r\n            name: formData.name,\r\n            subject: formData.subject,\r\n            digitalConsultation: formData.discord,\r\n            studyYear: formData.year\r\n        };\r\n\r\n        QueueService.postQueueEntry(queueEntity).then(() => {\r\n            this.getQueueData();\r\n        })\r\n    };\r\n\r\n    //TODO Add confirmation before deleting!\r\n    deleteQueueEntry = (queueEntity) => {\r\n        QueueService.deleteQueueEntryById(queueEntity.id).then(() => {\r\n            this.getQueueData();\r\n        })\r\n    };\r\n\r\n    //TODO Add confirmation before posting!\r\n    confirmDoneQueueEntry = (queueEntity) => {\r\n        QueueService.confirmDone(queueEntity.id).then(() => {\r\n            this.getQueueData();\r\n        });\r\n    };\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        this.setState(inputChangedHandler(event, inputIdentifier, this.state.form));\r\n    };\r\n\r\n    registrationHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const formData = {};\r\n        for(let formElementIdentifier in this.state.form) {\r\n            formData[formElementIdentifier] = this.state.form[formElementIdentifier].value;\r\n        }\r\n\r\n        this.postNewQueueEntry(formData);\r\n    };\r\n\r\n\r\n    render() {\r\n        let table = this.state.loading ? <LoadingSpinner/> : <Table\r\n            entities={this.state.queueData}\r\n            user={this.props.user}\r\n            deleteOnClick={this.deleteQueueEntry}\r\n            confirmDoneOnClick={this.confirmDoneQueueEntry}/>;\r\n\r\n        const formElements = [];\r\n        for (let key in this.state.form) {\r\n            formElements.push({\r\n                id: key,\r\n                config: this.state.form[key]\r\n            });\r\n        }\r\n\r\n        let form = <form onSubmit={this.registrationHandler} className=\"form-inline mt-3\">\r\n            {formElements.map(formElement => (\r\n                <Input\r\n                    key={formElement.id}\r\n                    inputType={formElement.config.inputType}\r\n                    inputConfig={formElement.config.inputConfig}\r\n                    value={formElement.config.value}\r\n                    invalid={!formElement.config.valid}\r\n                    shouldValidate={formElement.config.validation}\r\n                    touched={formElement.config.touched}\r\n                    label={formElement.config.label}\r\n                    changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                    />\r\n            ))}\r\n            <Button btnType=\"Success\" styling=\"ml-2 mr-2 mt-2 btn btn-primary\" disabled={!this.state.formIsValid}>Registrer</Button>\r\n        </form>;\r\n\r\n        return (\r\n            <>\r\n                {table}\r\n                <h1 className=\"text-left ml-2 mr-2 mt-5\">Køregistrering: </h1>\r\n                {form}\r\n            </>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Queue; //withErrorHandler(Queue, axios);","import React, {Component} from 'react';\r\nimport {Route, Switch, withRouter, Redirect} from 'react-router-dom';\r\nimport './App.css';\r\nimport Layout from \"./higherOrderedComponents/Layout/Layout\";\r\nimport Queue from \"./containers/Queue/Queue\";\r\nimport AuthService from \"./services/auth/auth.service\";\r\nimport {INDEX_ROUTE} from \"./constants/constants\";\r\n\r\nclass App extends Component {\r\n\r\n    state = {\r\n        user: null,\r\n        applicationVersionNumber: \"BETA: 0.1.0\"\r\n    };\r\n\r\n     async componentDidMount() {\r\n        const validToken = await AuthService.isUserTokenValid();\r\n\r\n        if (validToken === true) {\r\n            this.loginHandler();\r\n        } else {\r\n            this.logOutHandler();\r\n        }\r\n    }\r\n\r\n    loginHandler = () => {\r\n        const user = AuthService.getCurrentUser();\r\n        if (user) {\r\n            this.setState({user: user});\r\n        }\r\n    };\r\n\r\n    logOutHandler = () => {\r\n        AuthService.logout();\r\n        this.setState({user: null})\r\n    };\r\n\r\n    render() {\r\n        \r\n        let routes = (\r\n            <Switch>\r\n                <Route path={INDEX_ROUTE} exact render={() => (<Queue user={this.state.user}/>)}/>\r\n                <Redirect to={INDEX_ROUTE}/>\r\n            </Switch>\r\n        );\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <Layout user={this.state.user} loginHandler={this.loginHandler} logoutHandler={this.logOutHandler}  versionNumber={this.state.applicationVersionNumber} >\r\n                    {routes}\r\n                </Layout>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nimport App from './App';\r\nimport './index.css';\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst app = (\r\n    <BrowserRouter>\r\n        <App/>\r\n    </BrowserRouter>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/oslomethvit.2c306d99.png\";"],"sourceRoot":""}