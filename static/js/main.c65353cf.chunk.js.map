{"version":3,"sources":["components/Navigation/Navbar/navbar.module.css","components/Forms/QueueForm/queueForm.module.css","containers/AdminPage/adminPage.module.css","assets/sounds/hellothere.mp3","assets/images/oslometsvart.png","assets/images/oslomethvit.png","serviceWorker.js","store/actions/actionTypes.ts","constants/constants.ts","utilities/objectUtilities.ts","store/reducers/authReducer.ts","store/reducers/queueReducer.ts","store/reducers/subjectReducer.ts","store/index.ts","axiosAPI.ts","components/Forms/QueueForm/queueForm.tsx","store/actions/authActions.ts","httpHeaders/authHeader.ts","store/actions/queueActions.ts","store/actions/subjectActions.ts","components/UI/Buttons/buttons.tsx","utilities/formUtilities.ts","components/Forms/Inputs/input.tsx","components/Forms/Inputs/select.tsx","components/Forms/SubjectForm/subjectForm.tsx","components/Forms/QueueForm/queueFormConnected.ts","components/Tables/TableHead/tableHead.tsx","components/Tables/Queue/QueueTable/queueTable.tsx","components/UI/LoadingSpinner/loadingSpinner.tsx","hooks/useInterval.ts","hooks/usePreviousState.ts","components/Tables/Queue/queue.tsx","utilities/arrayUtilities.ts","components/Tables/Queue/queueConnected.ts","containers/LandingPage/landingPage.tsx","components/UI/Cards/card.tsx","components/Forms/Inputs/radio.tsx","components/UI/Modals/SwalModals/swalConfirmModal.tsx","components/Forms/SubjectForm/subjectFormConnected.ts","components/Forms/QueueExportForm/queueExportForm.tsx","containers/AdminPage/adminPage.tsx","containers/AdminPage/adminPageConnected.ts","app.tsx","components/UI/Modals/SwalModals/swalInfoModal.tsx","components/UI/Modals/SwalModals/swalLoginModal.tsx","components/Navigation/Navbar/navbar.tsx","components/Navigation/Navbar/navbarConnected.ts","higherOrderedComponents/Layout/layout.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","AuthActionTypes","QueueActionTypes","SubjectActionTypes","FormElementType","Semester","updateObject","oldObject","updatedProperties","convertObjectStringsToPrimitives","originalObject","convertedObject","Object","entries","key","value","isNaN","Number","parseFloat","initialState","user","error","loading","authStart","state","action","authSuccess","authFail","authLogout","clearError","reducer","type","AUTH_START","AUTH_SUCCESS","AUTH_FAIL","AUTH_LOGOUT","CLEAR_ERROR","queueData","initAction","failedAction","fetchQueueSuccess","addRemoveSuccess","FETCH_QUEUE_START","ADD_TO_QUEUE_START","DELETE_FROM_QUEUE_START","DONE_IN_QUEUE_START","FETCH_QUEUE_FAIL","ADD_TO_QUEUE_FAIL","DELETE_FROM_QUEUE_FAIL","DONE_IN_QUEUE_FAIL","FETCH_QUEUE_SUCCESS","ADD_TO_QUEUE_SUCCESS","DELETE_FROM_QUEUE_SUCCESS","DONE_IN_QUEUE_SUCCESS","allSubjectData","currentSubjectData","fetchSubjectsSuccess","FETCH_SUBJECTS_START","ADD_SUBJECT_START","DELETE_SUBJECT_START","FETCH_SUBJECTS_FAIL","ADD_SUBJECT_FAIL","DELETE_SUBJECT_FAIL","FETCH_SUBJECTS_SUCCESS","ADD_SUBJECT_SUCCESS","DELETE_SUBJECT_SUCCESS","rootReducer","combineReducers","auth","authReducer","queue","queueReducer","subjects","subjectReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","API_BASE_PATH","USER_GUIDE_PATH","INDEX_ROUTE","FormElements","REST_INSTANCE","axios","create","baseURL","FILE_INSTANCE","responseType","logout","localStorage","removeItem","checkValidAuth","dispatch","getItem","JSON","parse","token","post","AUTH_PATH","then","response","data","username","password","setItem","stringify","catch","message","authHeader","USER","Authorization","fetchQueue","get","fetchQueueFail","addToQueue","queueEntity","addToQueueFail","deleteFromQueue","id","delete","headers","deleteFromQueueFail","doneInQueue","QUEUE_PATH","doneInQueueFail","fetchSubjectsStart","fetchAllSubjectsSuccess","subjectData","fetchCurrentSubjectsSuccess","fetchSubjectsFail","fetchSubjects","allSubjects","path","SUBJECTS_PATH","addEditSubjectStart","addEditSubjectSuccess","addEditSubjectFail","addEditSubject","subject","edit","put","deleteSubject","deleteSubjectFail","SubmitButton","props","disabled","className","onClick","children","ConfirmButton","DeleteButton","createUseFormRef","inputConfig","register","TEXT","required","validation","errorMessage","minLength","inputHasError","errors","errorInInput","name","Input","forwardRef","ref","classnames","onChange","event","Select","options","map","option","String","displayValue","QueueForm","addQueueEntity","useForm","handleSubmit","reset","isSubmitSuccessful","formState","useState","FIRSTNAME","placeholder","nameInput","SELECT","SUBJECT","subjectSelect","setSubjectSelect","YEAR","yearSelect","DIGITAL","digitalConsultationSelect","useEffect","length","fillSubjectSelector","subjectListUpdated","forEach","push","form","onSubmit","formData","primitiveFormData","firstname","digitalConsultation","studyYear","year","confirmedDone","timeConfirmedDone","styles","queueForm","connect","bindActionCreators","tableHead","columns","defaultColumns","column","scope","isAuthenticated","loggedInColumns","queueTable","confirmDoneEntity","deleteQueueEntity","userRoles","rows","i","rowId","cells","includes","tableBody","Table","striped","bordered","hover","responsive","loadingSpinner","useInterval","callback","delay","savedCallback","useRef","current","setInterval","clearInterval","usePreviousState","notificationSound","require","Queue","pollingFunction","useSound","play","previousQueue","a","b","allObjectsEqual","jsonArrayEqual","table","undefined","roles","LandingPage","Card","styleClasses","width","widthPercent","shadow","style","header","Radio","handleOnchange","radioDivs","buttons","button","label","defaultChecked","SwalConfirmModal","title","contentText","mySwal","withReactContent","Swal","fire","html","icon","showDenyButton","confirmButtonText","denyButtonText","result","isConfirmed","isDenied","SubjectForm","NEW_SUBJECT_NAME","SELECTED_SUBJECT","CHECKED_SEMESTER","editState","setEditState","setNameInput","RADIO","SPRING","AUTUMN","checkedSemester","setCheckedSemester","resetForm","nameInputCleared","defaultValue","registrationHandler","selectedSubject","newSubjectName","semester","deleteHandler","margin","nameInputFilled","semesterCheckedUpdated","currentTarget","subjectSelectHandler","QueueExportForm","RESOURCES_BASE_PATH","filename","filetype","responseData","url","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","FILE_DOWNLOAD_CONFIG","AdminPage","adminPage","color","withRouter","autoLogin","getSubjectData","routes","exact","render","to","textAlign","SwalInfoModal","hyperlinkText","hyperlinkDiv","innerHTML","footer","SwalLoginModal","onLoginSubmit","clearLoginError","showLoaderOnConfirm","showCancelButton","cancelButtonColor","cancelButtonText","allowOutsideClick","isLoading","preConfirm","usernameInput","getPopup","querySelector","passwordInput","trim","showValidationMessage","isDismissed","Navbar","linkStyle","authenticatedLinkText","defaultLinkText","navbarProps","expand","bg","variant","loginButton","Nav","Link","logoutHandler","Brand","invisibleOnMobile","brandImage","alt","src","authenticatedBrandText","brandText","Toggle","aria-controls","Collapse","Layout","store","createStore","applyMiddleware","thunk","app","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,UAAY,0BAA0B,WAAa,2BAA2B,gBAAkB,gCAAgC,uBAAyB,uCAAuC,sBAAwB,sCAAsC,kBAAoB,oC,mBCApSD,EAAOC,QAAU,CAAC,UAAY,+B,mBCA9BD,EAAOC,QAAU,CAAC,UAAY,+B,uDCD9BD,EAAOC,QAAU,IAA0B,wC,wCCA3CD,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,yC,4ECYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,IClBMC,EASAC,EAkBAC,E,yCA3BAF,K,wBAAAA,E,4BAAAA,E,sBAAAA,E,0BAAAA,E,2BAAAA,M,cASAC,K,sCAAAA,E,0CAAAA,E,oCAAAA,E,wCAAAA,E,4CAAAA,E,sCAAAA,E,kDAAAA,E,sDAAAA,E,gDAAAA,E,0CAAAA,E,8CAAAA,E,yCAAAA,M,cAkBAC,K,4CAAAA,E,gDAAAA,E,0CAAAA,E,sCAAAA,E,0CAAAA,E,oCAAAA,E,wCAAAA,E,4CAAAA,E,sCAAAA,E,4CAAAA,E,gDAAAA,E,2CAAAA,M,SCMAC,EAOAC,E,eCxCCC,EAAe,SAACC,EAAgBC,GACzC,OAAO,2BACAD,GACAC,IAcEC,EAAmC,SAACC,GAG7C,IAFA,IAAMC,EAAe,eAAOD,GAE5B,MAAyBE,OAAOC,QAAQF,GAAxC,eAA0D,CAAC,IAAD,sBAAhDG,EAAgD,KAA3CC,EAA2C,KAClC,iBAATA,IAEO,SAAVA,GAA8B,UAAVA,IACpBJ,EAAgBG,GAAiB,QAATC,GAGvBC,MAAMC,OAAOF,MACdJ,EAAgBG,GAAOI,WAAWH,KAK9C,OAAOJ,GC7BLQ,EAA0B,CAC5BC,KAAM,KACNC,MAAO,KACPC,SAAS,GAGPC,EAAY,SAACC,EAAkBC,GACjC,OAAOnB,EAAakB,EAAO,CAACH,MAAO,KAAMC,SAAS,KAGhDI,EAAc,SAACF,EAAkBC,GACnC,OAAOnB,EAAakB,EAAO,CACvBJ,KAAMK,EAAOL,KACbC,MAAO,KACPC,SAAS,KAIXK,EAAW,SAACH,EAAkBC,GAChC,OAAOnB,EAAakB,EAAO,CACvBH,MAAOI,EAAOJ,MACdC,SAAS,KAIXM,EAAa,SAACJ,EAAkBC,GAClC,OAAOnB,EAAakB,EAAO,CAACJ,KAAM,QAGhCS,EAAa,SAACL,EAAkBC,GAClC,OAAOnB,EAAakB,EAAO,CAACH,MAAO,QAcxBS,EAXC,WAA0D,IAAzDN,EAAwD,uDAArCL,EAAcM,EAAuB,uCACrE,OAAOA,EAAOM,MACV,KAAK9B,EAAgB+B,WAAY,OAAOT,EAAUC,GAClD,KAAKvB,EAAgBgC,aAAc,OAAOP,EAAYF,EAAOC,GAC7D,KAAKxB,EAAgBiC,UAAW,OAAOP,EAASH,EAAOC,GACvD,KAAKxB,EAAgBkC,YAAa,OAAOP,EAAWJ,GACpD,KAAKvB,EAAgBmC,YAAa,OAAOP,EAAWL,GACpD,QAAS,OAAOA,ICxClBL,EAA2B,CAC7BkB,UAAW,GACXhB,MAAO,KACPC,SAAS,GAGPgB,EAAa,SAACd,EAAmBC,GACnC,OAAOnB,EAAakB,EAAO,CAACH,MAAO,KAAMC,SAAS,KAGhDiB,EAAe,SAACf,EAAmBC,GACrC,OAAOnB,EAAakB,EAAO,CACvBH,MAAOI,EAAOJ,MACdC,SAAS,KAMXkB,EAAoB,SAAChB,EAAmBC,GAC1C,OAAOnB,EAAakB,EAAO,CACvBa,UAAWZ,EAAOY,UAClBhB,MAAO,KACPC,SAAS,KAOXmB,EAAmB,SAACjB,EAAmBC,GACzC,OAAOnB,EAAakB,EAAO,CACvBH,MAAO,KACPC,SAAS,KAmCFQ,EA/BC,WAAwE,IAAvEN,EAAsE,uDAAlDL,EAAcM,EAAoC,uCACnF,OAAQA,EAAOM,MAGX,KAAK7B,EAAiBwC,kBACtB,KAAKxC,EAAiByC,mBACtB,KAAKzC,EAAiB0C,wBACtB,KAAK1C,EAAiB2C,oBAClB,OAAOP,EAAWd,GAGtB,KAAKtB,EAAiB4C,iBACtB,KAAK5C,EAAiB6C,kBACtB,KAAK7C,EAAiB8C,uBACtB,KAAK9C,EAAiB+C,mBAClB,OAAOV,EAAaf,EAAOC,GAG/B,KAAKvB,EAAiBgD,oBAClB,OAAOV,EAAkBhB,EAAOC,GAEpC,KAAKvB,EAAiBiD,qBACtB,KAAKjD,EAAiBkD,0BACtB,KAAKlD,EAAiBmD,sBAClB,OAAOZ,EAAiBjB,GAE5B,QACI,OAAOA,IChEbL,EAA6B,CAC/BmC,eAAgB,GAChBC,mBAAoB,GACpBlC,MAAO,KACPC,SAAS,GAGPgB,EAAa,SAACd,EAAqBC,GACrC,OAAOnB,EAAakB,EAAO,CAACH,MAAO,KAAMC,SAAS,KAGhDiB,EAAe,SAACf,EAAqBC,GACvC,OAAOnB,EAAakB,EAAO,CACvBH,MAAOI,EAAOJ,MACdC,SAAS,KAMXkC,EAAuB,SAAChC,EAAqBC,GAE/C,OAAIA,EAAO6B,eACAhD,EAAakB,EAAO,CACvB8B,eAAgB7B,EAAO6B,eACvBjC,MAAO,KACPC,SAAS,IAIVhB,EAAakB,EAAO,CACvB+B,mBAAoB9B,EAAO8B,mBAC3BlC,MAAO,KACPC,SAAS,KAMXmB,EAAmB,SAACjB,EAAqBC,GAC3C,OAAOnB,EAAakB,EAAO,CACvBH,MAAO,KACPC,SAAS,KAiCFQ,EA5BC,WAA8E,IAA7EN,EAA4E,uDAAtDL,EAAcM,EAAwC,uCACzF,OAAQA,EAAOM,MAGX,KAAK5B,EAAmBsD,qBACxB,KAAKtD,EAAmBuD,kBACxB,KAAKvD,EAAmBwD,qBACpB,OAAOrB,EAAWd,GAGtB,KAAKrB,EAAmByD,oBACxB,KAAKzD,EAAmB0D,iBACxB,KAAK1D,EAAmB2D,oBACpB,OAAOvB,EAAaf,EAAOC,GAG/B,KAAKtB,EAAmB4D,uBACpB,OAAOP,EAAqBhC,EAAOC,GAEvC,KAAKtB,EAAmB6D,oBACxB,KAAK7D,EAAmB8D,uBACpB,OAAOxB,EAAiBjB,GAE5B,QACI,OAAOA,IChEN0C,EAAcC,YAAgB,CACvCC,KAAMC,EACNC,MAAOC,EACPC,SAAUC,IAGDC,EAAmB7E,OAAO8E,sCAAwCC,I,wBLXlEC,EAA6E,gDAmB7EC,EAAkBD,yBAIlBE,EAAc,yB,SAIf3E,K,gBAAAA,E,YAAAA,E,eAAAA,M,cAOAC,K,gBAAAA,E,iBAAAA,M,KMrCL,ICUF2E,EDVQC,EAAgBC,IAAMC,OAAO,CACtCC,QAASP,IAGAQ,EAAgBH,IAAMC,OAAO,CACtCC,QAASP,EACTS,aAAc,SEEZ5D,EAAc,SAACN,GACjB,MAAO,CACHW,KAAM9B,EAAgBgC,aACtBb,KAAMA,IAkBDmE,EAAS,WAGlB,OAFAC,aAAaC,WR9BiB,QQgCvB,CACH1D,KAAM9B,EAAgBkC,cAIjBuD,EAAiB,WAC1B,OAAO,SAACC,GACJ,IAAMvE,EAhBNoE,aAAaI,QRvBa,QQwBnBC,KAAKC,MAAMN,aAAaI,QRxBL,SQ0BvB,KAeCxE,GAAQA,EAAK2E,MACbb,EAAMc,KRxBcC,oBQwBS7E,EAAK2E,OAAOG,MAAK,SAAAC,IACpB,IAAlBA,EAASC,KACTT,EAASjE,EAAYN,IAErBuE,EAASJ,QAIjBI,EAASJ,OAKRnB,EAAO,SAACiC,EAAkBC,GACnC,OAAO,SAACX,GAGJ,OAFAA,EAtDG,CACH5D,KAAM9B,EAAgB+B,aAuDfkD,EAAMc,KR1CKC,cQ0CY,CAACI,WAAUC,aACpCJ,MAAK,SAAAC,GACF,GAAIA,EAASC,KAAKL,MAGd,OAFAP,aAAae,QR9DC,OQ8D2BV,KAAKW,UAAUL,EAASC,OACjET,EAASjE,EAAYyE,EAASC,QACvB,KAGdK,OAAM,SAAApF,GAEH,OADAsE,EArDC,SAACtE,GACd,MAAO,CACHU,KAAM9B,EAAgBiC,UACtBb,MAAOA,GAkDUM,CAASN,EAAM8E,SAASC,KAAKM,WAC/B,OAKV7E,GAAa,WACtB,MAAO,CACHE,KAAM9B,EAAgBmC,cCjEfuE,GAXI,WAEf,IAAMC,EAAOf,KAAKC,MAAMN,aAAaI,QTFP,SSI9B,OAAIgB,GAAQA,EAAKb,MACN,CAAEc,cAAe,UAAYD,EAAKb,OAElC,ICmBFe,GAAa,WACtB,OAAO,SAACnB,GACJA,EArBG,CACH5D,KAAM7B,EAAiBwC,oBAsBvBwC,EAAM6B,IVxBY,UUyBbb,MAAK,SAAAC,GAnBQ,IAAC9D,EAoBXsD,GApBWtD,EAoBgB8D,EAASC,KAnBzC,CACHrE,KAAM7B,EAAiBgD,oBACvBb,UAAWA,QAmBNoE,OAAM,SAAApF,GACHsE,EAhBO,SAACtE,GACpB,MAAO,CACHU,KAAM7B,EAAiB4C,iBACvBzB,MAAOA,GAaU2F,CAAe3F,EAAM8E,gBA0BjCc,GAAa,SAACC,GACvB,OAAO,SAACvB,GACJA,EApBG,CACH5D,KAAM7B,EAAiByC,qBAoBvBuC,EAAMc,KV1DY,SU0DKkB,GAClBhB,MAAK,WACFP,EAjBL,CACH5D,KAAM7B,EAAiBiD,uBAiBfwC,EAASmB,SAEZL,OAAM,SAAApF,GACHsE,EAhBO,SAACtE,GACpB,MAAO,CACHU,KAAM7B,EAAiB6C,kBACvB1B,MAAOA,GAaU8F,CAAe9F,EAAM8E,SAASC,YA0B1CgB,GAAkB,SAACC,GAC5B,OAAO,SAAC1B,GACJA,EApBG,CACH5D,KAAM7B,EAAiB0C,0BAqBvBsC,EAAMoC,OV9FY,SU8FQD,EAAI,CAACE,QAASZ,OACnCT,MAAK,WACFP,EAlBL,CACH5D,KAAM7B,EAAiBkD,4BAkBfuC,EAASmB,SAEZL,OAAM,SAAApF,GACHsE,EAjBY,SAACtE,GACzB,MAAO,CACHU,KAAM7B,EAAiB8C,uBACvB3B,MAAOA,GAcUmG,CAAoBnG,EAAM8E,gBA0BtCsB,GAAc,SAACJ,GACxB,OAAO,SAAC1B,GACJA,EApBG,CACH5D,KAAM7B,EAAiB2C,sBAqBvBqC,EAAMc,KVjImB0B,qBUiIML,EAAI,KAAM,CAACE,QAASZ,OAC9CT,MAAK,WACFP,EAlBL,CACH5D,KAAM7B,EAAiBmD,wBAkBfsC,EAASmB,SAEZL,OAAM,SAAApF,GACHsE,EAjBQ,SAACtE,GACrB,MAAO,CACHU,KAAM7B,EAAiB+C,mBACvB5B,MAAOA,GAcUsG,CAAgBtG,EAAM8E,gBCxIzCyB,GAAqB,WACvB,MAAO,CACH7F,KAAM5B,EAAmBsD,uBAI3BoE,GAA0B,SAACC,GAC7B,MAAO,CACH/F,KAAM5B,EAAmB4D,uBACzBT,eAAgBwE,IAIlBC,GAA8B,SAACD,GACjC,MAAO,CACH/F,KAAM5B,EAAmB4D,uBACzBR,mBAAoBuE,IAItBE,GAAoB,SAAC3G,GACvB,MAAO,CACHU,KAAM5B,EAAmByD,oBACzBvC,MAAOA,IAIF4G,GAAgB,WAAmC,IAAlCC,EAAiC,wDAC3D,OAAO,SAACvC,GACJA,EAASiC,MAET,IAAMO,EAAOD,EX3BQ,YACQE,oBW4B7BlD,EAAM6B,IAAIoB,GACLjC,MAAK,SAAAC,GACYR,EAAduC,EAAuBL,GAAwB1B,EAASC,MAAkB2B,GAA4B5B,EAASC,UAChHK,OAAM,SAAApF,GACTsE,EAASqC,GAAkB3G,EAAM8E,gBAOvCkC,GAAsB,WACxB,MAAO,CACHtG,KAAM5B,EAAmBuD,oBAI3B4E,GAAwB,WAC1B,MAAO,CACHvG,KAAM5B,EAAmB6D,sBAI3BuE,GAAqB,SAAClH,GACxB,MAAO,CACHU,KAAM5B,EAAmB0D,iBACzBxC,MAAOA,IAIFmH,GAAiB,SAACC,GAA8C,IAA3BC,EAA0B,wDACxE,OAAO,SAAC/C,GACJA,EAAS0C,OAILK,EACUxD,EAAMyD,IXhEKP,iBWgEmBK,EAAQpB,GAAIoB,EAAS,CAAClB,QAASZ,OAE7DzB,EAAMc,KXpEC,YWoEmByC,EAAS,CAAClB,QAASZ,QAGnDT,MAAK,WACTP,EAAS2C,MACT3C,EAASsC,IAAc,OAEtBxB,OAAM,SAAApF,GACHsE,EAAS4C,GAAmBlH,EAAM8E,gBA0BrCyC,GAAgB,SAACvB,GAC1B,OAAO,SAAC1B,GACJA,EApBG,CACH5D,KAAM7B,EAAiB0C,0BAqBvBsC,EAAMoC,OXvGqBc,mBWuGQf,EAAI,CAACE,QAASZ,OAC5CT,MAAK,WACFP,EAlBL,CACH5D,KAAM7B,EAAiBkD,4BAkBfuC,EAASsC,IAAc,OAE1BxB,OAAM,SAAApF,GACHsE,EAjBU,SAACtE,GACvB,MAAO,CACHU,KAAM7B,EAAiB8C,uBACvB3B,MAAOA,GAcUwH,CAAkBxH,EAAM8E,gB,6BCrHpC2C,GAAyC,SAACC,GAAD,OAClD,4BACIhH,KAAK,SACLiH,SAAUD,EAAMC,SAChBC,UAAS,0BAAqBF,EAAME,WACpCC,QAASH,EAAMG,SAAUH,EAAMI,WAU1BC,GAA0C,SAACL,GAAD,OACnD,4BACIC,SAAUD,EAAMC,SAChBC,UAAS,0BAAqBF,EAAME,WACpCC,QAASH,EAAMG,SAAUH,EAAMI,WAG1BE,GAAyC,SAACN,GAAD,OAClD,4BACIC,SAAUD,EAAMC,SAChBC,UAAS,yBAAoBF,EAAME,WACnCC,QAASH,EAAMG,SAAUH,EAAMI,WC5B1BG,GAAmB,SAACC,EAA0BC,GAEvD,OAAQD,EAAYxH,MAChB,KAAK3B,EAAgBqJ,KACjB,OAAQD,EAAS,CACbE,SAAUH,EAAYI,WAAWC,aACjCC,UAAW,CACP9I,MAAOwI,EAAYI,WAAWE,UAC9BnD,QAAS6C,EAAYI,WAAWC,gBAI5C,QACI,OAAOJ,IAINM,GAAgB,SAACC,EAAkDR,GAE5E,IADA,IAAIS,GAAe,EACnB,MAAkBpJ,OAAOC,QAAQkJ,GAAjC,eAA0C,CAA5B,KACF,KAAOR,EAAYU,OACvBD,GAAe,GAIvB,OAAOA,GCAIE,GAtBDC,sBAAW,SAACpB,EAAcqB,GACpC,IAAIC,EAAa,oCAEbtB,EAAM1H,QACNgJ,GAAc,eASlB,OACI,oCACI,yCACID,IAAKA,EAAKnB,UAAWoB,EAAYC,SATtB,SAACC,GAChBxB,EAAMuB,UACNvB,EAAMuB,SAASC,IAOgDzJ,IAAKiI,EAAMQ,YAAYzI,KAASiI,EAAMQ,kBCgBlGiB,GAhCAL,sBAAW,SAACpB,EAAcqB,GACrC,IAAIC,EAAa,oCAEbtB,EAAM1H,QACNgJ,GAAc,eASlB,OACI,oCACI,0CAAQD,IAAKA,EAAKnB,UAAWoB,EAAYC,SAR1B,SAACC,GAChBxB,EAAMuB,UACNvB,EAAMuB,SAASC,KAMwDxB,EAAMQ,aACxER,EAAMQ,YAAYkB,QAAQC,KAAI,SAAAC,GAG3B,IAAM5J,EAAgC,kBAAjB4J,EAAO5J,MAAqB8E,KAAKW,UAAUmE,EAAO5J,OAAS6J,OAAOD,EAAO5J,OAE9F,OACI,4BAAQD,IAAK6J,EAAOE,aAAc9J,MAAOA,GACpC4J,EAAOE,uB,SRnB/B7F,K,sBAAAA,E,kBAAAA,E,YAAAA,E,+BAAAA,M,KAqBL,ISpBKA,GTqHU8F,GAjGc,SAAC/B,GAAW,IAC9BvE,EAA4BuE,EAA5BvE,SAAUuG,EAAkBhC,EAAlBgC,eADmB,EAE6CC,eAA1ExB,EAF6B,EAE7BA,SAAUyB,EAFmB,EAEnBA,aAAcC,EAFK,EAELA,MAAOnB,EAFF,EAEEA,OAAoBoB,EAFtB,EAEUC,UAAYD,mBAFtB,EAIhBE,mBAAsB,CACtCtJ,KAAM3B,EAAgBqJ,KACtBQ,KAAMjF,EAAasG,UACnBC,YAAa,UACb5B,WAAY,CACRE,UAAW,EACXD,aAAc,wDANf4B,EAJ6B,sBAcMH,mBAAwB,CAC9DtJ,KAAM3B,EAAgBqL,OACtBxB,KAAMjF,EAAa0G,QACnBjB,QAAS,KAjBuB,mBAc7BkB,EAd6B,KAcdC,EAdc,OAoBfP,mBAAwB,CACzCtJ,KAAM3B,EAAgBqL,OACtBxB,KAAMjF,EAAa6G,KACnBpB,QAAS,CACL,CAAC1J,MAAO,EAAG8J,aAAc,YACzB,CAAC9J,MAAO,EAAG8J,aAAc,YACzB,CAAC9J,MAAO,EAAG8J,aAAc,eAN1BiB,EApB6B,sBA8BAT,mBAAwB,CACxDtJ,KAAM3B,EAAgBqL,OACtBxB,KAAMjF,EAAa+G,QACnBtB,QAAS,CACL,CAAC1J,OAAO,EAAO8J,aAAc,kCAC7B,CAAC9J,OAAO,EAAM8J,aAAc,mCAL7BmB,EA9B6B,oBAwCpCC,qBAAU,WACFzH,EAAS0H,OAAS,GAClBC,MAEL,CAAC3H,IAGJyH,qBAAU,WACFd,GACAD,MAEL,CAACC,EAAoBD,IAExB,IAAMiB,EAAsB,WACxB,IAAMC,EAAkB,eAAOT,GAC/BS,EAAmB3B,QAAU,GAErB,OAARjG,QAAQ,IAARA,KAAU6H,SAAQ,SAAA5D,GACd2D,EAAmB3B,QAAQ6B,KAAK,CAACvL,MAAO0H,EAAQwB,KAAMY,aAAcpC,EAAQwB,UAGhF2B,EAAiBQ,IAmBfG,EACF,0BAAMC,SAAUvB,GAjBQ,SAACwB,GACzB,IAAMC,EAAoBjM,EAAiCgM,GAErDvF,EAA4B,CAC9BG,GAAI,EACJ4C,KAAMyC,EAAkBC,UACxBlE,QAASiE,EAAkBjE,QAC3BmE,oBAAqBF,EAAkBE,oBACvCC,UAAWH,EAAkBI,KAC7BC,eAAe,EACfC,kBAAmB,MAGvBjC,EAAe7D,MAIoC+B,UAAW,yBAA2BgE,KAAOC,WAC5F,kBAAC,GAAD,CAAO3D,YAAaiC,EAAWnK,MAAOyI,GAAcC,EAAQyB,GAAYpB,IAAKd,GAAiBkC,EAAWhC,KACzG,kBAAC,GAAD,CAAQD,YAAaoC,EAAevB,IAAKd,GAAiBqC,EAAenC,KACzE,kBAAC,GAAD,CAAQD,YAAauC,EAAY1B,IAAKd,GAAiBwC,EAAYtC,KACnE,kBAAC,GAAD,CAAQD,YAAayC,EAA2B5B,IAAKd,GAAiBwC,EAAYtC,KAClF,kBAAC,GAAD,CAAcP,UAAW,aAAzB,cAGR,OACI,yBAAKA,UAAW,sBACXsD,IUzGEY,gBAdS,SAAC3L,GACrB,MAAO,CACHgD,SAAUhD,EAAMgD,SAASjB,mBACzBjC,QAASE,EAAM8C,MAAMhD,QACrBD,MAAOG,EAAM8C,MAAMjD,UAIA,SAACsE,GACxB,OAAOyH,YAAmB,CACtBrC,eAAgB9D,IACjBtB,KAGQwH,CAA6CrC,I,UCU7CuC,GAtBG,SAACtE,GAEf,IAAIuE,EAA8B,GAWlC,OAVAvE,EAAMwE,eAAelB,SAAQ,SAAAmB,GACzBF,EAAQhB,KAAK,wBAAIxL,IAAG,UAAK0M,EAAL,WAAsBC,MAAM,OAAOD,OAGvDzE,EAAM2E,iBACN3E,EAAM4E,gBAAgBtB,SAAQ,SAAAmB,GAC1BF,EAAQhB,KAAK,wBAAIxL,IAAG,UAAK0M,EAAL,WAAsBC,MAAM,OAAOD,OAK3D,2BAAO1M,IAAK,YAAamI,UAAU,cACnC,4BACKqE,KC0BEM,GAlCI,SAAC7E,GAMhB,IANiC,IAG1B1G,EAAgH0G,EAAhH1G,UAAWwL,EAAqG9E,EAArG8E,kBAAmBC,EAAkF/E,EAAlF+E,kBAAmBJ,EAA+D3E,EAA/D2E,gBAAiBK,EAA8ChF,EAA9CgF,UAAWR,EAAmCxE,EAAnCwE,eAAgBI,EAAmB5E,EAAnB4E,gBAChGK,EAAO,GAJsB,WAMxBC,GACL,IAAIC,EAAQ,MAAQD,EAEhBE,EAAQ,GACZA,EAAM7B,KAAK,wBAAIxL,IAAK,QAAUmN,EAAG5G,GAAI,QAAU4G,GAApC,KAA0CA,EAAI,IACzDE,EAAM7B,KAAK,wBAAIxL,IAAK,OAASmN,EAAG5G,GAAI,OAAS4G,GAAI5L,EAAU4L,GAAGhE,OAC9DkE,EAAM7B,KAAK,wBAAIxL,IAAK,UAAYmN,EAAG5G,GAAI,UAAY4G,GAAI5L,EAAU4L,GAAGxF,UACpE0F,EAAM7B,KAAK,wBAAIxL,IAAK,UAAYmN,EAAG5G,GAAI,UAAY4G,GAAK5L,EAAU4L,GAAGrB,oBAAqC,UAAf,eAEvFc,GAAmBK,EAAUK,SAAS,eAClCD,EAAM7B,KAAK,wBAAIxL,IAAK,UAAYmN,EAAG5G,GAAI,SAAW4G,GAC9C,oCACI,kBAAC,GAAD,CAAe/E,QAAS,kBAAM2E,EAAkBxL,EAAU4L,GAAG5G,MAA7D,UACA,kBAAC,GAAD,CAAc4B,UAAU,OAAOC,QAAS,kBAAM4E,EAAkBzL,EAAU4L,GAAG5G,MAA7E,YAIhB2G,EAAK1B,KAAK,wBAAIxL,IAAKmN,EAAG5G,GAAI6G,GAAQC,KAjB7BF,EAAI,EAAGA,EAAI5L,EAAU6J,OAAQ+B,IAAM,EAAnCA,GAoBT,IAAMZ,EAAY,kBAAC,GAAD,CAAWE,eAAgBA,EAAgBI,gBAAiBA,EAAiBD,gBAAiBA,IAC1GW,EAAY,+BAAQL,GAE1B,OACI,kBAACM,GAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,YAAU,EAACzF,UAAW,iBAAkBoE,EAAWgB,ICxC1EM,GAJQ,kBACnB,yBAAK1F,UAAU,iCCwBJ2F,GAxBK,SAACC,EAAsBC,GAEvC,IAAMC,EAAgBC,mBAGtB/C,qBAAU,WACN8C,EAAcE,QAAUJ,KAI5B5C,qBAAU,WAON,GAAc,OAAV6C,EAAgB,CAChB,IAAMzH,EAAK6H,aAPF,WAC6B,qBAAlC,OAAOH,QAAP,IAAOA,OAAP,EAAOA,EAAeE,WACT,OAAbF,QAAa,IAAbA,KAAeE,aAKUH,GAC7B,OAAO,kBAAMK,cAAc9H,OAEhC,CAACyH,KCZOM,GAVU,SAAC5N,GACtB,IAAM4I,EAAM4E,mBAMZ,OAJA/C,qBAAU,WACN7B,EAAI6E,QAAUzN,KAGX4I,EAAI6E,S,SCCTI,GAAoBC,EAAQ,IA4DnBC,GA/CU,SAACxG,GAAW,IAC1B2E,EAAgG3E,EAAhG2E,gBAAiBK,EAA+EhF,EAA/EgF,UAAW1L,EAAoE0G,EAApE1G,UAAWyL,EAAyD/E,EAAzD+E,kBAAmBD,EAAsC9E,EAAtC8E,kBAAmB2B,EAAmBzG,EAAnByG,gBADpD,EAEjBC,aAASJ,IAAjBK,EAFyB,oBAG1BC,EAAgBP,GAAiB/M,GAGvC4J,qBAAU,WACNuD,MACD,CAACA,IAGJZ,IAAY,WACRY,MACD,KAGHvD,qBAAU,WAGF0D,GAAiBjC,GACbrL,EAAU6J,QAAUyD,EAAczD,SC3CpB,SAAC0D,EAAeC,GAE1C,GAAID,EAAE1D,SAAW2D,EAAE3D,OAAQ,OAAO,EAGlC,IADA,IAAI4D,GAAkB,EACb7B,EAAI,EAAGA,EAAI2B,EAAE1D,OAAQ+B,IAC1B,GAAIpI,KAAKW,UAAUoJ,EAAE3B,MAAQpI,KAAKW,UAAUqJ,EAAE5B,IAAK,CAC/C6B,GAAkB,EAClB,MAGR,OAAOA,EDiCUC,CAAe1N,EAAWsN,IAC3BD,OAIb,CAACrN,EAAWqL,EAAiBgC,EAAMC,IAGtC,IAAIK,OAAsBC,IAAd5N,EAA0B,kBAAC,GAAD,MAAoB,kBAAC,GAAD,CACtDkL,eAAgB,CAAC,aAAc,OAAQ,OAAQ,SAC/CI,gBAAiB,CAAC,cAClBtL,UAAWA,EACXqL,gBAAiBA,EACjBK,UAAWA,EACXF,kBAAmBA,EACnBC,kBAAmBA,IAGvB,OACI,oCACKkC,IExCE7C,gBAlBS,SAAC3L,GAAsB,IAAD,EAC1C,MAAO,CACHkM,gBAA2C,OAA1B,UAAAlM,EAAM4C,KAAKhD,YAAX,eAAiB2E,OAClCgI,UAAWvM,EAAM4C,KAAKhD,KAAOI,EAAM4C,KAAKhD,KAAK8O,MAAQ,GACrD7N,UAAWb,EAAM8C,MAAMjC,UACvBf,QAASE,EAAM8C,MAAMhD,QACrBD,MAAOG,EAAM8C,MAAMjD,UAIA,SAACsE,GACxB,OAAOyH,YAAmB,CACtBU,kBAAmB1G,GACnByG,kBAAmBpG,GACnB+H,gBAAiB1I,IAClBnB,KAGQwH,CAA6CoC,ICX7CY,GATK,WAChB,OACI,oCACI,kBAAC,GAAD,MACA,kBAAC,GAAD,Q,oBCkBGC,GAlBS,SAACrH,GAErB,IAAIsH,EAAe,qCACbC,EAAK,UAAM1F,OAAO7B,EAAMwH,cAAnB,KAMX,OAJIxH,EAAMyH,SACNH,GAAgB,mBAIhB,yBAAKpH,UAAWoH,EAAcI,MAAO,CAACH,MAAOA,IACzC,yBAAKrH,UAAW,0BAA0B,4BAAI,2BAAIF,EAAM2H,UACvD3H,EAAMI,W,4BCyBJwH,GApCDxG,sBAAW,SAACpB,EAAcqB,GACpC,IAAIC,EAAa,oDAEbtB,EAAM1H,QACNgJ,GAAc,eAGlB,IAAMuG,EAAiB,SAACrG,GAChBxB,EAAMuB,UACNvB,EAAMuB,SAASC,IAIjBsG,EAAgC,GAgBtC,OAfA9H,EAAMQ,YAAYuH,QAAQzE,SAAQ,SAAA0E,GAC9BF,EAAUvE,KACN,yBAAKxL,IAAKiQ,EAAOC,MAAO/H,UAAWoB,GAC/B,yCACIvJ,IAAG,UAAKiQ,EAAOjQ,IAAZ,gBAAuBiQ,EAAOhQ,OACjCA,MAAOgQ,EAAOhQ,MACdkI,UAAW,oBACXmB,IAAKA,EACL6G,eAAgBF,EAAOE,eACvB3G,SAAUsG,GACN7H,EAAMQ,cACd,2BAAON,UAAW,oBAAqB8H,EAAOC,YAKtD,oCACKH,M,wCCTEK,GAvBU,SAACnI,GAAkB,IACjCoI,EAAsBpI,EAAtBoI,MAAOC,EAAerI,EAAfqI,YACRC,EAASC,KAAiBC,MAEhC,OAAOF,EAAOG,KAAK,CACfL,MAAOA,EACPM,KAAML,EACNM,KAAM,UACNC,gBAAgB,EAChBC,kBAAmB,UACnBC,eAAgB,WAEjB3L,MAAM,SAAA4L,GACL,OAAIA,EAAOC,aACPV,EAAOG,KAAK,QAAS,GAAI,YAClB,GACAM,EAAOE,UACdX,EAAOG,KAAK,UAAW,GAAI,SACpB,QAFJ,O,SbVVxM,K,mCAAAA,E,kCAAAA,E,oCAAAA,Q,KAqBL,IAyJeiN,GAzJgB,SAAClJ,GAAW,IAChCmJ,EAAwDlN,GAAxDkN,iBAAkBC,EAAsCnN,GAAtCmN,iBAAkBC,EAAoBpN,GAApBoN,iBADL,EAI2CpH,eAA1ExB,EAJ+B,EAI/BA,SAAUyB,EAJqB,EAIrBA,aAAcC,EAJO,EAIPA,MAAOnB,EAJA,EAIAA,OAAoBoB,EAJpB,EAIQC,UAAYD,mBAJpB,EAKJE,oBAAkB,GALd,mBAK/BgH,EAL+B,KAKpBC,EALoB,OAOIjH,mBAAwB,CAC9DtJ,KAAM3B,EAAgBqL,OACtBxB,KAAMkI,EACN1H,QAAS,KAVyB,mBAO/BkB,EAP+B,KAOhBC,EAPgB,OAaJP,mBAAsB,CACpDtJ,KAAM3B,EAAgBqJ,KACtBQ,KAAMiI,EACNpR,IAAKoR,EACL3G,YAAa,eACb5B,WAAY,CACRE,UAAW,EACXD,aAAc,iEApBgB,mBAa/B4B,EAb+B,KAapB+G,EAboB,OAwBQlH,mBAAuB,CACjEtJ,KAAM3B,EAAgBoS,MACtBvI,KAAMmI,EACNtB,QAAS,CACL,CAACE,MAAO3Q,EAASoS,OAAQ1R,MAAO,EAAGD,IAAKT,EAASoS,OAAQxB,gBAAgB,GACzE,CAACD,MAAO3Q,EAASqS,OAAQ3R,MAAO,EAAGD,IAAKT,EAASqS,OAAQzB,gBAAgB,MA7B3C,mBAwB/B0B,EAxB+B,KAwBdC,EAxBc,KAkCtC3G,qBAAU,WACFlD,EAAMvE,SAAS0H,OAAS,EACxBC,IAEApD,EAAMd,eAAc,KAEzB,CAACc,EAAMvE,WAGVyH,qBAAU,WACFd,GACA0H,MAEL,CAAC1H,EAAoBD,IAExB,IAAMiB,EAAsB,WACxB,IAAMC,EAAkB,eAAOT,GAC/BS,EAAmB3B,QAAU,GAE7B2B,EAAmB3B,QAAQ6B,KAAK,CAACvL,MAAO,CAACkJ,KAnDzB,iBAmD6CY,aAnD7C,kBAoDhB9B,EAAMvE,SAAS6H,SAAQ,SAAA5D,GACnB2D,EAAmB3B,QAAQ6B,KAAK,CAACvL,MAAO0H,EAASoC,aAAcpC,EAAQwB,UAG3E2B,EAAiBQ,IAKfyG,EAAY,WACd,IAAMC,EAAmBxS,EAAakL,EAAW,CAACuH,aAAc,KAChER,EAAaO,GACbR,GAAa,GACbpH,KAGE8H,EAAmB,yCAAG,WAAOvG,GAAP,kBAAAmD,EAAA,yDAClBqD,EAAkBxS,EAAiCoF,KAAKC,MAAM2G,EAASwG,kBAGvExK,EAAU,CACZpB,GAAI4L,EAAgB5L,GAAK4L,EAAgB5L,GAAK,EAC9C4C,KAAMwC,EAASyG,eACfC,SAAuC,MAA7B1G,EAASkG,gBAA0BtS,EAASoS,OAASpS,EAASqS,SAGxEL,EAVoB,gCAWWnB,GAAiB,CAC5CC,MAAM,0BAAD,OAA4B8B,EAAgBhJ,MACjDmH,YAAY,aAAD,OAAe3I,EAAQwB,KAAvB,2BAA8CxB,EAAQ0K,YAbjD,eAgBEpK,EAAMP,eAAeC,GAAS,GAhBhC,wCAoBWyI,GAAiB,CAC5CC,MAAM,4CAAD,OAA8C1I,EAAQwB,KAAtD,KACLmH,YAAY,4IAtBI,gBA0BErI,EAAMP,eAAeC,GAAS,GA1BhC,4CAAH,sDA8BnB2K,EAAa,yCAAG,WAAO3G,GAAP,gBAAAmD,EAAA,6DACZqD,EAAkBxS,EAAiCoF,KAAKC,MAAM2G,EAASwG,kBAD3D,SAEa/B,GAAiB,CAACC,MAAM,UAAD,OAAY8B,EAAgBhJ,KAA5B,KAAqCmH,YAAa,iDAFtF,eAIIrI,EAAMH,cAAcqK,EAAgB5L,IAJxC,2CAAH,sDAmCbkF,EAAO,0BAAMtD,UAAW,YAAawH,MAAO,CAACH,MAAO,MAAO+C,OAAQ,SACrE,kBAAC,GAAD,CAAQjJ,IAAKd,GAAiBqC,EAAenC,GAAWD,YAAaoC,EAAerB,SAAU,SAACC,GAAD,OA3BrE,SAACA,GAC1B,IAAM+I,EAAe,eAAO9H,GACtB+H,EAAsB,eAAOZ,GAC7BM,EAA4BpN,KAAKC,MAAMyE,EAAMiJ,cAAczS,OA9GjD,kBAgHZkS,EAAgBhJ,MAChBqI,GAAa,GACbgB,EAAgB/H,YAAc,eAC9B+H,EAAgBP,aAAe,GAC/BO,EAAgBxS,IApHJ,kBAuHZwR,GAAa,GACbgB,EAAgBP,aAAeE,EAAgBhJ,KAC/CqJ,EAAgBxS,IAAMmS,EAAgBhJ,KAEtCsJ,EAAuBzC,QAAQzE,SAAQ,SAAA0E,GACnCA,EAAOjQ,IAAMmS,EAAgBhJ,KAC7B8G,EAAOE,eAAiBF,EAAOC,QAAUiC,EAAgBE,aAIjEZ,EAAae,GACbV,EAAmBW,GAIsFE,CAAqBlJ,MAC9H,kBAAC,GAAD,CAAOH,IAAKd,GAAiBkC,EAAWhC,GAAWD,YAAaiC,EAAWnK,MAAOyI,GAAcC,EAAQyB,KACxG,kBAAC,GAAD,CAAOpB,IAAKd,GAAiBqJ,EAAgBnJ,GAAWD,YAAaoJ,IAErE,yBAAK1J,UAAW,cACZ,kBAAC,GAAD,CAAcC,QAAS+B,EAAa+H,IAAuBX,EAAY,YAAc,YACpFA,EAAY,kBAAC,GAAD,CAAcpJ,UAAW,OAAQC,QAAS+B,EAAamI,IAAvD,kBAAuG,OAI5H,OACI,oCACK7G,IcjKEY,gBAhBS,SAAC3L,GACrB,MAAO,CACHgD,SAAUhD,EAAMgD,SAASlB,eACzBhC,QAASE,EAAM8C,MAAMhD,QACrBD,MAAOG,EAAM8C,MAAMjD,UAIA,SAACsE,GACxB,OAAOyH,YAAmB,CACtBnF,cAAeA,GACfO,eAAgBA,GAChBI,cAAeA,IAChBjD,KAGQwH,CAA6C8E,ICD7CyB,GAfS,WASpB,OACI,yBAAKjD,MAAO,CAAC4C,OAAQ,SACjB,kBAAC,GAAD,CAAcnK,QATC,WACnBhE,EAAM6B,I/BiBmB4M,uB+BjBI,CAACpM,QAASZ,OAClCT,MAAK,SAAAC,IzBEkB,SAACyN,EAAkBC,EAAkBC,GACrE,IAAMC,EAAMlU,OAAOmU,IAAIC,gBAAgB,IAAIC,KAAK,CAACJ,KAC3CK,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAOP,EACZI,EAAKI,aAAa,WAAlB,UAAiCX,EAAjC,YAA6CC,IAC7CO,SAASI,KAAKC,YAAYN,GAC1BA,EAAKO,QyBPOC,CAAqB,YAAa,MAAOxO,EAASC,WAMtD,YCOGwO,GAdG,SAAC7L,GAEf,OACI,oCACMA,EAAM2E,gBACJ,yBAAKzE,UAAW,mBAAqBgE,KAAO4H,WACxC,kBAAC,GAAD,CAAMtE,aAAc,GAAIC,QAAQ,EAAME,OAAQ,YAAY,kBAAC,GAAD,OAC1D,kBAAC,GAAD,CAAMH,aAAc,GAAIC,QAAQ,EAAME,OAAQ,qBAAqB,kBAAC,GAAD,QAHjD,wBAAID,MAAO,CAACqE,MAAO,QAAnB,kBCJvB3H,gBANS,SAAC3L,GAAsB,IAAD,EAC1C,MAAO,CACHkM,qBAA4CuC,KAA3B,UAAAzO,EAAM4C,KAAKhD,YAAX,eAAiB2E,UAI3BoH,CAAyByH,IC+CzBG,eAAW5H,aAxCF,SAAC3L,GAAsB,IAAD,EAC1C,MAAO,CACHkM,gBAA2C,OAA1B,UAAAlM,EAAM4C,KAAKhD,YAAX,eAAiB2E,WATf,SAACJ,GACxB,OAAOyH,YAAmB,CACtB4H,UAAWtP,EACXuP,eAAgBhN,IACjBtC,KA2CmBwH,EAhCG,SAACpE,GAAkB,IACrCiM,EAA6BjM,EAA7BiM,UAAWC,EAAkBlM,EAAlBkM,eAElBhJ,qBAAU,WACN+I,IACAC,MACD,CAACD,EAAWC,IAEf,IAAIC,EACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO/M,KAAMpD,EAAaoQ,OAAK,EAACC,OAAQjF,KACxC,kBAAC,IAAD,CAAUkF,GAAItQ,KActB,OAVIgE,EAAM2E,kBACNwH,EACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO/M,KlCbIpD,6BkCaeqQ,OAAQ,kBAAM,kBAAC,GAAD,SACxC,kBAAC,IAAD,CAAOjN,KAAMpD,EAAaoQ,OAAK,EAACC,OAAQjF,KACxC,kBAAC,IAAD,CAAUkF,GAAItQ,MAMtB,yBAAK0L,MAAO,CAAC6E,UAAW,WACnBJ,O,8DCxBEK,GAlBO,SAACxM,GAAkB,IAC9BoI,EAA0CpI,EAA1CoI,MAAOC,EAAmCrI,EAAnCqI,YAAa2C,EAAsBhL,EAAtBgL,IAAKyB,EAAiBzM,EAAjByM,cAC1BnE,EAASC,KAAiBC,MAC1BkE,EAA+BrB,SAASC,cAAc,OAM5D,OAJIN,GAAOyB,IACPC,EAAaC,UAAb,2BAA6C3B,EAA7C,6BAAqEyB,EAArE,kBAGGnE,EAAOG,KAAK,CACXL,MAAOA,EACPM,KAAML,EACNuE,OAAQ5B,GAAOyB,EAAgBC,EAAe,KAC9C/D,KAAM,OACNE,kBAAmB,UC0BhBgE,GAzCQ,SAAC7M,GAAkB,IAC/B8M,EAAkC9M,EAAlC8M,cAAeC,EAAmB/M,EAAnB+M,gBAChBzE,EAASC,KAAiBC,MAEhC,OAAOF,EAAOG,KAAK,CACfL,MAAO,oBACPM,KAAK,uLAELG,kBAAmB,WACnBmE,qBAAqB,EACrBC,kBAAkB,EAClBC,kBAAmB,OACnBC,iBAAkB,SAClBC,kBAAmB,kBAAO9E,EAAO+E,aACjCC,WAAW,WAAD,8BAAE,mCAAAzG,EAAA,yDACF0G,EAAgBjF,EAAOkF,WAAYC,cAAc,UACjDC,EAAgBpF,EAAOkF,WAAYC,cAAc,aAEjDnQ,EAAWiQ,EAAcvV,MAAM2V,OAC/BpQ,EAAWmQ,EAAc1V,MAAM2V,OAEhCrQ,GAAaC,EAPV,uBAQJ+K,EAAOsF,sBAAsB,gCARzB,mBASG,GATH,uBAYsBd,EAAcxP,EAAUC,GAZ9C,yCAcJ+K,EAAOsF,sBAAsB,qCAdzB,mBAeG,GAfH,kCAkBD,GAlBC,4CAAF,kDAAC,KAoBZzQ,MAAK,SAAC4L,GACDA,EAAO8E,aACPd,QCkDGe,GA3EiB,SAAC9N,GAE7B,IA4BM+N,EAAY/N,EAAM2E,gBAAkBT,KAAO8J,sBAAwB9J,KAAO+J,gBAC1EC,EAAiClO,EAAM2E,gBAAkB,CAACwJ,OAAQ,KAAMC,GAAI,WAAa,CAC3FC,QAAS,OACTF,OAAQ,KACRC,GAAI,WAGFE,EACF,kBAACC,GAAA,EAAIC,KAAL,CACItO,UAAW6N,EACX5N,QAASH,EAAM2E,gBAAkB3E,EAAMyO,cAd7B,WACd5B,GAAe,CAACC,cAAe9M,EAAM8M,cAAeC,gBAAiB/M,EAAM+M,oBActE/M,EAAM2E,gBAAkB,UAAY,YAI7C,OACI,kBAAC,KAAgBuJ,EACb,kBAAC,KAAYQ,MAAb,CAAmBxO,UAAWgE,KAAOyK,mBACjC,yBACIzO,UAAWgE,KAAO0K,WAClBC,IAAI,eACJC,IAAKvI,EAAQvG,EAAM2E,gBAAkB,GAA4C,OAGzF,kBAAC,iBAAD,CAAe2H,GAAItQ,GACf,kBAACuS,GAAA,EAAIC,KAAL,KACI,kBAAC,KAAYE,MAAb,CACIxO,UAAWF,EAAM2E,gBAAkBT,KAAO6K,uBAAyB7K,KAAO8K,WAD9E,YAKR,kBAAC,KAAYC,OAAb,CAAoBC,gBAAc,0BAClC,kBAAC,KAAYC,SAAb,CAAsB7Q,GAAG,yBACrB,kBAACiQ,GAAA,EAAD,KACI,kBAACA,GAAA,EAAIC,KAAL,CAAUtO,UAAW6N,EAAW5N,QA9DrB,kBACvBqM,GAAc,CACVpE,MAAO,UACPC,YAAa,wSACb2C,IAAK,6BACLyB,cAAe,qBAyDP,WACA,kBAAC8B,GAAA,EAAIC,KAAL,CAAUtO,UAAW6N,EAAW5N,QAvDd,kBAC9BqM,GAAc,CACVpE,MAAO,mBACPC,YAAa,gUACb2C,IAAK,8DACLyB,cAAe,kBAkDP,oBACA,kBAAC8B,GAAA,EAAIC,KAAL,CAAUtO,UAAW6N,EAAW5N,QAhDvB,kBACrBqM,GAAc,CACVpE,MAAO,yBACPC,YAAa,eACb2C,IAAKjP,EACL0Q,cAAe,uBA2CP,MACCzM,EAAM2E,gBAAkB,kBAAC,iBAAD,CAAe2H,GrCzDjCtQ,8BqCyDkD,kBAACuS,GAAA,EAAIC,KAAL,CAAUtO,UAAW6N,GAArB,UAAmE,KAC3HO,MCpENlK,gBAdS,SAAC3L,GAAsB,IAAD,EAC1C,MAAO,CACHkM,qBAA4CuC,KAA3B,UAAAzO,EAAM4C,KAAKhD,YAAX,eAAiB2E,WAIf,SAACJ,GACxB,OAAOyH,YAAmB,CACtByI,cAAezR,EACf0R,gBAAiBjU,GACjB2V,cAAejS,GAChBI,KAGQwH,CAA6C0J,ICN7CsB,GAXI,SAACpP,GAChB,OACI,oCACI,kBAAC,GAAD,MACA,0BAAME,UAAU,QACXF,EAAMI,YCMjBiP,GAAQC,YAAYnU,EAAaQ,EAAiB4T,YAAgBC,OAElEC,GACF,kBAAC,IAAD,CAAUJ,MAAOA,IACb,kBAAC,gBAAD,KACI,kBAAC,GAAD,KACI,kBAAC,GAAD,SAMhBK,IAASrD,OAAOoD,GAAKpE,SAASsE,eAAe,S1CyGvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3S,MAAK,SAAA4S,GACJA,EAAaC,gBAEdtS,OAAM,SAAApF,GACL2X,QAAQ3X,MAAMA,EAAMqF,c","file":"static/js/main.c65353cf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"brandText\":\"navbar_brandText__3XSWe\",\"brandImage\":\"navbar_brandImage__edego\",\"defaultLinkText\":\"navbar_defaultLinkText__2jzNV\",\"authenticatedBrandText\":\"navbar_authenticatedBrandText__3oLFp\",\"authenticatedLinkText\":\"navbar_authenticatedLinkText__g8guY\",\"invisibleOnMobile\":\"navbar_invisibleOnMobile__30ez-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"queueForm\":\"queueForm_queueForm__3UrPa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"adminPage\":\"adminPage_adminPage__3inFq\"};","module.exports = __webpack_public_path__ + \"static/media/hellothere.be0ec76a.mp3\";","module.exports = __webpack_public_path__ + \"static/media/oslometsvart.3b9b0cc3.png\";","module.exports = __webpack_public_path__ + \"static/media/oslomethvit.2c306d99.png\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export enum AuthActionTypes {\r\n    AUTH_START = \"AUTH_START\",\r\n    AUTH_SUCCESS = \"AUTH_SUCCESS\",\r\n    AUTH_FAIL = \"AUTH_FAIL\",\r\n    AUTH_LOGOUT = \"AUTH_LOGOUT\",\r\n\r\n    CLEAR_ERROR = \"CLEAR_ERROR\",\r\n}\r\n\r\nexport enum QueueActionTypes {\r\n    FETCH_QUEUE_START = \"FETCH_QUEUE_START\",\r\n    FETCH_QUEUE_SUCCESS = \"FETCH_QUEUE_SUCCESS\",\r\n    FETCH_QUEUE_FAIL = \"FETCH_QUEUE_FAIL\",\r\n\r\n    ADD_TO_QUEUE_START = \"ADD_TO_QUEUE_START\",\r\n    ADD_TO_QUEUE_SUCCESS = \"ADD_TO_QUEUE_SUCCESS\",\r\n    ADD_TO_QUEUE_FAIL = \"ADD_TO_QUEUE_FAIL\",\r\n\r\n    DELETE_FROM_QUEUE_START = \"DELETE_FROM_QUEUE_START\",\r\n    DELETE_FROM_QUEUE_SUCCESS = \"DELETE_FROM_QUEUE_SUCCESS\",\r\n    DELETE_FROM_QUEUE_FAIL = \"DELETE_FROM_QUEUE_FAIL\",\r\n\r\n    DONE_IN_QUEUE_START = \"DONE_IN_QUEUE_START\",\r\n    DONE_IN_QUEUE_SUCCESS = \"DONE_IN_QUEUE_SUCCESS\",\r\n    DONE_IN_QUEUE_FAIL = \"DONE_IN_QUEUE_FAIL\",\r\n}\r\n\r\nexport enum SubjectActionTypes {\r\n    FETCH_SUBJECTS_START = \"FETCH_SUBJECTS_START\",\r\n    FETCH_SUBJECTS_SUCCESS = \"FETCH_SUBJECTS_SUCCESS\",\r\n    FETCH_SUBJECTS_FAIL = \"FETCH_SUBJECTS_FAIL\",\r\n\r\n    ADD_SUBJECT_START = \"ADD_SUBJECT_START\",\r\n    ADD_SUBJECT_SUCCESS = \"ADD_SUBJECT_SUCCESS\",\r\n    ADD_SUBJECT_FAIL = \"ADD_SUBJECT_FAIL\",\r\n\r\n    EDIT_SUBJECT_START = \"EDIT_SUBJECT_START\",\r\n    EDIT_SUBJECT_SUCCESS = \"EDIT_SUBJECT_SUCCESS\",\r\n    EDIT_SUBJECT_FAIL = \"EDIT_SUBJECT_FAIL\",\r\n\r\n    DELETE_SUBJECT_START = \"DELETE_SUBJECT_START\",\r\n    DELETE_SUBJECT_SUCCESS = \"DELETE_SUBJECT_SUCCESS\",\r\n    DELETE_SUBJECT_FAIL = \"DELETE_SUBJECT_FAIL\",\r\n}","import {objectConditionalByEnvironment} from \"../utilities/objectUtilities\";\r\n\r\n/* ----- Authentication ------ */\r\nexport const LOCAL_STORAGE_USER = \"user\";\r\n\r\n/* ----- API ------ */\r\nexport const API_BASE_PATH = objectConditionalByEnvironment(\"http://localhost:8080/api/\", \"https://orakelqueueservice.herokuapp.com/api/\");\r\n\r\n//LandingPage\r\nexport const QUEUE_PATH = \"queue/\";\r\nexport const CONFIRM_DONE_PATH = QUEUE_PATH + \"confirmdone/\";\r\n\r\n//Subjects\r\nexport const SUBJECTS_PATH = \"subjects/\";\r\nexport const CURRENT_SUBJECTS_PATH = SUBJECTS_PATH + \"current/\";\r\nexport const EDIT_SUBJECT_PATH = SUBJECTS_PATH + \"edit/\"\r\nexport const DELETE_SUBJECT_PATH = SUBJECTS_PATH + \"delete/\";\r\n\r\n//Auth\r\nexport const AUTH_PATH = \"auth/\";\r\nexport const LOGIN_PATH = AUTH_PATH + \"signin\";\r\nexport const CHECK_TOKEN_PATH = AUTH_PATH + \"isTokenValid\";\r\n\r\n//Resources\r\nexport const RESOURCES_BASE_PATH = \"resources/\";\r\nexport const USER_GUIDE_PATH = API_BASE_PATH + RESOURCES_BASE_PATH + \"userguide/\"; //Axios-instance is configured to add API_BASE_PATH, but retrieval of the userguide is done without axios.\r\nexport const QUEUE_EXPORT_PATH = RESOURCES_BASE_PATH + \"queuedata/\"\r\n\r\n/* ----- Routing ----- */\r\nexport const INDEX_ROUTE = \"/Orakel_Queue_Client/\";\r\nexport const ADMIN_ROUTE = INDEX_ROUTE + \"Admin\";\r\n\r\n/* ----- Form Elements ----- */\r\nexport enum FormElementType {\r\n    SELECT = \"select\",\r\n    TEXT = \"text\",\r\n    RADIO = \"radio\",\r\n}\r\n\r\n/* ----- Semesters ----- */\r\nexport enum Semester {\r\n    SPRING = \"Spring\",\r\n    AUTUMN = \"Autumn\",\r\n}\r\n\r\n\r\n//TODO Add all hardcoded string values to this file\r\n","export const updateObject = (oldObject: any, updatedProperties: any) => {\r\n    return {\r\n        ...oldObject,\r\n        ...updatedProperties\r\n    };\r\n};\r\n\r\n/**\r\n * Converts all string-values in a object which can be converted to boolean or number types to their respective primitive\r\n * datatype.\r\n *\r\n * At the time of writing, use cases for this function is when posting an object to the API, which expects primitives\r\n * rather than string values.\r\n *\r\n * @param originalObject The object which should have its string values converted to primitives.\r\n * @return A clone of the original object with its string values converted to primitives.\r\n */\r\nexport const convertObjectStringsToPrimitives = (originalObject: any) => {\r\n    const convertedObject = {...originalObject}\r\n\r\n    for (let [key, value] of Object.entries(convertedObject)) {\r\n        if (typeof value == \"string\") {\r\n\r\n            if (value === \"true\" || value === \"false\") {\r\n                convertedObject[key] = (value == \"true\");\r\n            }\r\n\r\n            if (!isNaN(Number(value))) {\r\n                convertedObject[key] = parseFloat(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    return convertedObject;\r\n}\r\n\r\nexport const objectConditionalByEnvironment = (devObject: any, productionObject: any) => {\r\n    return process.env.NODE_ENV === \"production\" ? productionObject : devObject;\r\n};","import {AuthActionTypes} from \"../actions/actionTypes\";\r\nimport {updateObject} from \"../../utilities/objectUtilities\";\r\nimport {AuthAction, AuthState} from \"../types\";\r\n\r\nconst initialState: AuthState = {\r\n    user: null,\r\n    error: null,\r\n    loading: false\r\n};\r\n\r\nconst authStart = (state: AuthState, action: AuthAction): AuthState => {\r\n    return updateObject(state, {error: null, loading: true});\r\n};\r\n\r\nconst authSuccess = (state: AuthState, action: AuthAction): AuthState => {\r\n    return updateObject(state, {\r\n        user: action.user,\r\n        error: null,\r\n        loading: false\r\n    });\r\n};\r\n\r\nconst authFail = (state: AuthState, action: AuthAction): AuthState => {\r\n    return updateObject(state, {\r\n        error: action.error,\r\n        loading: false\r\n    });\r\n};\r\n\r\nconst authLogout = (state: AuthState, action: AuthAction): AuthState => {\r\n    return updateObject(state, {user: null});\r\n};\r\n\r\nconst clearError = (state: AuthState, action: AuthAction): AuthState => {\r\n    return updateObject(state, {error: null})\r\n}\r\n\r\nconst reducer = (state: AuthState = initialState, action: AuthAction) => {\r\n    switch(action.type) {\r\n        case AuthActionTypes.AUTH_START: return authStart(state, action);\r\n        case AuthActionTypes.AUTH_SUCCESS: return authSuccess(state, action);\r\n        case AuthActionTypes.AUTH_FAIL: return authFail(state, action);\r\n        case AuthActionTypes.AUTH_LOGOUT: return authLogout(state, action);\r\n        case AuthActionTypes.CLEAR_ERROR: return clearError(state, action);\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import {QueueActionTypes} from \"../actions/actionTypes\";\r\nimport {updateObject} from \"../../utilities/objectUtilities\";\r\nimport {QueueAction, QueueState} from \"../types\";\r\n\r\nconst initialState: QueueState = {\r\n    queueData: [],\r\n    error: null,\r\n    loading: false\r\n};\r\n\r\nconst initAction = (state: QueueState, action: QueueAction): QueueState => {\r\n    return updateObject(state, {error: null, loading: true});\r\n};\r\n\r\nconst failedAction = (state: QueueState, action: QueueAction): QueueState => {\r\n    return updateObject(state, {\r\n        error: action.error,\r\n        loading: false\r\n    })\r\n};\r\n\r\n/* ----- Fetch LandingPage Data ----- */\r\n\r\nconst fetchQueueSuccess = (state: QueueState, action: QueueAction): QueueState => {\r\n    return updateObject(state, {\r\n        queueData: action.queueData,\r\n        error: null,\r\n        loading: false\r\n    });\r\n};\r\n\r\n\r\n/* ----- Add, Delete and Remove in LandingPage ----- */\r\n\r\nconst addRemoveSuccess = (state: QueueState, action: QueueAction): QueueState => {\r\n    return updateObject(state, {\r\n        error: null,\r\n        loading: false\r\n    })\r\n};\r\n\r\nconst reducer = (state: QueueState = initialState, action: QueueAction): QueueState => {\r\n    switch (action.type) {\r\n\r\n        //Start cases\r\n        case QueueActionTypes.FETCH_QUEUE_START:\r\n        case QueueActionTypes.ADD_TO_QUEUE_START:\r\n        case QueueActionTypes.DELETE_FROM_QUEUE_START:\r\n        case QueueActionTypes.DONE_IN_QUEUE_START:\r\n            return initAction(state, action);\r\n\r\n        //Fail cases\r\n        case QueueActionTypes.FETCH_QUEUE_FAIL:\r\n        case QueueActionTypes.ADD_TO_QUEUE_FAIL:\r\n        case QueueActionTypes.DELETE_FROM_QUEUE_FAIL:\r\n        case QueueActionTypes.DONE_IN_QUEUE_FAIL:\r\n            return failedAction(state, action);\r\n\r\n        //Success cases\r\n        case QueueActionTypes.FETCH_QUEUE_SUCCESS:\r\n            return fetchQueueSuccess(state, action);\r\n\r\n        case QueueActionTypes.ADD_TO_QUEUE_SUCCESS:\r\n        case QueueActionTypes.DELETE_FROM_QUEUE_SUCCESS:\r\n        case QueueActionTypes.DONE_IN_QUEUE_SUCCESS:\r\n            return addRemoveSuccess(state, action);\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import {SubjectActionTypes} from \"../actions/actionTypes\";\r\nimport {updateObject} from \"../../utilities/objectUtilities\";\r\nimport {SubjectAction, SubjectState} from \"../types\";\r\n\r\nconst initialState: SubjectState = {\r\n    allSubjectData: [],\r\n    currentSubjectData: [],\r\n    error: null,\r\n    loading: false\r\n};\r\n\r\nconst initAction = (state: SubjectState, action: SubjectAction): SubjectState => {\r\n    return updateObject(state, {error: null, loading: true});\r\n};\r\n\r\nconst failedAction = (state: SubjectState, action: SubjectAction): SubjectState => {\r\n    return updateObject(state, {\r\n        error: action.error,\r\n        loading: false\r\n    })\r\n};\r\n\r\n/* ----- Fetch Subject Data ----- */\r\n\r\nconst fetchSubjectsSuccess = (state: SubjectState, action: SubjectAction): SubjectState => {\r\n\r\n    if (action.allSubjectData) {\r\n        return updateObject(state, {\r\n            allSubjectData: action.allSubjectData,\r\n            error: null,\r\n            loading: false\r\n        });\r\n    }\r\n\r\n    return updateObject(state, {\r\n        currentSubjectData: action.currentSubjectData,\r\n        error: null,\r\n        loading: false\r\n    })\r\n};\r\n\r\n/* ----- Add, Update and Delete subjects ----- */\r\n\r\nconst addRemoveSuccess = (state: SubjectState, action: SubjectAction): SubjectState => {\r\n    return updateObject(state, {\r\n        error: null,\r\n        loading: false\r\n    })\r\n};\r\n\r\n\r\nconst reducer = (state: SubjectState = initialState, action: SubjectAction): SubjectState => {\r\n    switch (action.type) {\r\n\r\n        //Start cases\r\n        case SubjectActionTypes.FETCH_SUBJECTS_START:\r\n        case SubjectActionTypes.ADD_SUBJECT_START:\r\n        case SubjectActionTypes.DELETE_SUBJECT_START:\r\n            return initAction(state, action);\r\n\r\n        //Fail cases\r\n        case SubjectActionTypes.FETCH_SUBJECTS_FAIL:\r\n        case SubjectActionTypes.ADD_SUBJECT_FAIL:\r\n        case SubjectActionTypes.DELETE_SUBJECT_FAIL:\r\n            return failedAction(state, action);\r\n\r\n        //Success cases\r\n        case SubjectActionTypes.FETCH_SUBJECTS_SUCCESS:\r\n            return fetchSubjectsSuccess(state, action);\r\n\r\n        case SubjectActionTypes.ADD_SUBJECT_SUCCESS:\r\n        case SubjectActionTypes.DELETE_SUBJECT_SUCCESS:\r\n            return addRemoveSuccess(state, action);\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import {combineReducers, compose} from \"redux\";\r\nimport authReducer from \"./reducers/authReducer\";\r\nimport queueReducer from \"./reducers/queueReducer\";\r\nimport subjectReducer from \"./reducers/subjectReducer\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\nexport const rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    queue: queueReducer,\r\n    subjects: subjectReducer,\r\n});\r\n\r\nexport const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>","import axios from \"axios\";\r\nimport {API_BASE_PATH} from \"./constants/constants\";\r\n\r\nexport const REST_INSTANCE = axios.create({\r\n    baseURL: API_BASE_PATH\r\n});\r\n\r\nexport const FILE_INSTANCE = axios.create({\r\n    baseURL: API_BASE_PATH,\r\n    responseType: \"blob\"\r\n});\r\n\r\nexport const FILE_DOWNLOAD_CONFIG = (filename: String, filetype: String, responseData: Blob) => {\r\n    const url = window.URL.createObjectURL(new Blob([responseData]));\r\n    const link = document.createElement(\"a\");\r\n    link.href = url;\r\n    link.setAttribute(\"download\", `${filename}.${filetype}`);\r\n    document.body.appendChild(link);\r\n    link.click();\r\n}","import React, {FC, useEffect, useState} from \"react\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport styles from \"./queueForm.module.css\"\r\n\r\nimport {FormElementType} from \"../../../constants/constants\";\r\nimport {SubmitButton} from \"../../UI/Buttons/buttons\";\r\nimport {convertObjectStringsToPrimitives} from \"../../../utilities/objectUtilities\";\r\nimport {ISelectConfig, ITextConfig} from \"../../../models/inputModels\";\r\nimport {createUseFormRef, inputHasError} from \"../../../utilities/formUtilities\";\r\nimport Input from \"../Inputs/input\";\r\nimport Select from \"../Inputs/select\";\r\nimport {IQueueEntity, ISubject} from \"../../../models/types\";\r\n\r\nenum FormElements {\r\n    FIRSTNAME = \"firstname\",\r\n    SUBJECT = \"subject\",\r\n    YEAR = \"year\",\r\n    DIGITAL = \"digitalConsultation\",\r\n}\r\n\r\ntype FormValues = {\r\n    firstname: string,\r\n    subject: string,\r\n    year: string,\r\n    digital: string\r\n}\r\n\r\ntype Props = {\r\n    subjects: Array<ISubject>;\r\n    loading: boolean;\r\n    error: string | null;\r\n    addQueueEntity: (queueEntity: IQueueEntity) => void;\r\n}\r\n\r\nconst QueueForm: FC<Props> = (props) => {\r\n    const {subjects, addQueueEntity} = props;\r\n    const {register, handleSubmit, reset, errors, formState: {isSubmitSuccessful}} = useForm();\r\n\r\n    const [nameInput] = useState<ITextConfig>({\r\n        type: FormElementType.TEXT,\r\n        name: FormElements.FIRSTNAME,\r\n        placeholder: \"Fornavn\",\r\n        validation: {\r\n            minLength: 3,\r\n            errorMessage: \"Vennligst oppgi et fornavn på minst 3 bokstaver\"\r\n        }\r\n    })\r\n\r\n    const [subjectSelect, setSubjectSelect] = useState<ISelectConfig>({\r\n        type: FormElementType.SELECT,\r\n        name: FormElements.SUBJECT,\r\n        options: []\r\n    });\r\n\r\n    const [yearSelect] = useState<ISelectConfig>({\r\n        type: FormElementType.SELECT,\r\n        name: FormElements.YEAR,\r\n        options: [\r\n            {value: 1, displayValue: \"1. år\"},\r\n            {value: 2, displayValue: \"2. år\"},\r\n            {value: 3, displayValue: \"3. år\"}\r\n        ]\r\n    })\r\n\r\n    const [digitalConsultationSelect] = useState<ISelectConfig>({\r\n        type: FormElementType.SELECT,\r\n        name: FormElements.DIGITAL,\r\n        options: [\r\n            {value: false, displayValue: \"Fysisk Veiledning (Datatorget)\"},\r\n            {value: true, displayValue: \"Digital Veiledning (Discord)\"}\r\n        ]\r\n    })\r\n\r\n    //Use effect only to be triggered when the component is first rendered.\r\n    useEffect(() => {\r\n        if (subjects.length > 0) {\r\n            fillSubjectSelector();\r\n        }\r\n    }, [subjects])\r\n\r\n    //Use effect to run whenever the form is submitted successfully.\r\n    useEffect(() => {\r\n        if (isSubmitSuccessful) {\r\n            reset();\r\n        }\r\n    }, [isSubmitSuccessful, reset])\r\n\r\n    const fillSubjectSelector = () => {\r\n        const subjectListUpdated = {...subjectSelect};\r\n        subjectListUpdated.options = [];\r\n\r\n        subjects?.forEach(subject => {\r\n            subjectListUpdated.options.push({value: subject.name, displayValue: subject.name});\r\n        });\r\n\r\n        setSubjectSelect(subjectListUpdated);\r\n    };\r\n\r\n    const registrationHandler = (formData: FormValues) => {\r\n        const primitiveFormData = convertObjectStringsToPrimitives(formData);\r\n\r\n        const queueEntity: IQueueEntity = {\r\n            id: 0, //Id is set in the API\r\n            name: primitiveFormData.firstname,\r\n            subject: primitiveFormData.subject,\r\n            digitalConsultation: primitiveFormData.digitalConsultation,\r\n            studyYear: primitiveFormData.year,\r\n            confirmedDone: false,\r\n            timeConfirmedDone: null\r\n        };\r\n\r\n        addQueueEntity(queueEntity);\r\n    };\r\n\r\n    const form =\r\n        <form onSubmit={handleSubmit(registrationHandler)} className={\"form-inline mt-5 mb-5 \" + styles.queueForm}>\r\n            <Input inputConfig={nameInput} error={inputHasError(errors, nameInput)} ref={createUseFormRef(nameInput, register)}/>\r\n            <Select inputConfig={subjectSelect} ref={createUseFormRef(subjectSelect, register)}/>\r\n            <Select inputConfig={yearSelect} ref={createUseFormRef(yearSelect, register)}/>\r\n            <Select inputConfig={digitalConsultationSelect} ref={createUseFormRef(yearSelect, register)}/>\r\n            <SubmitButton className={\"ml-2 mr-2\"}>Registrer</SubmitButton>\r\n        </form>\r\n\r\n    return (\r\n        <div className={\"bg-white pb-1 pt-1\"}>\r\n            {form}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default QueueForm","import {REST_INSTANCE as axios} from \"../../axiosAPI\";\r\nimport {AuthActionTypes} from \"./actionTypes\";\r\nimport {LOGIN_PATH, CHECK_TOKEN_PATH, LOCAL_STORAGE_USER} from \"../../constants/constants\";\r\nimport {AuthDispatch, IUser} from \"../types\";\r\n\r\nconst authStart = () => {\r\n    return {\r\n        type: AuthActionTypes.AUTH_START\r\n    }\r\n};\r\n\r\nconst authSuccess = (user: IUser) => {\r\n    return {\r\n        type: AuthActionTypes.AUTH_SUCCESS,\r\n        user: user\r\n    }\r\n};\r\n\r\nconst authFail = (error: string) => {\r\n    return {\r\n        type: AuthActionTypes.AUTH_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nconst getCurrentUser = (): IUser | null => {\r\n    if (localStorage.getItem(LOCAL_STORAGE_USER)) {\r\n        return JSON.parse(localStorage.getItem(LOCAL_STORAGE_USER)!);\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem(LOCAL_STORAGE_USER);\r\n\r\n    return {\r\n        type: AuthActionTypes.AUTH_LOGOUT\r\n    }\r\n};\r\n\r\nexport const checkValidAuth = () => {\r\n    return (dispatch: AuthDispatch) => {\r\n        const user = getCurrentUser();\r\n\r\n        if (user && user.token) {\r\n            axios.post(CHECK_TOKEN_PATH, user.token).then(response => {\r\n                if (response.data === true) {\r\n                    dispatch(authSuccess(user))\r\n                } else {\r\n                    dispatch(logout())\r\n                }\r\n            });\r\n        } else {\r\n            dispatch(logout())\r\n        }\r\n    }\r\n};\r\n\r\nexport const auth = (username: string, password: string) => {\r\n    return (dispatch: AuthDispatch) => {\r\n        dispatch(authStart());\r\n\r\n        return axios.post(LOGIN_PATH, {username, password})\r\n            .then(response => {\r\n                if (response.data.token) {\r\n                    localStorage.setItem(LOCAL_STORAGE_USER, JSON.stringify(response.data));\r\n                    dispatch(authSuccess(response.data));\r\n                    return true\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch(authFail(error.response.data.message))\r\n                return false;\r\n            });\r\n    }\r\n};\r\n\r\nexport const clearError = () => {\r\n    return {\r\n        type: AuthActionTypes.CLEAR_ERROR\r\n    }\r\n}","import {LOCAL_STORAGE_USER} from \"../constants/constants\";\r\n\r\n//TODO Create of find a type for Authorization headers.\r\nconst authHeader = () => {\r\n\r\n    const USER = JSON.parse(localStorage.getItem(LOCAL_STORAGE_USER)!);\r\n\r\n    if (USER && USER.token) {\r\n        return { Authorization: \"Bearer \" + USER.token };\r\n    } else {\r\n        return {};\r\n    }\r\n}\r\n\r\nexport default authHeader;\r\n","import {REST_INSTANCE as axios} from \"../../axiosAPI\";\r\nimport {QueueActionTypes} from \"./actionTypes\";\r\nimport {CONFIRM_DONE_PATH, QUEUE_PATH} from \"../../constants/constants\";\r\nimport authHeader from \"../../httpHeaders/authHeader\";\r\nimport {QueueDispatch} from \"../types\";\r\nimport {IQueueEntity} from \"../../models/types\";\r\n\r\n/* ----- Fetch LandingPage Data ----- */\r\n\r\nconst fetchQueueStart = () => {\r\n    return {\r\n        type: QueueActionTypes.FETCH_QUEUE_START\r\n    }\r\n};\r\n\r\nconst fetchQueueSuccess = (queueData: Array<IQueueEntity>) => {\r\n    return {\r\n        type: QueueActionTypes.FETCH_QUEUE_SUCCESS,\r\n        queueData: queueData\r\n    }\r\n};\r\n\r\nconst fetchQueueFail = (error: string) => {\r\n    return {\r\n        type: QueueActionTypes.FETCH_QUEUE_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nexport const fetchQueue = () => {\r\n    return (dispatch: QueueDispatch) => {\r\n        dispatch(fetchQueueStart());\r\n\r\n        axios.get(QUEUE_PATH)\r\n            .then(response => {\r\n                dispatch(fetchQueueSuccess(response.data))\r\n            })\r\n            .catch(error => {\r\n                dispatch(fetchQueueFail(error.response))\r\n            })\r\n    }\r\n};\r\n\r\n/* ----- Add to LandingPage ----- */\r\n\r\nconst addToQueueStart = () => {\r\n    return {\r\n        type: QueueActionTypes.ADD_TO_QUEUE_START\r\n    }\r\n};\r\n\r\nconst addToQueueSuccess = () => {\r\n    return {\r\n        type: QueueActionTypes.ADD_TO_QUEUE_SUCCESS\r\n    }\r\n};\r\n\r\nconst addToQueueFail = (error: string) => {\r\n    return {\r\n        type: QueueActionTypes.ADD_TO_QUEUE_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nexport const addToQueue = (queueEntity: IQueueEntity) => {\r\n    return (dispatch: QueueDispatch) => {\r\n        dispatch(addToQueueStart());\r\n        axios.post(QUEUE_PATH, queueEntity)\r\n            .then(() => {\r\n                dispatch(addToQueueSuccess());\r\n                dispatch(fetchQueue());\r\n            })\r\n            .catch(error => {\r\n                dispatch(addToQueueFail(error.response.data));\r\n            });\r\n    }\r\n};\r\n\r\n/* ----- Delete From LandingPage ----- */\r\n\r\nconst deleteFromQueueStart = () => {\r\n    return {\r\n        type: QueueActionTypes.DELETE_FROM_QUEUE_START\r\n    }\r\n};\r\n\r\nconst deleteFromQueueSuccess = () => {\r\n    return {\r\n        type: QueueActionTypes.DELETE_FROM_QUEUE_SUCCESS\r\n    }\r\n};\r\n\r\nconst deleteFromQueueFail = (error: string) => {\r\n    return {\r\n        type: QueueActionTypes.DELETE_FROM_QUEUE_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nexport const deleteFromQueue = (id: number) => {\r\n    return (dispatch: QueueDispatch) => {\r\n        dispatch(deleteFromQueueStart());\r\n\r\n        axios.delete(QUEUE_PATH + id, {headers: authHeader()})\r\n            .then(() => {\r\n                dispatch(deleteFromQueueSuccess());\r\n                dispatch(fetchQueue());\r\n            })\r\n            .catch(error => {\r\n                dispatch(deleteFromQueueFail(error.response));\r\n            });\r\n    }\r\n};\r\n\r\n/* ----- Done in LandingPage ----- */\r\n\r\nconst doneInQueueStart = () => {\r\n    return {\r\n        type: QueueActionTypes.DONE_IN_QUEUE_START\r\n    }\r\n};\r\n\r\nconst doneInQueueSuccess = () => {\r\n    return {\r\n        type: QueueActionTypes.DONE_IN_QUEUE_SUCCESS\r\n    }\r\n};\r\n\r\nconst doneInQueueFail = (error: string) => {\r\n    return {\r\n        type: QueueActionTypes.DONE_IN_QUEUE_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nexport const doneInQueue = (id: number) => {\r\n    return (dispatch: QueueDispatch) => {\r\n        dispatch(doneInQueueStart());\r\n\r\n        axios.post(CONFIRM_DONE_PATH + id, null, {headers: authHeader()})\r\n            .then(() => {\r\n                dispatch(doneInQueueSuccess());\r\n                dispatch(fetchQueue());\r\n            })\r\n            .catch(error => {\r\n                dispatch(doneInQueueFail(error.response));\r\n            });\r\n    }\r\n};","import {QueueActionTypes, SubjectActionTypes} from \"./actionTypes\";\r\nimport {SubjectDispatch} from \"../types\";\r\nimport {REST_INSTANCE as axios} from \"../../axiosAPI\";\r\nimport {CURRENT_SUBJECTS_PATH, DELETE_SUBJECT_PATH, EDIT_SUBJECT_PATH, SUBJECTS_PATH} from \"../../constants/constants\";\r\nimport {ISubject} from \"../../models/types\";\r\nimport authHeader from \"../../httpHeaders/authHeader\";\r\n\r\n/* ----- Fetch Subjects ----- */\r\n\r\nconst fetchSubjectsStart = () => {\r\n    return {\r\n        type: SubjectActionTypes.FETCH_SUBJECTS_START\r\n    }\r\n};\r\n\r\nconst fetchAllSubjectsSuccess = (subjectData: Array<ISubject>) => {\r\n    return {\r\n        type: SubjectActionTypes.FETCH_SUBJECTS_SUCCESS,\r\n        allSubjectData: subjectData\r\n    }\r\n};\r\n\r\nconst fetchCurrentSubjectsSuccess = (subjectData: Array<ISubject>) => {\r\n    return {\r\n        type: SubjectActionTypes.FETCH_SUBJECTS_SUCCESS,\r\n        currentSubjectData: subjectData\r\n    }\r\n}\r\n\r\nconst fetchSubjectsFail = (error: string) => {\r\n    return {\r\n        type: SubjectActionTypes.FETCH_SUBJECTS_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nexport const fetchSubjects = (allSubjects: boolean = false) => {\r\n    return (dispatch: SubjectDispatch) => {\r\n        dispatch(fetchSubjectsStart());\r\n\r\n        const path = allSubjects ? SUBJECTS_PATH : CURRENT_SUBJECTS_PATH;\r\n\r\n        axios.get(path)\r\n            .then(response => {\r\n                allSubjects ? dispatch(fetchAllSubjectsSuccess(response.data)) : dispatch(fetchCurrentSubjectsSuccess(response.data));\r\n            }).catch(error => {\r\n            dispatch(fetchSubjectsFail(error.response));\r\n        });\r\n    }\r\n};\r\n\r\n/* ----- Add Subject ----- */\r\n\r\nconst addEditSubjectStart = () => {\r\n    return {\r\n        type: SubjectActionTypes.ADD_SUBJECT_START\r\n    }\r\n};\r\n\r\nconst addEditSubjectSuccess = () => {\r\n    return {\r\n        type: SubjectActionTypes.ADD_SUBJECT_SUCCESS,\r\n    }\r\n};\r\n\r\nconst addEditSubjectFail = (error: string) => {\r\n    return {\r\n        type: SubjectActionTypes.ADD_SUBJECT_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nexport const addEditSubject = (subject: ISubject, edit: boolean = false) => {\r\n    return (dispatch: SubjectDispatch) => {\r\n        dispatch(addEditSubjectStart());\r\n\r\n\r\n        let apiCall;\r\n        if (edit) {\r\n            apiCall = axios.put(EDIT_SUBJECT_PATH + subject.id, subject, {headers: authHeader()});\r\n        } else {\r\n            apiCall = axios.post(SUBJECTS_PATH, subject, {headers: authHeader()});\r\n        }\r\n\r\n        apiCall.then(() => {\r\n            dispatch(addEditSubjectSuccess());\r\n            dispatch(fetchSubjects(true));\r\n        })\r\n            .catch(error => {\r\n                dispatch(addEditSubjectFail(error.response));\r\n            })\r\n    }\r\n}\r\n\r\n/* ----- Delete Subject ----- */\r\n\r\nconst deleteSubjectStart = () => {\r\n    return {\r\n        type: QueueActionTypes.DELETE_FROM_QUEUE_START\r\n    }\r\n};\r\n\r\nconst deleteSubjectSuccess = () => {\r\n    return {\r\n        type: QueueActionTypes.DELETE_FROM_QUEUE_SUCCESS\r\n    }\r\n};\r\n\r\nconst deleteSubjectFail = (error: string) => {\r\n    return {\r\n        type: QueueActionTypes.DELETE_FROM_QUEUE_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nexport const deleteSubject = (id: number) => {\r\n    return (dispatch: SubjectDispatch) => {\r\n        dispatch(deleteSubjectStart());\r\n\r\n        axios.delete(DELETE_SUBJECT_PATH + id, {headers: authHeader()})\r\n            .then(() => {\r\n                dispatch(deleteSubjectSuccess());\r\n                dispatch(fetchSubjects(true));\r\n            })\r\n            .catch(error => {\r\n                dispatch(deleteSubjectFail(error.response));\r\n            });\r\n    }\r\n};","import React, {MouseEventHandler, FunctionComponent} from 'react';\r\n\r\ntype Props = {\r\n    onClick?: MouseEventHandler,\r\n    className?: string,\r\n    disabled?: boolean,\r\n}\r\n\r\nexport const SubmitButton: FunctionComponent<Props> = (props) =>\r\n    <button\r\n        type=\"submit\"\r\n        disabled={props.disabled}\r\n        className={`btn btn-primary ${props.className}`}\r\n        onClick={props.onClick}>{props.children}\r\n    </button>\r\n\r\nexport const CancelButton: FunctionComponent<Props> = (props) => (\r\n    <button\r\n        disabled={props.disabled}\r\n        className={`btn btn-danger ${props.className}`}\r\n        onClick={props.onClick}>{props.children}</button>\r\n);\r\n\r\nexport const ConfirmButton: FunctionComponent<Props> = (props) => (\r\n    <button\r\n        disabled={props.disabled}\r\n        className={`btn btn-success ${props.className}`}\r\n        onClick={props.onClick}>{props.children}</button>\r\n);\r\n\r\nexport const DeleteButton: FunctionComponent<Props> = (props) => (\r\n    <button\r\n        disabled={props.disabled}\r\n        className={`btn btn-danger ${props.className}`}\r\n        onClick={props.onClick}>{props.children}</button>\r\n);","import {InputConfig} from \"../models/inputModels\";\r\nimport {DeepMap, FieldError} from \"react-hook-form\";\r\nimport {FormElementType} from \"../constants/constants\";\r\n\r\n\r\n//Add cases to this function if more input types in need of validation are added.\r\nexport const createUseFormRef = (inputConfig: InputConfig, register: any) => {\r\n\r\n    switch (inputConfig.type) {\r\n        case FormElementType.TEXT:\r\n            return  register({\r\n                required: inputConfig.validation.errorMessage,\r\n                minLength: {\r\n                    value: inputConfig.validation.minLength,\r\n                    message: inputConfig.validation.errorMessage\r\n                }\r\n            })\r\n\r\n        default:\r\n            return register;\r\n    }\r\n}\r\n\r\nexport const inputHasError = (errors: DeepMap<Record<string, any>, FieldError>, inputConfig: InputConfig) => {\r\n    let errorInInput = false;\r\n    for (const key of Object.entries(errors)) {\r\n        if (key[0] === inputConfig.name) {\r\n            errorInInput = true;\r\n        }\r\n    }\r\n\r\n    return errorInInput;\r\n}","import React, {forwardRef} from \"react\";\r\nimport {ITextConfig} from \"../../../models/inputModels\";\r\n\r\ntype Props = {\r\n    inputConfig: ITextConfig;\r\n    onChange?: (event: React.FormEvent<HTMLInputElement>) => void;\r\n    error: boolean;\r\n};\r\n\r\nconst Input = forwardRef((props: Props, ref: React.Ref<any>) => {\r\n    let classnames = \"form-control ml-1 mr-1 mt-3 mb-3 \";\r\n\r\n    if (props.error) {\r\n        classnames += \"is-invalid \";\r\n    }\r\n\r\n    const handleOnchange = (event: any) => {\r\n        if (props.onChange) {\r\n            props.onChange(event);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                ref={ref} className={classnames} onChange={handleOnchange} key={props.inputConfig.key} {...props.inputConfig}\r\n            />\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Input;","import React, {forwardRef} from \"react\";\r\nimport {ISelectConfig} from \"../../../models/inputModels\";\r\n\r\ntype Props = {\r\n    inputConfig: ISelectConfig;\r\n    onChange?: (event: React.FormEvent<HTMLInputElement>) => void;\r\n    error?: boolean;\r\n};\r\n\r\nconst Select = forwardRef((props: Props, ref: React.Ref<any>) => {\r\n    let classnames = \"form-control ml-1 mr-1 mt-3 mb-3 \";\r\n\r\n    if (props.error) {\r\n        classnames += \"is-invalid \";\r\n    }\r\n\r\n    const handleOnchange = (event: any) => {\r\n        if (props.onChange) {\r\n            props.onChange(event);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <select ref={ref} className={classnames} onChange={handleOnchange} {...props.inputConfig}>\r\n                {props.inputConfig.options.map(option => {\r\n\r\n                    //Enables use of serialized objects as values\r\n                    const value = typeof option.value === \"object\" ? JSON.stringify(option.value) : String(option.value);\r\n\r\n                    return (\r\n                        <option key={option.displayValue} value={value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    )\r\n                })}\r\n            </select>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Select;","import React, {FC, useEffect, useState} from \"react\";\r\nimport {DeleteButton, SubmitButton} from \"../../UI/Buttons/buttons\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport Input from \"../Inputs/input\";\r\nimport Select from \"../Inputs/select\";\r\nimport {FormElementType, Semester} from \"../../../constants/constants\";\r\nimport {convertObjectStringsToPrimitives, updateObject} from \"../../../utilities/objectUtilities\";\r\nimport {createUseFormRef, inputHasError} from \"../../../utilities/formUtilities\";\r\nimport {SubjectDispatch} from \"../../../store/types\";\r\nimport {IRadioConfig, ISelectConfig, ITextConfig} from \"../../../models/inputModels\";\r\nimport Radio from \"../Inputs/radio\";\r\nimport {ISubject} from \"../../../models/types\";\r\nimport SwalConfirmModal from \"../../UI/Modals/SwalModals/swalConfirmModal\";\r\n\r\nenum FormElements {\r\n    SELECTED_SUBJECT = \"selectedSubject\",\r\n    NEW_SUBJECT_NAME = \"newSubjectName\",\r\n    CHECKED_SEMESTER = \"checkedSemester\",\r\n}\r\n\r\ntype FormValues = {\r\n    selectedSubject: string,\r\n    newSubjectName: string,\r\n    checkedSemester: string,\r\n}\r\n\r\ntype Props = {\r\n    subjects: Array<ISubject>;\r\n    loading: boolean;\r\n    error: string | null;\r\n    fetchSubjects: (allSubjects?: boolean) => (dispatch: SubjectDispatch) => void;\r\n    addEditSubject: (subject: ISubject, edit: boolean) => void;\r\n    deleteSubject: (id: number) => void;\r\n}\r\n\r\nconst SubjectForm: FC<Props> = (props) => {\r\n    const {NEW_SUBJECT_NAME, SELECTED_SUBJECT, CHECKED_SEMESTER} = FormElements;\r\n    const NEW_SUBJECT = \"<New Subject>\";\r\n\r\n    const {register, handleSubmit, reset, errors, formState: {isSubmitSuccessful}} = useForm();\r\n    const [editState, setEditState] = useState<boolean>(false);\r\n\r\n    const [subjectSelect, setSubjectSelect] = useState<ISelectConfig>({\r\n        type: FormElementType.SELECT,\r\n        name: SELECTED_SUBJECT,\r\n        options: []\r\n    });\r\n\r\n    const [nameInput, setNameInput] = useState<ITextConfig>({\r\n        type: FormElementType.TEXT,\r\n        name: NEW_SUBJECT_NAME,\r\n        key: NEW_SUBJECT_NAME,\r\n        placeholder: \"Subject Name\",\r\n        validation: {\r\n            minLength: 3,\r\n            errorMessage: \"Please provide a subject name of with at least 3 characters\"\r\n        },\r\n    });\r\n\r\n    const [checkedSemester, setCheckedSemester] = useState<IRadioConfig>({\r\n        type: FormElementType.RADIO,\r\n        name: CHECKED_SEMESTER,\r\n        buttons: [\r\n            {label: Semester.SPRING, value: 0, key: Semester.SPRING, defaultChecked: true},\r\n            {label: Semester.AUTUMN, value: 1, key: Semester.AUTUMN, defaultChecked: false}\r\n        ]\r\n    });\r\n\r\n    //Fills the subjectselector in the first render cycle.\r\n    useEffect(() => {\r\n        if (props.subjects.length > 0) {\r\n            fillSubjectSelector();\r\n        } else {\r\n            props.fetchSubjects(true);\r\n        }\r\n    }, [props.subjects])\r\n\r\n    //Used to reset the form whenever is is submitted.\r\n    useEffect(() => {\r\n        if (isSubmitSuccessful) {\r\n            resetForm();\r\n        }\r\n    }, [isSubmitSuccessful, reset])\r\n\r\n    const fillSubjectSelector = () => {\r\n        const subjectListUpdated = {...subjectSelect};\r\n        subjectListUpdated.options = [];\r\n\r\n        subjectListUpdated.options.push({value: {name: NEW_SUBJECT}, displayValue: NEW_SUBJECT})\r\n        props.subjects.forEach(subject => {\r\n            subjectListUpdated.options.push({value: subject, displayValue: subject.name});\r\n        });\r\n\r\n        setSubjectSelect(subjectListUpdated);\r\n    };\r\n\r\n    //Due to how nameInput's default value is set each time a subject is selected, the out of the box reset function\r\n    //from hook-form doesn't suffice.\r\n    const resetForm = () => {\r\n        const nameInputCleared = updateObject(nameInput, {defaultValue: \"\"})\r\n        setNameInput(nameInputCleared);\r\n        setEditState(false);\r\n        reset();\r\n    }\r\n\r\n    const registrationHandler = async (formData: FormValues) => {\r\n        const selectedSubject = convertObjectStringsToPrimitives(JSON.parse(formData.selectedSubject));\r\n\r\n        //A new subject won't have an id, set it to zero in that case\r\n        const subject = {\r\n            id: selectedSubject.id ? selectedSubject.id : 0,\r\n            name: formData.newSubjectName,\r\n            semester: formData.checkedSemester === \"0\" ? Semester.SPRING : Semester.AUTUMN,\r\n        }\r\n\r\n        if (editState) {\r\n            const userConfirmation = await SwalConfirmModal({\r\n                title: `Confirm new details of ${selectedSubject.name}`,\r\n                contentText: `New name: ${subject.name}. New semester: ${subject.semester}`\r\n            });\r\n\r\n            if (userConfirmation) props.addEditSubject(subject, true);\r\n\r\n        } else {\r\n\r\n            const userConfirmation = await SwalConfirmModal({\r\n                title: `Are you sure you want to add new subject ${subject.name}?`,\r\n                contentText: `If you have selected the current semester as this subject's semester, it will be visible\r\n                to all users once it is saved`\r\n            });\r\n\r\n            if (userConfirmation) props.addEditSubject(subject, false);\r\n        }\r\n    }\r\n\r\n    const deleteHandler = async (formData: FormValues) => {\r\n        const selectedSubject = convertObjectStringsToPrimitives(JSON.parse(formData.selectedSubject));\r\n        const userConfirmation = await SwalConfirmModal({title: `Delete ${selectedSubject.name}?`, contentText: \"This action is final and cannot be reverted.\"});\r\n\r\n        if (userConfirmation) props.deleteSubject(selectedSubject.id);\r\n    };\r\n\r\n    //Whenever a subject is selected, the name and semester inputs are to be updated to reflect the selected subject's name\r\n    //and semester. Reset to default values if <New Subject> is selected.\r\n    const subjectSelectHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n        const nameInputFilled = {...nameInput};\r\n        const semesterCheckedUpdated = {...checkedSemester}\r\n        const selectedSubject: ISubject = JSON.parse(event.currentTarget.value);\r\n\r\n        if (selectedSubject.name === NEW_SUBJECT) {\r\n            setEditState(false);\r\n            nameInputFilled.placeholder = \"Subject Name\";\r\n            nameInputFilled.defaultValue = \"\";\r\n            nameInputFilled.key = NEW_SUBJECT;\r\n\r\n        } else {\r\n            setEditState(true);\r\n            nameInputFilled.defaultValue = selectedSubject.name;\r\n            nameInputFilled.key = selectedSubject.name;\r\n\r\n            semesterCheckedUpdated.buttons.forEach(button => {\r\n                button.key = selectedSubject.name;\r\n                button.defaultChecked = button.label === selectedSubject.semester;\r\n            })\r\n        }\r\n\r\n        setNameInput(nameInputFilled);\r\n        setCheckedSemester(semesterCheckedUpdated);\r\n    }\r\n\r\n    const form = <form className={\"mt-2 mb-2\"} style={{width: \"80%\", margin: \"auto\"}}>\r\n        <Select ref={createUseFormRef(subjectSelect, register)} inputConfig={subjectSelect} onChange={(event) => subjectSelectHandler(event)}/>\r\n        <Input ref={createUseFormRef(nameInput, register)} inputConfig={nameInput} error={inputHasError(errors, nameInput)}/>\r\n        <Radio ref={createUseFormRef(checkedSemester,register)} inputConfig={checkedSemester}/>\r\n\r\n        <div className={\"form-group\"}>\r\n            <SubmitButton onClick={handleSubmit(registrationHandler)}>{editState ? \"Save Edit\" : \"Save New\"}</SubmitButton>\r\n            {editState ? <DeleteButton className={\"ml-2\"} onClick={handleSubmit(deleteHandler)}>Delete Subject</DeleteButton> : null}\r\n        </div>\r\n    </form>\r\n\r\n    return (\r\n        <>\r\n            {form}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SubjectForm;","import {RootState} from \"../../../store\";\r\nimport {bindActionCreators, Dispatch} from \"redux\";\r\nimport {addToQueue} from \"../../../store/actions/queueActions\";\r\nimport {connect} from \"react-redux\";\r\nimport QueueForm from \"./queueForm\";\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n    return {\r\n        subjects: state.subjects.currentSubjectData,\r\n        loading: state.queue.loading,\r\n        error: state.queue.error\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return bindActionCreators({\r\n        addQueueEntity: addToQueue,\r\n    }, dispatch);\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QueueForm);","import React from \"react\";\r\n\r\ntype Props = {\r\n    defaultColumns: Array<string>,\r\n    loggedInColumns: Array<string>,\r\n    isAuthenticated: boolean\r\n}\r\n\r\nconst tableHead = (props: Props) => {\r\n\r\n    let columns: Array<JSX.Element> = [];\r\n    props.defaultColumns.forEach(column => {\r\n        columns.push(<th key={`${column} Header`} scope=\"col\">{column}</th>);\r\n    });\r\n\r\n    if (props.isAuthenticated) {\r\n        props.loggedInColumns.forEach(column => {\r\n            columns.push(<th key={`${column} Header`} scope=\"col\">{column}</th>);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <thead key={\"tableHead\"} className=\"thead-dark\">\r\n        <tr>\r\n            {columns}\r\n        </tr>\r\n        </thead>\r\n    );\r\n};\r\n\r\nexport default tableHead;","import React from \"react\";\r\nimport {Table} from \"react-bootstrap\";\r\nimport TableHead from \"../../TableHead/tableHead\";\r\nimport {ConfirmButton, DeleteButton} from \"../../../UI/Buttons/buttons\";\r\nimport {IQueueEntity} from \"../../../../models/types\";\r\n\r\ntype Props = {\r\n    queueData: Array<IQueueEntity>,\r\n    confirmDoneEntity: (id: number) => void,\r\n    deleteQueueEntity: (id: number) => void,\r\n    isAuthenticated: boolean,\r\n    userRoles: Array<string>,\r\n    defaultColumns: Array<string>,\r\n    loggedInColumns: Array<string>\r\n}\r\n\r\nconst queueTable = (props: Props) => {\r\n\r\n    /* ----- Create Table Body ----- */\r\n    const {queueData, confirmDoneEntity, deleteQueueEntity, isAuthenticated, userRoles, defaultColumns, loggedInColumns} = props;\r\n    let rows = [];\r\n\r\n    for (let i = 0; i < queueData.length; i++) {\r\n        let rowId = \"row\" + i;\r\n\r\n        let cells = [];\r\n        cells.push(<td key={\"entry\" + i} id={\"entry\" + i}># {i + 1}</td>);\r\n        cells.push(<td key={\"name\" + i} id={\"name\" + i}>{queueData[i].name}</td>);\r\n        cells.push(<td key={\"subject\" + i} id={\"subject\" + i}>{queueData[i].subject}</td>);\r\n        cells.push(<td key={\"discord\" + i} id={\"discord\" + i}>{!queueData[i].digitalConsultation ? \"Datatorget\" : \"Discord\"}</td>);\r\n\r\n        if (isAuthenticated && userRoles.includes(\"ROLE_ADMIN\")) {\r\n                cells.push(<td key={\"actions\" + i} id={\"action\" + i}>{\r\n                    <>\r\n                        <ConfirmButton onClick={() => confirmDoneEntity(queueData[i].id)}>Ferdig</ConfirmButton>\r\n                        <DeleteButton className=\"ml-2\" onClick={() => deleteQueueEntity(queueData[i].id)}>Slett</DeleteButton>\r\n                    </>\r\n                }</td>);\r\n        }\r\n        rows.push(<tr key={i} id={rowId}>{cells}</tr>);\r\n    }\r\n\r\n    const tableHead = <TableHead defaultColumns={defaultColumns} loggedInColumns={loggedInColumns} isAuthenticated={isAuthenticated}/>;\r\n    const tableBody = <tbody>{rows}</tbody>;\r\n\r\n    return (\r\n        <Table striped bordered hover responsive className={\"mb-4 bg-white\"}>{tableHead}{tableBody}</Table>\r\n    );\r\n};\r\n\r\nexport default queueTable;","import React from \"react\";\r\n\r\nconst loadingSpinner = () => (\r\n    <div className=\"spinner-border text-primary\"></div>\r\n);\r\n\r\nexport default loadingSpinner;","import {useRef, useEffect} from 'react'\r\n\r\n//Taken from https://usehooks-typescript.com/react-hook/use-interval\r\nconst useInterval = (callback: () => void, delay: number | null) => {\r\n\r\n    const savedCallback = useRef<() => void | null>()\r\n\r\n    // Remember the latest callback.\r\n    useEffect(() => {\r\n        savedCallback.current = callback\r\n    })\r\n\r\n    // Set up the interval.\r\n    useEffect(() => {\r\n        const tick = () => {\r\n            if (typeof savedCallback?.current !== 'undefined') {\r\n                savedCallback?.current()\r\n            }\r\n        }\r\n\r\n        if (delay !== null) {\r\n            const id = setInterval(tick, delay)\r\n            return () => clearInterval(id)\r\n        }\r\n    }, [delay])\r\n}\r\n\r\nexport default useInterval","import {useRef, useEffect} from \"react\";\r\n\r\nconst usePreviousState = (state: any) => {\r\n    const ref = useRef();\r\n\r\n    useEffect(() => {\r\n        ref.current = state;\r\n    });\r\n\r\n    return ref.current;\r\n}\r\n\r\nexport default usePreviousState;","import React, {FC, useEffect} from \"react\";\r\n\r\nimport Table from \"./QueueTable/queueTable\";\r\nimport {jsonArrayEqual} from \"../../../utilities/arrayUtilities\";\r\nimport LoadingSpinner from \"../../UI/LoadingSpinner/loadingSpinner\";\r\nimport useInterval from \"../../../hooks/useInterval\";\r\nimport usePreviousState from \"../../../hooks/usePreviousState\";\r\nimport useSound from \"use-sound\";\r\nimport {IQueueEntity} from \"../../../models/types\";\r\n\r\nconst notificationSound = require(\"../../../assets/sounds/hellothere.mp3\");\r\n\r\ntype Props = {\r\n    isAuthenticated: boolean;\r\n    userRoles: Array<string>;\r\n    queueData: Array<IQueueEntity>;\r\n    loading: boolean;\r\n    error: string | null;\r\n    deleteQueueEntity: (id: number) => void;\r\n    confirmDoneEntity: (id: number) => void;\r\n    pollingFunction: () => void;\r\n}\r\n\r\nconst Queue: FC<Props> = (props) => {\r\n    const {isAuthenticated, userRoles, queueData, deleteQueueEntity, confirmDoneEntity, pollingFunction} = props;\r\n    const [play] = useSound(notificationSound)\r\n    const previousQueue = usePreviousState(queueData) as unknown as Array<IQueueEntity>\r\n\r\n    //Use effect only to be triggered when the component is first rendered.\r\n    useEffect(() => {\r\n        pollingFunction();\r\n    }, [pollingFunction])\r\n\r\n    //Make the LandingPage update a 5 second interval\r\n    useInterval(() => {\r\n        pollingFunction()\r\n    }, 5000);\r\n\r\n    //Play a notification sound if a new person has been added to the queue\r\n    useEffect(() => {\r\n\r\n        //Due to the API taking a few ms to respond, previousQueue will be undefined in the first render cycle.\r\n        if (previousQueue && isAuthenticated) {\r\n            if (queueData.length >= previousQueue.length) {\r\n                if (!jsonArrayEqual(queueData, previousQueue)) {\r\n                    play();\r\n                }\r\n            }\r\n        }\r\n    }, [queueData, isAuthenticated, play, previousQueue])\r\n\r\n    /* ----- Create Table ----- */\r\n    let table = queueData === undefined ? <LoadingSpinner/> : <Table\r\n        defaultColumns={[\"Plassering\", \"Navn\", \"Emne\", \"Arena\"]}\r\n        loggedInColumns={[\"Handlinger\"]}\r\n        queueData={queueData}\r\n        isAuthenticated={isAuthenticated}\r\n        userRoles={userRoles}\r\n        confirmDoneEntity={confirmDoneEntity}\r\n        deleteQueueEntity={deleteQueueEntity}\r\n    />;\r\n\r\n    return (\r\n        <>\r\n            {table}\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default Queue","export const jsonArrayEqual = (a: Array<any>, b: Array<any>): boolean => {\r\n\r\n    if (a.length !== b.length) return false;\r\n\r\n    let allObjectsEqual = true;\r\n    for (let i = 0; i < a.length; i++) {\r\n        if (JSON.stringify(a[i]) !== JSON.stringify(b[i])) {\r\n            allObjectsEqual = false;\r\n            break;\r\n        }\r\n    }\r\n    return allObjectsEqual;\r\n}","import {RootState} from \"../../../store\";\r\nimport {bindActionCreators, Dispatch} from \"redux\";\r\nimport {deleteFromQueue, doneInQueue, fetchQueue} from \"../../../store/actions/queueActions\";\r\nimport {connect} from \"react-redux\";\r\nimport Queue from \"./queue\";\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n    return {\r\n        isAuthenticated: state.auth.user?.token != null,\r\n        userRoles: state.auth.user ? state.auth.user.roles : [],\r\n        queueData: state.queue.queueData,\r\n        loading: state.queue.loading,\r\n        error: state.queue.error\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return bindActionCreators({\r\n        deleteQueueEntity: deleteFromQueue,\r\n        confirmDoneEntity: doneInQueue,\r\n        pollingFunction: fetchQueue\r\n    }, dispatch);\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Queue);","import React from \"react\";\r\nimport QueueFormConnected from \"../../components/Forms/QueueForm/queueFormConnected\";\r\nimport QueueConnected from \"../../components/Tables/Queue/queueConnected\";\r\n\r\nconst LandingPage = () => {\r\n    return (\r\n        <>\r\n            <QueueFormConnected/>\r\n            <QueueConnected/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LandingPage;","import React, {FC} from \"react\";\r\n\r\ntype Props = {\r\n    shadow: boolean;\r\n    widthPercent: number;\r\n    header: string;\r\n}\r\n\r\nconst Card: FC<Props> = (props) => {\r\n\r\n    let styleClasses = \"card bg-white mb-4 mt-4 ml-4 mr-4 \";\r\n    const width = `${String(props.widthPercent)}%`\r\n\r\n    if (props.shadow) {\r\n        styleClasses += \"shadow rounded \";\r\n    }\r\n\r\n    return(\r\n        <div className={styleClasses} style={{width: width}}>\r\n            <div className={\"card-header bg-warning\"}><h2><b>{props.header}</b></h2></div>\r\n            {props.children}\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Card;","import React, {forwardRef} from \"react\";\r\nimport {IRadioConfig} from \"../../../models/inputModels\";\r\n\r\ntype Props = {\r\n    inputConfig: IRadioConfig;\r\n    onChange?: (event: React.FormEvent<HTMLInputElement>) => void;\r\n    error?: boolean;\r\n};\r\n\r\nconst Radio = forwardRef((props: Props, ref: React.Ref<any>) => {\r\n    let classnames = \"form-check form-check-inline ml-2 mr-2 mt-2 mb-4 \";\r\n\r\n    if (props.error) {\r\n        classnames += \"is-invalid \";\r\n    }\r\n\r\n    const handleOnchange = (event: any) => {\r\n        if (props.onChange) {\r\n            props.onChange(event);\r\n        }\r\n    }\r\n\r\n    const radioDivs: Array<JSX.Element> = [];\r\n    props.inputConfig.buttons.forEach(button => {\r\n        radioDivs.push(\r\n            <div key={button.label} className={classnames}>\r\n                <input\r\n                    key={`${button.key}radio${button.value}`}\r\n                    value={button.value}\r\n                    className={\"form-check-input \"}\r\n                    ref={ref}\r\n                    defaultChecked={button.defaultChecked}\r\n                    onChange={handleOnchange}\r\n                    {...props.inputConfig}/>\r\n                <label className={\"form-check-label\"}>{button.label}</label>\r\n            </div>);\r\n    })\r\n\r\n    return (\r\n        <>\r\n            {radioDivs}\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Radio;\r\n\r\n","import Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\n\r\ntype Props = {\r\n    title: string,\r\n    contentText?: string,\r\n}\r\n\r\nconst SwalConfirmModal = (props: Props) => {\r\n    const {title, contentText} = props;\r\n    const mySwal = withReactContent(Swal)\r\n\r\n    return mySwal.fire({\r\n        title: title,\r\n        html: contentText,\r\n        icon: \"warning\",\r\n        showDenyButton: true,\r\n        confirmButtonText: \"Confirm\",\r\n        denyButtonText: \"Cancel\",\r\n\r\n    }).then((result => {\r\n        if (result.isConfirmed) {\r\n            mySwal.fire(\"Done!\", \"\", \"success\");\r\n            return true;\r\n        } else if (result.isDenied) {\r\n            mySwal.fire(\"Aborted\", \"\", \"info\");\r\n            return false;\r\n        }\r\n    }));\r\n};\r\n\r\nexport default SwalConfirmModal","import {RootState} from \"../../../store\";\r\nimport {bindActionCreators, Dispatch} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport SubjectForm from \"./subjectForm\";\r\nimport {addEditSubject, deleteSubject, fetchSubjects} from \"../../../store/actions/subjectActions\";\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n    return {\r\n        subjects: state.subjects.allSubjectData,\r\n        loading: state.queue.loading,\r\n        error: state.queue.error\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return bindActionCreators({\r\n        fetchSubjects: fetchSubjects,\r\n        addEditSubject: addEditSubject,\r\n        deleteSubject: deleteSubject,\r\n    }, dispatch);\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SubjectForm);","import React from \"react\";\r\nimport {FILE_DOWNLOAD_CONFIG, FILE_INSTANCE as axios} from \"../../../axiosAPI\";\r\nimport {SubmitButton} from \"../../UI/Buttons/buttons\";\r\nimport {QUEUE_EXPORT_PATH} from \"../../../constants/constants\";\r\nimport authHeader from \"../../../httpHeaders/authHeader\";\r\n\r\nconst QueueExportForm = () => {\r\n\r\n    const getQueueExport = () => {\r\n        axios.get(QUEUE_EXPORT_PATH, {headers: authHeader()})\r\n            .then(response => {\r\n                FILE_DOWNLOAD_CONFIG(\"queueData\", \"csv\", response.data);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div style={{margin: \"auto\"}}>\r\n            <SubmitButton onClick={getQueueExport}>Export</SubmitButton>\r\n        </div>);\r\n};\r\n\r\nexport default QueueExportForm;","import React from \"react\";\r\nimport styles from \"./adminPage.module.css\";\r\nimport Card from \"../../components/UI/Cards/card\";\r\nimport SubjectForm from \"../../components/Forms/SubjectForm/subjectFormConnected\";\r\nimport QueueExportForm from \"../../components/Forms/QueueExportForm/queueExportForm\";\r\n\r\ntype Props = {\r\n    isAuthenticated: boolean\r\n}\r\n\r\nconst AdminPage = (props: Props) => {\r\n\r\n    return (\r\n        <>\r\n            {!props.isAuthenticated ? <h1 style={{color: \"red\"}}>UNAUTHORIZED</h1> :\r\n                <div className={\"d-flex flex-row \" + styles.adminPage}>\r\n                    <Card widthPercent={25} shadow={true} header={\"Subjects\"}><SubjectForm/></Card>\r\n                    <Card widthPercent={25} shadow={true} header={\"Export Queue Data\"}><QueueExportForm/></Card>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AdminPage;","import {RootState} from \"../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport AdminPage from \"./adminPage\";\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n    return {\r\n        isAuthenticated: state.auth.user?.token !== undefined\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(AdminPage);","import React, {useEffect} from 'react';\r\nimport {Route, Switch, withRouter, Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {checkValidAuth, fetchSubjects} from \"./store/actions/actionIndex\";\r\nimport LandingPage from \"./containers/LandingPage/landingPage\";\r\nimport {ADMIN_ROUTE, INDEX_ROUTE} from \"./constants/constants\";\r\nimport {bindActionCreators, Dispatch} from \"redux\";\r\nimport AdminPageConnected from \"./containers/AdminPage/adminPageConnected\";\r\nimport {RootState} from \"./store\";\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return bindActionCreators({\r\n        autoLogin: checkValidAuth,\r\n        getSubjectData: fetchSubjects\r\n    }, dispatch);\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n    return {\r\n        isAuthenticated: state.auth.user?.token != null\r\n    }\r\n};\r\n\r\ntype Props = ReturnType<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\r\n\r\nconst App: React.FC<Props> = (props: Props) => {\r\n    const {autoLogin, getSubjectData} = props;\r\n\r\n    useEffect(() => {\r\n        autoLogin();\r\n        getSubjectData();\r\n    }, [autoLogin, getSubjectData]);\r\n\r\n    let routes = (\r\n        <Switch>\r\n            <Route path={INDEX_ROUTE} exact render={LandingPage}/>\r\n            <Redirect to={INDEX_ROUTE}/>\r\n        </Switch>\r\n    );\r\n\r\n    if (props.isAuthenticated) {\r\n        routes = (\r\n            <Switch>\r\n                <Route path={ADMIN_ROUTE} render={() => <AdminPageConnected/>}/>\r\n                <Route path={INDEX_ROUTE} exact render={LandingPage}/>\r\n                <Redirect to={INDEX_ROUTE}/>\r\n            </Switch>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div style={{textAlign: \"center\"}}>\r\n            {routes}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\r\n\r\n\r\n","import Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\n\r\ntype Props = {\r\n    title: string,\r\n    contentText: string,\r\n    url: string | null,\r\n    hyperlinkText: string | null\r\n}\r\n\r\nconst SwalInfoModal = (props: Props) => {\r\n    const {title, contentText, url, hyperlinkText} = props;\r\n    const mySwal = withReactContent(Swal)\r\n    const hyperlinkDiv: HTMLDivElement = document.createElement(\"div\");\r\n\r\n    if (url && hyperlinkText) {\r\n        hyperlinkDiv.innerHTML = `<strong><a href=\"${url}\" target=\"_blank\">${hyperlinkText}</a></strong>`;\r\n    }\r\n\r\n    return mySwal.fire({\r\n            title: title,\r\n            html: contentText,\r\n            footer: url && hyperlinkText ? hyperlinkDiv : null,\r\n            icon: \"info\",\r\n            confirmButtonText: \"Lukk\"\r\n    });\r\n};\r\n\r\nexport default SwalInfoModal","import Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport {AuthDispatch} from \"../../../../store/types\";\r\n\r\ntype Props = {\r\n    onLoginSubmit: (username: string, password: string) => (dispatch: AuthDispatch) => Promise<boolean | undefined>;\r\n    clearLoginError: () => void;\r\n}\r\n\r\nconst SwalLoginModal = (props: Props) => {\r\n    const {onLoginSubmit, clearLoginError} = props;\r\n    const mySwal = withReactContent(Swal)\r\n\r\n    return mySwal.fire({\r\n        title: \"Orakel Innlogging\",\r\n        html: `<input type=\"text\" id=\"login\" class=\"swal2-input\" placeholder=\"Brukernavn\">\r\n                        <input type=\"password\" id=\"password\" class=\"swal2-input\" placeholder=\"Passord\">`,\r\n        confirmButtonText: \"Logg Inn\",\r\n        showLoaderOnConfirm: true,\r\n        showCancelButton: true,\r\n        cancelButtonColor: \"#d33\",\r\n        cancelButtonText: \"Avbryt\",\r\n        allowOutsideClick: () => !mySwal.isLoading(),\r\n        preConfirm: async() => {\r\n            const usernameInput = mySwal.getPopup()!.querySelector(\"#login\")! as HTMLInputElement\r\n            const passwordInput = mySwal.getPopup()!.querySelector(\"#password\")! as HTMLInputElement\r\n\r\n            const username = usernameInput.value.trim()\r\n            const password = passwordInput.value.trim()\r\n\r\n            if (!username || !password) {\r\n                mySwal.showValidationMessage(\"Oppgi brukernavn og passord!\");\r\n                return false;\r\n            }\r\n\r\n            const successfulLogin = await onLoginSubmit(username, password);\r\n            if (!successfulLogin) {\r\n                mySwal.showValidationMessage(\"Ugyldig brukernavn eller passord!\");\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n    }).then((result) => {\r\n        if (result.isDismissed) {\r\n            clearLoginError()\r\n        }\r\n    })\r\n};\r\n\r\nexport default SwalLoginModal","import React from \"react\";\r\nimport {Navbar as BootsrapNav, NavbarProps as BootstrapNavProps} from \"react-bootstrap\";\r\nimport {LinkContainer} from \"react-router-bootstrap\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\n\r\nimport styles from \"./navbar.module.css\";\r\n\r\nimport {USER_GUIDE_PATH, ADMIN_ROUTE, INDEX_ROUTE} from \"../../../constants/constants\";\r\n\r\nimport SwalInfoModal from \"../../UI/Modals/SwalModals/swalInfoModal\";\r\nimport SwalLoginModal from \"../../UI/Modals/SwalModals/swalLoginModal\";\r\nimport {AuthDispatch} from \"../../../store/types\";\r\n\r\ntype Props = {\r\n    onLoginSubmit: (username: string, password: string) => (dispatch: AuthDispatch) => Promise<boolean | undefined>;\r\n    clearLoginError: () => void;\r\n    logoutHandler: () => void;\r\n    isAuthenticated: boolean;\r\n}\r\n\r\nconst Navbar: React.FC<Props> = (props) => {\r\n\r\n    const showDiscordMessage = () =>\r\n        SwalInfoModal({\r\n            title: \"Discord\",\r\n            contentText: \"For digital veiledning benytter vi oss av Discord, og har vår egen server til dette. Inne på serveren setter vi pris på om du leser informasjonen i tekstkanalen kalt informasjon, og vi anbefaler alle å laste ned klienten deres i stedet for å bruke tjenesten gjennom nettleseren.\",\r\n            url: \"https://discord.gg/jgzqYpX\",\r\n            hyperlinkText: \"Orakel Discord\"\r\n        })\r\n\r\n    const showErrorReportingMessage = () =>\r\n        SwalInfoModal({\r\n            title: \"Feilrapportering\",\r\n            contentText: \"Orakels køsystem er et fritidsprosjekt som er bygget og vedlikeholdt av en person. Det er derfor en viss fare for bugs og feil. Disse kan rapporteres ved å legge inn en issue på GitHub-repoet, eller ved å ta kontakt med Fredrik Pedersen. Vi setter også pris på ønsker om tilleggsfunksjonalitet :)\",\r\n            url: \"https://github.com/OrakelOsloMet/Orakel_Queue_Client/issues\",\r\n            hyperlinkText: \"GitHub Repo\"\r\n        })\r\n\r\n    const showAboutMessage = () =>\r\n        SwalInfoModal({\r\n            title: \"Om Orakels Køsystem\",\r\n            contentText: \"Coming Soon!\",\r\n            url: USER_GUIDE_PATH,\r\n            hyperlinkText: \"Brukerveiledning\"\r\n        })\r\n\r\n    const swalLogin = () => {\r\n        SwalLoginModal({onLoginSubmit: props.onLoginSubmit, clearLoginError: props.clearLoginError})\r\n    }\r\n\r\n    const linkStyle = props.isAuthenticated ? styles.authenticatedLinkText : styles.defaultLinkText;\r\n    const navbarProps: BootstrapNavProps = props.isAuthenticated ? {expand: \"lg\", bg: \"warning\"} : {\r\n        variant: \"dark\",\r\n        expand: \"lg\",\r\n        bg: \"primary\"\r\n    };\r\n\r\n    const loginButton =\r\n        <Nav.Link\r\n            className={linkStyle}\r\n            onClick={props.isAuthenticated ? props.logoutHandler : swalLogin}>\r\n            {props.isAuthenticated ? \"Logg Ut\" : \"Logg Inn\"}\r\n        </Nav.Link>;\r\n\r\n\r\n    return (\r\n        <BootsrapNav {...navbarProps}>\r\n            <BootsrapNav.Brand className={styles.invisibleOnMobile}>\r\n                <img\r\n                    className={styles.brandImage}\r\n                    alt=\"OsloMet Logo\"\r\n                    src={require(props.isAuthenticated ? \"../../../assets/images/oslometsvart.png\" : \"../../../assets/images/oslomethvit.png\")}\r\n                />\r\n            </BootsrapNav.Brand>\r\n            <LinkContainer to={INDEX_ROUTE}>\r\n                <Nav.Link>\r\n                    <BootsrapNav.Brand\r\n                        className={props.isAuthenticated ? styles.authenticatedBrandText : styles.brandText}>Orakel\r\n                    </BootsrapNav.Brand>\r\n                </Nav.Link>\r\n            </LinkContainer>\r\n            <BootsrapNav.Toggle aria-controls=\"responsive-navbar-nav\"/>\r\n            <BootsrapNav.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav>\r\n                    <Nav.Link className={linkStyle} onClick={showDiscordMessage}>Discord</Nav.Link>\r\n                    <Nav.Link className={linkStyle} onClick={showErrorReportingMessage}>Feilrapportering</Nav.Link>\r\n                    <Nav.Link className={linkStyle} onClick={showAboutMessage}>Om</Nav.Link>\r\n                    {props.isAuthenticated ? <LinkContainer to={ADMIN_ROUTE}><Nav.Link className={linkStyle}>Admin</Nav.Link></LinkContainer> : null}\r\n                    {loginButton}\r\n                </Nav>\r\n            </BootsrapNav.Collapse>\r\n        </BootsrapNav>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import {RootState} from \"../../../store\";\r\nimport {bindActionCreators, Dispatch} from \"redux\";\r\nimport {auth, clearError, logout} from \"../../../store/actions/authActions\";\r\nimport {connect} from \"react-redux\";\r\nimport Navbar from \"./navbar\";\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n    return {\r\n        isAuthenticated: state.auth.user?.token !== undefined\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return bindActionCreators({\r\n        onLoginSubmit: auth,\r\n        clearLoginError: clearError,\r\n        logoutHandler: logout\r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar);\r\n","import React, {FC} from 'react';\r\nimport NavbarConnected from \"../../components/Navigation/Navbar/navbarConnected\";\r\n\r\nconst Layout: FC = (props) => {\r\n    return (\r\n        <>\r\n            <NavbarConnected/>\r\n            <main className=\"mb-5\">\r\n                {props.children}\r\n            </main>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Layout;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {createStore, applyMiddleware} from \"redux\";\r\nimport {Provider} from \"react-redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {rootReducer, composeEnhancers} from \"./store\";\r\n\r\nimport App from './app';\r\nimport './index.css';\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport Layout from \"./higherOrderedComponents/Layout/layout\";\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nconst app = (\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <Layout>\r\n                <App/>\r\n            </Layout>\r\n        </BrowserRouter>\r\n    </Provider>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById(\"root\"));\r\nserviceWorker.unregister();"],"sourceRoot":""}